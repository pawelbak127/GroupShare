"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/notifications/count/route";
exports.ids = ["app/api/notifications/count/route"];
exports.modules = {

/***/ "../../client/components/action-async-storage.external":
/*!*******************************************************************************!*\
  !*** external "next/dist/client/components/action-async-storage.external.js" ***!
  \*******************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/client/components/action-async-storage.external.js");

/***/ }),

/***/ "../../client/components/request-async-storage.external":
/*!********************************************************************************!*\
  !*** external "next/dist/client/components/request-async-storage.external.js" ***!
  \********************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/client/components/request-async-storage.external.js");

/***/ }),

/***/ "../../client/components/static-generation-async-storage.external":
/*!******************************************************************************************!*\
  !*** external "next/dist/client/components/static-generation-async-storage.external.js" ***!
  \******************************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/client/components/static-generation-async-storage.external.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "buffer":
/*!*************************!*\
  !*** external "buffer" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("buffer");

/***/ }),

/***/ "crypto":
/*!*************************!*\
  !*** external "crypto" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("crypto");

/***/ }),

/***/ "events":
/*!*************************!*\
  !*** external "events" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("events");

/***/ }),

/***/ "http":
/*!***********************!*\
  !*** external "http" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("http");

/***/ }),

/***/ "https":
/*!************************!*\
  !*** external "https" ***!
  \************************/
/***/ ((module) => {

module.exports = require("https");

/***/ }),

/***/ "net":
/*!**********************!*\
  !*** external "net" ***!
  \**********************/
/***/ ((module) => {

module.exports = require("net");

/***/ }),

/***/ "punycode":
/*!***************************!*\
  !*** external "punycode" ***!
  \***************************/
/***/ ((module) => {

module.exports = require("punycode");

/***/ }),

/***/ "stream":
/*!*************************!*\
  !*** external "stream" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("stream");

/***/ }),

/***/ "tls":
/*!**********************!*\
  !*** external "tls" ***!
  \**********************/
/***/ ((module) => {

module.exports = require("tls");

/***/ }),

/***/ "url":
/*!**********************!*\
  !*** external "url" ***!
  \**********************/
/***/ ((module) => {

module.exports = require("url");

/***/ }),

/***/ "zlib":
/*!***********************!*\
  !*** external "zlib" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("zlib");

/***/ }),

/***/ "node:async_hooks":
/*!***********************************!*\
  !*** external "node:async_hooks" ***!
  \***********************************/
/***/ ((module) => {

module.exports = require("node:async_hooks");

/***/ }),

/***/ "node:crypto":
/*!******************************!*\
  !*** external "node:crypto" ***!
  \******************************/
/***/ ((module) => {

module.exports = require("node:crypto");

/***/ }),

/***/ "node:fs":
/*!**************************!*\
  !*** external "node:fs" ***!
  \**************************/
/***/ ((module) => {

module.exports = require("node:fs");

/***/ }),

/***/ "node:path":
/*!****************************!*\
  !*** external "node:path" ***!
  \****************************/
/***/ ((module) => {

module.exports = require("node:path");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fnotifications%2Fcount%2Froute&page=%2Fapi%2Fnotifications%2Fcount%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fnotifications%2Fcount%2Froute.js&appDir=C%3A%5CUsers%5Cbacze%5CProject%5CGroupShare%5Cgroupshare-project%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5Cbacze%5CProject%5CGroupShare%5Cgroupshare-project&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fnotifications%2Fcount%2Froute&page=%2Fapi%2Fnotifications%2Fcount%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fnotifications%2Fcount%2Froute.js&appDir=C%3A%5CUsers%5Cbacze%5CProject%5CGroupShare%5Cgroupshare-project%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5Cbacze%5CProject%5CGroupShare%5Cgroupshare-project&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   originalPathname: () => (/* binding */ originalPathname),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   requestAsyncStorage: () => (/* binding */ requestAsyncStorage),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   staticGenerationAsyncStorage: () => (/* binding */ staticGenerationAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(rsc)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var C_Users_bacze_Project_GroupShare_groupshare_project_src_app_api_notifications_count_route_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./src/app/api/notifications/count/route.js */ \"(rsc)/./src/app/api/notifications/count/route.js\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/notifications/count/route\",\n        pathname: \"/api/notifications/count\",\n        filename: \"route\",\n        bundlePath: \"app/api/notifications/count/route\"\n    },\n    resolvedPagePath: \"C:\\\\Users\\\\bacze\\\\Project\\\\GroupShare\\\\groupshare-project\\\\src\\\\app\\\\api\\\\notifications\\\\count\\\\route.js\",\n    nextConfigOutput,\n    userland: C_Users_bacze_Project_GroupShare_groupshare_project_src_app_api_notifications_count_route_js__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks } = routeModule;\nconst originalPathname = \"/api/notifications/count/route\";\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        serverHooks,\n        staticGenerationAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIuanM/bmFtZT1hcHAlMkZhcGklMkZub3RpZmljYXRpb25zJTJGY291bnQlMkZyb3V0ZSZwYWdlPSUyRmFwaSUyRm5vdGlmaWNhdGlvbnMlMkZjb3VudCUyRnJvdXRlJmFwcFBhdGhzPSZwYWdlUGF0aD1wcml2YXRlLW5leHQtYXBwLWRpciUyRmFwaSUyRm5vdGlmaWNhdGlvbnMlMkZjb3VudCUyRnJvdXRlLmpzJmFwcERpcj1DJTNBJTVDVXNlcnMlNUNiYWN6ZSU1Q1Byb2plY3QlNUNHcm91cFNoYXJlJTVDZ3JvdXBzaGFyZS1wcm9qZWN0JTVDc3JjJTVDYXBwJnBhZ2VFeHRlbnNpb25zPXRzeCZwYWdlRXh0ZW5zaW9ucz10cyZwYWdlRXh0ZW5zaW9ucz1qc3gmcGFnZUV4dGVuc2lvbnM9anMmcm9vdERpcj1DJTNBJTVDVXNlcnMlNUNiYWN6ZSU1Q1Byb2plY3QlNUNHcm91cFNoYXJlJTVDZ3JvdXBzaGFyZS1wcm9qZWN0JmlzRGV2PXRydWUmdHNjb25maWdQYXRoPXRzY29uZmlnLmpzb24mYmFzZVBhdGg9JmFzc2V0UHJlZml4PSZuZXh0Q29uZmlnT3V0cHV0PSZwcmVmZXJyZWRSZWdpb249Jm1pZGRsZXdhcmVDb25maWc9ZTMwJTNEISIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7QUFBc0c7QUFDdkM7QUFDYztBQUN3RDtBQUNySTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsZ0hBQW1CO0FBQzNDO0FBQ0EsY0FBYyx5RUFBUztBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsWUFBWTtBQUNaLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxRQUFRLGlFQUFpRTtBQUN6RTtBQUNBO0FBQ0EsV0FBVyw0RUFBVztBQUN0QjtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ3VIOztBQUV2SCIsInNvdXJjZXMiOlsid2VicGFjazovL2dyb3Vwc2hhcmUtcHJvamVjdC8/MzhkMiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBcHBSb3V0ZVJvdXRlTW9kdWxlIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLW1vZHVsZXMvYXBwLXJvdXRlL21vZHVsZS5jb21waWxlZFwiO1xuaW1wb3J0IHsgUm91dGVLaW5kIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLWtpbmRcIjtcbmltcG9ydCB7IHBhdGNoRmV0Y2ggYXMgX3BhdGNoRmV0Y2ggfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9saWIvcGF0Y2gtZmV0Y2hcIjtcbmltcG9ydCAqIGFzIHVzZXJsYW5kIGZyb20gXCJDOlxcXFxVc2Vyc1xcXFxiYWN6ZVxcXFxQcm9qZWN0XFxcXEdyb3VwU2hhcmVcXFxcZ3JvdXBzaGFyZS1wcm9qZWN0XFxcXHNyY1xcXFxhcHBcXFxcYXBpXFxcXG5vdGlmaWNhdGlvbnNcXFxcY291bnRcXFxccm91dGUuanNcIjtcbi8vIFdlIGluamVjdCB0aGUgbmV4dENvbmZpZ091dHB1dCBoZXJlIHNvIHRoYXQgd2UgY2FuIHVzZSB0aGVtIGluIHRoZSByb3V0ZVxuLy8gbW9kdWxlLlxuY29uc3QgbmV4dENvbmZpZ091dHB1dCA9IFwiXCJcbmNvbnN0IHJvdXRlTW9kdWxlID0gbmV3IEFwcFJvdXRlUm91dGVNb2R1bGUoe1xuICAgIGRlZmluaXRpb246IHtcbiAgICAgICAga2luZDogUm91dGVLaW5kLkFQUF9ST1VURSxcbiAgICAgICAgcGFnZTogXCIvYXBpL25vdGlmaWNhdGlvbnMvY291bnQvcm91dGVcIixcbiAgICAgICAgcGF0aG5hbWU6IFwiL2FwaS9ub3RpZmljYXRpb25zL2NvdW50XCIsXG4gICAgICAgIGZpbGVuYW1lOiBcInJvdXRlXCIsXG4gICAgICAgIGJ1bmRsZVBhdGg6IFwiYXBwL2FwaS9ub3RpZmljYXRpb25zL2NvdW50L3JvdXRlXCJcbiAgICB9LFxuICAgIHJlc29sdmVkUGFnZVBhdGg6IFwiQzpcXFxcVXNlcnNcXFxcYmFjemVcXFxcUHJvamVjdFxcXFxHcm91cFNoYXJlXFxcXGdyb3Vwc2hhcmUtcHJvamVjdFxcXFxzcmNcXFxcYXBwXFxcXGFwaVxcXFxub3RpZmljYXRpb25zXFxcXGNvdW50XFxcXHJvdXRlLmpzXCIsXG4gICAgbmV4dENvbmZpZ091dHB1dCxcbiAgICB1c2VybGFuZFxufSk7XG4vLyBQdWxsIG91dCB0aGUgZXhwb3J0cyB0aGF0IHdlIG5lZWQgdG8gZXhwb3NlIGZyb20gdGhlIG1vZHVsZS4gVGhpcyBzaG91bGRcbi8vIGJlIGVsaW1pbmF0ZWQgd2hlbiB3ZSd2ZSBtb3ZlZCB0aGUgb3RoZXIgcm91dGVzIHRvIHRoZSBuZXcgZm9ybWF0LiBUaGVzZVxuLy8gYXJlIHVzZWQgdG8gaG9vayBpbnRvIHRoZSByb3V0ZS5cbmNvbnN0IHsgcmVxdWVzdEFzeW5jU3RvcmFnZSwgc3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZSwgc2VydmVySG9va3MgfSA9IHJvdXRlTW9kdWxlO1xuY29uc3Qgb3JpZ2luYWxQYXRobmFtZSA9IFwiL2FwaS9ub3RpZmljYXRpb25zL2NvdW50L3JvdXRlXCI7XG5mdW5jdGlvbiBwYXRjaEZldGNoKCkge1xuICAgIHJldHVybiBfcGF0Y2hGZXRjaCh7XG4gICAgICAgIHNlcnZlckhvb2tzLFxuICAgICAgICBzdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlXG4gICAgfSk7XG59XG5leHBvcnQgeyByb3V0ZU1vZHVsZSwgcmVxdWVzdEFzeW5jU3RvcmFnZSwgc3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZSwgc2VydmVySG9va3MsIG9yaWdpbmFsUGF0aG5hbWUsIHBhdGNoRmV0Y2gsICB9O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1hcHAtcm91dGUuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fnotifications%2Fcount%2Froute&page=%2Fapi%2Fnotifications%2Fcount%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fnotifications%2Fcount%2Froute.js&appDir=C%3A%5CUsers%5Cbacze%5CProject%5CGroupShare%5Cgroupshare-project%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5Cbacze%5CProject%5CGroupShare%5Cgroupshare-project&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./src/app/api/notifications/count/route.js":
/*!**************************************************!*\
  !*** ./src/app/api/notifications/count/route.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GET: () => (/* binding */ GET),\n/* harmony export */   dynamic: () => (/* binding */ dynamic)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* harmony import */ var _clerk_nextjs_server__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @clerk/nextjs/server */ \"(rsc)/./node_modules/@clerk/nextjs/dist/esm/app-router/server/currentUser.js\");\n/* harmony import */ var _lib_database_supabase_admin_client__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/database/supabase-admin-client */ \"(rsc)/./src/lib/database/supabase-admin-client.js\");\n/* harmony import */ var _services_notification_notification_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/services/notification/notification-service */ \"(rsc)/./src/services/notification/notification-service.js\");\n// src/app/api/notifications/count/route.js\n\n\n\n\nconst dynamic = \"force-dynamic\";\n/**\r\n * GET /api/notifications/count\r\n * Pobiera liczbę nieprzeczytanych powiadomień dla zalogowanego użytkownika\r\n */ async function GET(request) {\n    try {\n        // Sprawdź autentykację\n        const user = await (0,_clerk_nextjs_server__WEBPACK_IMPORTED_MODULE_3__.currentUser)();\n        if (!user) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: \"Unauthorized\"\n            }, {\n                status: 401\n            });\n        }\n        // Pobierz ID profilu użytkownika\n        const { data: userProfile } = await _lib_database_supabase_admin_client__WEBPACK_IMPORTED_MODULE_1__[\"default\"].from(\"user_profiles\").select(\"id\").eq(\"external_auth_id\", user.id).single();\n        if (!userProfile) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: \"User profile not found\"\n            }, {\n                status: 404\n            });\n        }\n        // Pobierz liczbę nieprzeczytanych powiadomień\n        const count = await _services_notification_notification_service__WEBPACK_IMPORTED_MODULE_2__.notificationService.getUnreadCount(userProfile.id);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            count\n        });\n    } catch (error) {\n        console.error(\"Error fetching notification count:\", error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: \"Failed to fetch notification count\",\n            details: error.message\n        }, {\n            status: 500\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvYXBwL2FwaS9ub3RpZmljYXRpb25zL2NvdW50L3JvdXRlLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBLDJDQUEyQztBQUNBO0FBQ1E7QUFDYztBQUNrQjtBQUU1RSxNQUFNSSxVQUFVLGdCQUFnQjtBQUV2Qzs7O0NBR0MsR0FDTSxlQUFlQyxJQUFJQyxPQUFPO0lBQy9CLElBQUk7UUFDRix1QkFBdUI7UUFDdkIsTUFBTUMsT0FBTyxNQUFNTixpRUFBV0E7UUFDOUIsSUFBSSxDQUFDTSxNQUFNO1lBQ1QsT0FBT1AscURBQVlBLENBQUNRLElBQUksQ0FBQztnQkFBRUMsT0FBTztZQUFlLEdBQUc7Z0JBQUVDLFFBQVE7WUFBSTtRQUNwRTtRQUVBLGlDQUFpQztRQUNqQyxNQUFNLEVBQUVDLE1BQU1DLFdBQVcsRUFBRSxHQUFHLE1BQU1WLDJFQUFhQSxDQUM5Q1csSUFBSSxDQUFDLGlCQUNMQyxNQUFNLENBQUMsTUFDUEMsRUFBRSxDQUFDLG9CQUFvQlIsS0FBS1MsRUFBRSxFQUM5QkMsTUFBTTtRQUVULElBQUksQ0FBQ0wsYUFBYTtZQUNoQixPQUFPWixxREFBWUEsQ0FBQ1EsSUFBSSxDQUFDO2dCQUFFQyxPQUFPO1lBQXlCLEdBQUc7Z0JBQUVDLFFBQVE7WUFBSTtRQUM5RTtRQUVBLDhDQUE4QztRQUM5QyxNQUFNUSxRQUFRLE1BQU1mLDRGQUFtQkEsQ0FBQ2dCLGNBQWMsQ0FBQ1AsWUFBWUksRUFBRTtRQUVyRSxPQUFPaEIscURBQVlBLENBQUNRLElBQUksQ0FBQztZQUFFVTtRQUFNO0lBQ25DLEVBQUUsT0FBT1QsT0FBTztRQUNkVyxRQUFRWCxLQUFLLENBQUMsc0NBQXNDQTtRQUNwRCxPQUFPVCxxREFBWUEsQ0FBQ1EsSUFBSSxDQUN0QjtZQUFFQyxPQUFPO1lBQXNDWSxTQUFTWixNQUFNYSxPQUFPO1FBQUMsR0FDdEU7WUFBRVosUUFBUTtRQUFJO0lBRWxCO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ncm91cHNoYXJlLXByb2plY3QvLi9zcmMvYXBwL2FwaS9ub3RpZmljYXRpb25zL2NvdW50L3JvdXRlLmpzP2IyYmEiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gc3JjL2FwcC9hcGkvbm90aWZpY2F0aW9ucy9jb3VudC9yb3V0ZS5qc1xyXG5pbXBvcnQgeyBOZXh0UmVzcG9uc2UgfSBmcm9tICduZXh0L3NlcnZlcic7XHJcbmltcG9ydCB7IGN1cnJlbnRVc2VyIH0gZnJvbSAnQGNsZXJrL25leHRqcy9zZXJ2ZXInO1xyXG5pbXBvcnQgc3VwYWJhc2VBZG1pbiBmcm9tICdAL2xpYi9kYXRhYmFzZS9zdXBhYmFzZS1hZG1pbi1jbGllbnQnO1xyXG5pbXBvcnQgeyBub3RpZmljYXRpb25TZXJ2aWNlIH0gZnJvbSAnQC9zZXJ2aWNlcy9ub3RpZmljYXRpb24vbm90aWZpY2F0aW9uLXNlcnZpY2UnO1xyXG5cclxuZXhwb3J0IGNvbnN0IGR5bmFtaWMgPSAnZm9yY2UtZHluYW1pYyc7XHJcblxyXG4vKipcclxuICogR0VUIC9hcGkvbm90aWZpY2F0aW9ucy9jb3VudFxyXG4gKiBQb2JpZXJhIGxpY3pixJkgbmllcHJ6ZWN6eXRhbnljaCBwb3dpYWRvbWllxYQgZGxhIHphbG9nb3dhbmVnbyB1xbx5dGtvd25pa2FcclxuICovXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBHRVQocmVxdWVzdCkge1xyXG4gIHRyeSB7XHJcbiAgICAvLyBTcHJhd2TFuiBhdXRlbnR5a2FjasSZXHJcbiAgICBjb25zdCB1c2VyID0gYXdhaXQgY3VycmVudFVzZXIoKTtcclxuICAgIGlmICghdXNlcikge1xyXG4gICAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oeyBlcnJvcjogJ1VuYXV0aG9yaXplZCcgfSwgeyBzdGF0dXM6IDQwMSB9KTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBQb2JpZXJ6IElEIHByb2ZpbHUgdcW8eXRrb3duaWthXHJcbiAgICBjb25zdCB7IGRhdGE6IHVzZXJQcm9maWxlIH0gPSBhd2FpdCBzdXBhYmFzZUFkbWluXHJcbiAgICAgIC5mcm9tKCd1c2VyX3Byb2ZpbGVzJylcclxuICAgICAgLnNlbGVjdCgnaWQnKVxyXG4gICAgICAuZXEoJ2V4dGVybmFsX2F1dGhfaWQnLCB1c2VyLmlkKVxyXG4gICAgICAuc2luZ2xlKCk7XHJcblxyXG4gICAgaWYgKCF1c2VyUHJvZmlsZSkge1xyXG4gICAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oeyBlcnJvcjogJ1VzZXIgcHJvZmlsZSBub3QgZm91bmQnIH0sIHsgc3RhdHVzOiA0MDQgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gUG9iaWVyeiBsaWN6YsSZIG5pZXByemVjenl0YW55Y2ggcG93aWFkb21pZcWEXHJcbiAgICBjb25zdCBjb3VudCA9IGF3YWl0IG5vdGlmaWNhdGlvblNlcnZpY2UuZ2V0VW5yZWFkQ291bnQodXNlclByb2ZpbGUuaWQpO1xyXG5cclxuICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbih7IGNvdW50IH0pO1xyXG4gIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICBjb25zb2xlLmVycm9yKCdFcnJvciBmZXRjaGluZyBub3RpZmljYXRpb24gY291bnQ6JywgZXJyb3IpO1xyXG4gICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKFxyXG4gICAgICB7IGVycm9yOiAnRmFpbGVkIHRvIGZldGNoIG5vdGlmaWNhdGlvbiBjb3VudCcsIGRldGFpbHM6IGVycm9yLm1lc3NhZ2UgfSxcclxuICAgICAgeyBzdGF0dXM6IDUwMCB9XHJcbiAgICApO1xyXG4gIH1cclxufSJdLCJuYW1lcyI6WyJOZXh0UmVzcG9uc2UiLCJjdXJyZW50VXNlciIsInN1cGFiYXNlQWRtaW4iLCJub3RpZmljYXRpb25TZXJ2aWNlIiwiZHluYW1pYyIsIkdFVCIsInJlcXVlc3QiLCJ1c2VyIiwianNvbiIsImVycm9yIiwic3RhdHVzIiwiZGF0YSIsInVzZXJQcm9maWxlIiwiZnJvbSIsInNlbGVjdCIsImVxIiwiaWQiLCJzaW5nbGUiLCJjb3VudCIsImdldFVucmVhZENvdW50IiwiY29uc29sZSIsImRldGFpbHMiLCJtZXNzYWdlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./src/app/api/notifications/count/route.js\n");

/***/ }),

/***/ "(rsc)/./src/lib/database/supabase-admin-client.js":
/*!***************************************************!*\
  !*** ./src/lib/database/supabase-admin-client.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createNotification: () => (/* binding */ createNotification),\n/* harmony export */   createUserProfileAdmin: () => (/* binding */ createUserProfileAdmin),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   getGroupMembersAdmin: () => (/* binding */ getGroupMembersAdmin),\n/* harmony export */   getSubscriptionPlatformsAdmin: () => (/* binding */ getSubscriptionPlatformsAdmin),\n/* harmony export */   getUnreadNotificationsCount: () => (/* binding */ getUnreadNotificationsCount),\n/* harmony export */   getUserByAuthIdAdmin: () => (/* binding */ getUserByAuthIdAdmin),\n/* harmony export */   handleSupabaseAdminError: () => (/* binding */ handleSupabaseAdminError),\n/* harmony export */   logAdminActivity: () => (/* binding */ logAdminActivity),\n/* harmony export */   updateUserProfileAdmin: () => (/* binding */ updateUserProfileAdmin)\n/* harmony export */ });\n/* harmony import */ var _supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @supabase/supabase-js */ \"(rsc)/./node_modules/@supabase/supabase-js/dist/module/index.js\");\n// src/lib/database/supabase-admin-client.js\n\n// Inicjalizacja klienta Supabase z uprawnieniami administratora\n// Dodajemy wartości domyślne w przypadku braku zmiennych środowiskowych\nconst supabaseUrl = \"https://nimrnohkesysfppcmujb.supabase.co\" || 0;\nconst supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY || \"\";\n// Sprawdzenie czy zmienne środowiskowe są ustawione\nif (!supabaseUrl || !supabaseServiceKey) {\n    console.error(\"Missing environment variables: NEXT_PUBLIC_SUPABASE_URL or SUPABASE_SERVICE_ROLE_KEY\");\n}\n// Sprawdź, czy zmienne są poprawne przed utworzeniem klienta\nconst isConfigValid = supabaseUrl && supabaseServiceKey;\n// Uwaga: Ten klient ma pełne uprawnienia do bazy danych, używaj ostrożnie!\nconst supabaseAdmin = isConfigValid ? (0,_supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__.createClient)(supabaseUrl, supabaseServiceKey, {\n    auth: {\n        persistSession: false,\n        autoRefreshToken: false\n    }\n}) : null;\n// Funkcja pomocnicza do obsługi błędów Supabase\nconst handleSupabaseAdminError = (error)=>{\n    console.error(\"Supabase Admin error:\", error);\n    return {\n        error: true,\n        message: error.message || \"Nieoczekiwany błąd administratora\",\n        code: error.code || \"unknown_error\",\n        details: error.details || null\n    };\n};\n// Funkcje administratora do zarządzania użytkownikami\n// Funkcja do tworzenia profilu użytkownika przez administratora\nconst createUserProfileAdmin = async (userProfile)=>{\n    try {\n        // Sprawdź czy klient jest dostępny\n        if (!supabaseAdmin) {\n            throw new Error(\"Database client is not initialized. Check environment variables.\");\n        }\n        const { data, error } = await supabaseAdmin.from(\"user_profiles\").insert([\n            userProfile\n        ]).select().single();\n        if (error) {\n            if (error.code === \"23505\") {\n                console.warn(\"Admin: Pr\\xf3ba utworzenia duplikatu profilu użytkownika:\", error);\n                // Jeśli profil już istnieje, pobierz go\n                const { data: existingUser, error: fetchError } = await supabaseAdmin.from(\"user_profiles\").select(\"*\").eq(\"external_auth_id\", userProfile.external_auth_id).single();\n                if (fetchError) {\n                    throw new Error(\"Nie można pobrać istniejącego profilu: \" + fetchError.message);\n                }\n                return existingUser;\n            } else {\n                throw new Error(error.message || \"Nie udało się utworzyć profilu użytkownika\");\n            }\n        }\n        return data;\n    } catch (error) {\n        handleSupabaseAdminError(error);\n        throw error;\n    }\n};\n// Funkcja do pobierania profilu użytkownika przez administratora\nconst getUserByAuthIdAdmin = async (authId)=>{\n    if (!authId) return null;\n    try {\n        // Sprawdź czy klient jest dostępny\n        if (!supabaseAdmin) {\n            throw new Error(\"Database client is not initialized. Check environment variables.\");\n        }\n        const { data, error } = await supabaseAdmin.from(\"user_profiles\").select(\"*\").eq(\"external_auth_id\", authId).single();\n        if (error) {\n            if (error.code === \"PGRST116\") {\n                // Nie znaleziono - to normalny przypadek\n                return null;\n            } else {\n                console.error(\"Admin: Błąd pobierania profilu użytkownika:\", error);\n                throw new Error(error.message || \"Nie udało się pobrać profilu użytkownika\");\n            }\n        }\n        return data;\n    } catch (error) {\n        handleSupabaseAdminError(error);\n        throw error;\n    }\n};\n// Funkcja do aktualizacji profilu użytkownika przez administratora\nconst updateUserProfileAdmin = async (userId, updates)=>{\n    try {\n        // Sprawdź czy klient jest dostępny\n        if (!supabaseAdmin) {\n            throw new Error(\"Database client is not initialized. Check environment variables.\");\n        }\n        const { data, error } = await supabaseAdmin.from(\"user_profiles\").update(updates).eq(\"id\", userId).select().single();\n        if (error) throw error;\n        return data;\n    } catch (error) {\n        handleSupabaseAdminError(error);\n        throw error;\n    }\n};\n// Funkcja do pobierania platform subskrypcyjnych przez administratora\nconst getSubscriptionPlatformsAdmin = async ()=>{\n    try {\n        // Sprawdź czy klient jest dostępny\n        if (!supabaseAdmin) {\n            throw new Error(\"Database client is not initialized. Check environment variables.\");\n        }\n        const { data, error } = await supabaseAdmin.from(\"subscription_platforms\").select(\"*\").order(\"name\");\n        if (error) throw error;\n        return data;\n    } catch (error) {\n        handleSupabaseAdminError(error);\n        return [];\n    }\n};\n// Funkcja do pobierania członków grupy przez administratora\nconst getGroupMembersAdmin = async (groupId)=>{\n    try {\n        // Sprawdź czy klient jest dostępny\n        if (!supabaseAdmin) {\n            throw new Error(\"Database client is not initialized. Check environment variables.\");\n        }\n        const { data, error } = await supabaseAdmin.from(\"group_members\").select(`\r\n        *,\r\n        user:user_profiles(id, display_name, avatar_url, email)\r\n      `).eq(\"group_id\", groupId);\n        if (error) throw error;\n        return data;\n    } catch (error) {\n        handleSupabaseAdminError(error);\n        return [];\n    }\n};\n// Zapisz wszystkie aktywności administratora do logu bezpieczeństwa\nconst logAdminActivity = async (action, resourceType, resourceId, details = {})=>{\n    try {\n        // Sprawdź czy klient jest dostępny\n        if (!supabaseAdmin) {\n            console.error(\"Database client is not initialized. Could not log activity.\");\n            return;\n        }\n        const { data, error } = await supabaseAdmin.from(\"security_logs\").insert([\n            {\n                action_type: action,\n                resource_type: resourceType,\n                resource_id: resourceId,\n                status: \"success\",\n                details: details\n            }\n        ]);\n        if (error) console.error(\"Błąd logowania aktywności administratora:\", error);\n    } catch (error) {\n        console.error(\"Wyjątek podczas logowania aktywności administratora:\", error);\n    }\n};\n// Funkcja do zarządzania powiadomieniami użytkowników\nconst createNotification = async (userId, type, title, content, relatedEntityType = null, relatedEntityId = null)=>{\n    try {\n        // Sprawdź czy klient jest dostępny\n        if (!supabaseAdmin) {\n            throw new Error(\"Database client is not initialized. Check environment variables.\");\n        }\n        const { data, error } = await supabaseAdmin.from(\"notifications\").insert([\n            {\n                user_id: userId,\n                type,\n                title,\n                content,\n                related_entity_type: relatedEntityType,\n                related_entity_id: relatedEntityId,\n                is_read: false,\n                created_at: new Date().toISOString(),\n                updated_at: new Date().toISOString()\n            }\n        ]).select().single();\n        if (error) throw error;\n        return data;\n    } catch (error) {\n        handleSupabaseAdminError(error);\n        throw error;\n    }\n};\n// Funkcja do pobierania nieprzeczytanych powiadomień użytkownika\nconst getUnreadNotificationsCount = async (userId)=>{\n    try {\n        // Sprawdź czy klient jest dostępny\n        if (!supabaseAdmin) {\n            throw new Error(\"Database client is not initialized. Check environment variables.\");\n        }\n        const { count, error } = await supabaseAdmin.from(\"notifications\").select(\"*\", {\n            count: \"exact\",\n            head: true\n        }).eq(\"user_id\", userId).eq(\"is_read\", false);\n        if (error) throw error;\n        return count || 0;\n    } catch (error) {\n        handleSupabaseAdminError(error);\n        return 0;\n    }\n};\n// Sprawdź czy klient jest poprawnie skonfigurowany\nif (!supabaseAdmin) {\n    console.error(\"UWAGA: Klient supabaseAdmin nie został zainicjalizowany poprawnie. Upewnij się, że zmienne środowiskowe są ustawione.\");\n}\n// Eksport klienta administratora jako domyślny\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (supabaseAdmin);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/database/supabase-admin-client.js\n");

/***/ }),

/***/ "(rsc)/./src/services/notification/notification-service.js":
/*!***********************************************************!*\
  !*** ./src/services/notification/notification-service.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   notificationService: () => (/* binding */ notificationService)\n/* harmony export */ });\n/* harmony import */ var _lib_database_supabase_admin_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/lib/database/supabase-admin-client */ \"(rsc)/./src/lib/database/supabase-admin-client.js\");\n// src/services/notification/notification-service.js\n\nclass NotificationService {\n    /**\r\n   * Creates a new notification with duplication check\r\n   * @param {string} userId - ID of the user to notify\r\n   * @param {string} type - Type of notification (invite, message, purchase, dispute)\r\n   * @param {string} title - Title of the notification\r\n   * @param {string} content - Content of the notification\r\n   * @param {string} relatedEntityType - Type of related entity (optional)\r\n   * @param {string} relatedEntityId - ID of related entity (optional)\r\n   * @param {string} priority - Priority (high, normal, low) (optional)\r\n   * @param {number} ttl - Time to live in days (0 = no expiration) (optional)\r\n   * @param {boolean} skipDuplicateCheck - Whether to skip duplicate check (optional)\r\n   * @returns {Promise<Object>} Created notification\r\n   */ async createNotification(userId, type, title, content, relatedEntityType = null, relatedEntityId = null, priority = \"normal\", ttl = 0, skipDuplicateCheck = false) {\n        try {\n            // Verify user exists\n            if (!userId || !await this.verifyUserExists(userId)) {\n                console.warn(`User ${userId} does not exist. Skipping notification.`);\n                return null;\n            }\n            // Verify entity exists if entityId and entityType are provided\n            if (relatedEntityId && relatedEntityType && !skipDuplicateCheck) {\n                const entityExists = await this.verifyEntityExists(relatedEntityType, relatedEntityId);\n                if (!entityExists) {\n                    console.warn(`Entity ${relatedEntityType}:${relatedEntityId} does not exist. Skipping notification.`);\n                    return null;\n                }\n            }\n            // Check for similar recent notifications to avoid duplication\n            if (!skipDuplicateCheck && relatedEntityType && relatedEntityId) {\n                const hasDuplicate = await this.checkForDuplicateNotification(userId, type, relatedEntityType, relatedEntityId);\n                if (hasDuplicate) {\n                    console.log(`Skipping duplicate notification: ${type} for ${relatedEntityType}:${relatedEntityId}`);\n                    return null;\n                }\n            }\n            const notification = {\n                user_id: userId,\n                type,\n                title,\n                content,\n                related_entity_type: relatedEntityType,\n                related_entity_id: relatedEntityId,\n                priority,\n                is_read: false,\n                created_at: new Date().toISOString()\n            };\n            // Try insertion with retry logic for important notifications\n            let retryCount = 0;\n            const maxRetries = priority === \"high\" ? 3 : 1;\n            while(retryCount <= maxRetries){\n                try {\n                    const { data, error } = await _lib_database_supabase_admin_client__WEBPACK_IMPORTED_MODULE_0__[\"default\"].from(\"notifications\").insert(notification).select().single();\n                    if (error) throw error;\n                    return data;\n                } catch (insertError) {\n                    retryCount++;\n                    console.warn(`Notification insertion failed (attempt ${retryCount}/${maxRetries + 1}):`, insertError);\n                    if (retryCount <= maxRetries) {\n                        // Exponential backoff\n                        await new Promise((r)=>setTimeout(r, Math.pow(2, retryCount) * 100));\n                    } else {\n                        throw insertError;\n                    }\n                }\n            }\n        } catch (error) {\n            console.error(\"Error creating notification:\", error);\n            // Don't throw - fail silently for notifications\n            return null;\n        }\n    }\n    /**\r\n   * Verify if a user exists\r\n   * @param {string} userId - User ID\r\n   * @returns {Promise<boolean>} Whether the user exists\r\n   */ async verifyUserExists(userId) {\n        try {\n            const { count, error } = await _lib_database_supabase_admin_client__WEBPACK_IMPORTED_MODULE_0__[\"default\"].from(\"user_profiles\").select(\"id\", {\n                count: \"exact\",\n                head: true\n            }).eq(\"id\", userId);\n            if (error) throw error;\n            return count > 0;\n        } catch (error) {\n            console.error(`Error verifying user ${userId}:`, error);\n            // Assume user exists if verification fails to ensure notification delivery\n            return true;\n        }\n    }\n    /**\r\n   * Create consolidated notifications for a transaction\r\n   * Sends notifications to all involved parties (buyer, seller)\r\n   * \r\n   * @param {Object} options - Transaction notification options\r\n   * @param {string} options.transactionId - Transaction ID\r\n   * @param {string} options.purchaseId - Purchase ID\r\n   * @param {string} options.status - Transaction status\r\n   * @param {boolean} options.sendToSeller - Whether to send notification to seller\r\n   * @returns {Promise<Object[]>} Created notifications\r\n   */ async createTransactionNotification({ transactionId, purchaseId, status = \"completed\", sendToSeller = true }) {\n        try {\n            // Get complete transaction details with related entities\n            const { data: transaction1, error: transactionError } = await _lib_database_supabase_admin_client__WEBPACK_IMPORTED_MODULE_0__[\"default\"].from(\"transactions\").select(`\r\n          *,\r\n          buyer:buyer_id(id, display_name),\r\n          seller:seller_id(id, display_name),\r\n          purchase:purchase_records!purchase_record_id(\r\n            group_sub_id,\r\n            group_sub:group_subs(\r\n              subscription_platforms(name)\r\n            )\r\n          )\r\n        `).eq(\"id\", transactionId).single();\n            if (transactionError || !transaction1) {\n                console.error(\"Error fetching transaction for notification:\", transactionError);\n                return [];\n            }\n            const result = [];\n            const platformName = transaction1.purchase?.group_sub?.subscription_platforms?.name || \"subskrypcji\";\n            // 1. Notification for buyer\n            if (transaction1.buyer_id) {\n                let buyerType, buyerTitle, buyerContent, buyerPriority;\n                if (status === \"completed\") {\n                    buyerType = \"purchase_completed\";\n                    buyerTitle = `Zakup ${platformName} zakończony pomyślnie`;\n                    buyerContent = `Twój zakup subskrypcji ${platformName} został pomyślnie zrealizowany. Możesz teraz uzyskać dostęp do instrukcji.`;\n                    buyerPriority = \"normal\";\n                } else if (status === \"failed\") {\n                    buyerType = \"purchase_failed\";\n                    buyerTitle = `Problem z zakupem ${platformName}`;\n                    buyerContent = `Wystąpił problem z Twoim zakupem subskrypcji ${platformName}. Sprawdź szczegóły płatności.`;\n                    buyerPriority = \"high\";\n                } else {\n                    buyerType = \"purchase_update\";\n                    buyerTitle = `Aktualizacja zakupu ${platformName}`;\n                    buyerContent = `Status Twojego zakupu subskrypcji ${platformName} został zaktualizowany.`;\n                    buyerPriority = \"normal\";\n                }\n                const buyerNotification = await this.createNotification(transaction1.buyer_id, buyerType, buyerTitle, buyerContent, \"transaction\", transactionId, buyerPriority, 0, true // Skip duplicate check\n                );\n                if (buyerNotification) {\n                    result.push(buyerNotification);\n                }\n            }\n            // 2. Notification for seller (if enabled)\n            if (sendToSeller && transaction1.seller_id && status === \"completed\") {\n                const sellerNotification = await this.createNotification(transaction1.seller_id, \"sale_completed\", \"Sprzedaż zakończona pomyślnie\", `Użytkownik ${transaction1.buyer?.display_name || \"Ktoś\"} właśnie kupił miejsce w Twojej subskrypcji ${platformName}.`, \"transaction\", transactionId, \"normal\", 0, true // Skip duplicate check\n                );\n                if (sellerNotification) {\n                    result.push(sellerNotification);\n                }\n            }\n            return result;\n        } catch (error) {\n            console.error(\"Error creating transaction notifications:\", error);\n            // Fall back to basic notification\n            const buyerNotification = await this.createNotification(transaction?.buyer_id, \"purchase_update\", \"Aktualizacja zakupu\", \"Tw\\xf3j zakup został zaktualizowany.\", \"purchase_record\", purchaseId);\n            return buyerNotification ? [\n                buyerNotification\n            ] : [];\n        }\n    }\n    /**\r\n   * Create consolidated notifications for a dispute\r\n   * Sends notifications to all involved parties\r\n   * \r\n   * @param {Object} options - Dispute notification options\r\n   * @param {string} options.disputeId - Dispute ID\r\n   * @param {string} options.reporterId - User ID who reported the dispute\r\n   * @param {string} options.reportedId - User ID being reported\r\n   * @param {string} options.type - Dispute type\r\n   * @returns {Promise<Object[]>} Created notifications\r\n   */ async createDisputeNotifications({ disputeId, reporterId, reportedId, type = \"access\" }) {\n        try {\n            // Get dispute details\n            const { data: dispute, error } = await _lib_database_supabase_admin_client__WEBPACK_IMPORTED_MODULE_0__[\"default\"].from(\"disputes\").select(\"*\").eq(\"id\", disputeId).single();\n            if (error || !dispute) {\n                console.error(\"Error fetching dispute for notification:\", error);\n                return [];\n            }\n            const result = [];\n            // 1. Notification for reporter\n            const reporterNotification = await this.createNotification(reporterId, \"dispute_created\", \"Zgłoszenie problemu zostało zarejestrowane\", `Twoje zgłoszenie problemu z ${type === \"access\" ? \"dostępem\" : \"usługą\"} zostało zarejestrowane. Skontaktujemy się z Tobą wkrótce.`, \"dispute\", disputeId, \"normal\", 0, true // Skip duplicate check\n            );\n            if (reporterNotification) {\n                result.push(reporterNotification);\n            }\n            // 2. Notification for reported user\n            if (reportedId) {\n                const reportedNotification = await this.createNotification(reportedId, \"dispute_filed\", \"Zgłoszono problem z Twoją ofertą\", `Kupujący zgłosił problem z ${type === \"access\" ? \"dostępem do subskrypcji\" : \"usługą\"}. Prosimy o pilną weryfikację.`, \"dispute\", disputeId, \"high\", 0, true // Skip duplicate check\n                );\n                if (reportedNotification) {\n                    result.push(reportedNotification);\n                }\n            }\n            return result;\n        } catch (error) {\n            console.error(\"Error creating dispute notifications:\", error);\n            return [];\n        }\n    }\n    /**\r\n   * Check if a similar notification already exists for this entity and user\r\n   * to prevent duplicate notifications\r\n   * @param {string} userId - User ID\r\n   * @param {string} type - Notification type\r\n   * @param {string} entityType - Entity type\r\n   * @param {string} entityId - Entity ID\r\n   * @returns {Promise<boolean>} Whether a duplicate exists\r\n   */ async checkForDuplicateNotification(userId, type, entityType, entityId) {\n        try {\n            // Check for similar notifications in the last hour\n            const oneHourAgo = new Date();\n            oneHourAgo.setHours(oneHourAgo.getHours() - 1);\n            const { count, error } = await _lib_database_supabase_admin_client__WEBPACK_IMPORTED_MODULE_0__[\"default\"].from(\"notifications\").select(\"*\", {\n                count: \"exact\",\n                head: true\n            }).eq(\"user_id\", userId).eq(\"type\", type).eq(\"related_entity_type\", entityType).eq(\"related_entity_id\", entityId).gte(\"created_at\", oneHourAgo.toISOString());\n            if (error) throw error;\n            return count > 0;\n        } catch (error) {\n            console.error(\"Error checking for duplicate notifications:\", error);\n            // If check fails, assume no duplicate to ensure notification is sent\n            return false;\n        }\n    }\n    /**\r\n   * Verify that an entity exists before sending a notification about it\r\n   * @param {string} entityType - Type of entity\r\n   * @param {string} entityId - ID of entity\r\n   * @returns {Promise<boolean>} Whether the entity exists\r\n   */ async verifyEntityExists(entityType, entityId) {\n        try {\n            let table;\n            switch(entityType){\n                case \"group\":\n                    table = \"groups\";\n                    break;\n                case \"purchase\":\n                case \"purchase_record\":\n                    table = \"purchase_records\";\n                    break;\n                case \"dispute\":\n                    table = \"disputes\";\n                    break;\n                case \"transaction\":\n                    table = \"transactions\";\n                    break;\n                case \"group_invitation\":\n                    table = \"group_invitations\";\n                    break;\n                case \"group_sub\":\n                    table = \"group_subs\";\n                    break;\n                case \"conversation\":\n                    table = \"conversations\";\n                    break;\n                default:\n                    console.warn(`Unknown entity type: ${entityType}`);\n                    return false;\n            }\n            const { count, error } = await _lib_database_supabase_admin_client__WEBPACK_IMPORTED_MODULE_0__[\"default\"].from(table).select(\"id\", {\n                count: \"exact\",\n                head: true\n            }).eq(\"id\", entityId);\n            if (error) throw error;\n            return count > 0;\n        } catch (error) {\n            console.error(`Error verifying entity ${entityType}:${entityId}:`, error);\n            // If verification fails, assume entity exists to ensure notification is sent\n            return true;\n        }\n    }\n    /**\r\n   * Create system notification for multiple recipients\r\n   * @param {string[]} userIds - Array of user IDs to notify\r\n   * @param {string} type - Notification type\r\n   * @param {string} title - Notification title\r\n   * @param {string} content - Notification content\r\n   * @param {string} relatedEntityType - Entity type\r\n   * @param {string} relatedEntityId - Entity ID\r\n   * @returns {Promise<Object[]>} Created notifications\r\n   */ async createBulkNotifications(userIds, type, title, content, relatedEntityType = null, relatedEntityId = null) {\n        if (!userIds || !Array.isArray(userIds) || userIds.length === 0) {\n            return [];\n        }\n        try {\n            // Verify entity exists\n            if (relatedEntityType && relatedEntityId) {\n                const entityExists = await this.verifyEntityExists(relatedEntityType, relatedEntityId);\n                if (!entityExists) {\n                    console.warn(`Entity ${relatedEntityType}:${relatedEntityId} does not exist. Skipping bulk notifications.`);\n                    return [];\n                }\n            }\n            // Create notification objects for each user\n            const notifications = userIds.map((userId)=>({\n                    user_id: userId,\n                    type,\n                    title,\n                    content,\n                    related_entity_type: relatedEntityType,\n                    related_entity_id: relatedEntityId,\n                    is_read: false,\n                    created_at: new Date().toISOString()\n                }));\n            const { data, error } = await _lib_database_supabase_admin_client__WEBPACK_IMPORTED_MODULE_0__[\"default\"].from(\"notifications\").insert(notifications).select();\n            if (error) throw error;\n            return data || [];\n        } catch (error) {\n            console.error(\"Error creating bulk notifications:\", error);\n            // Don't throw - fail silently for notifications\n            return [];\n        }\n    }\n    /**\r\n   * Create a transaction notification that consolidates payment/purchase info\r\n   * @param {string} userId - User ID\r\n   * @param {string} transactionId - Transaction ID\r\n   * @param {string} purchaseId - Purchase ID\r\n   * @param {string} status - Transaction status\r\n   * @returns {Promise<Object>} Created notification\r\n   */ async createTransactionNotification(userId, transactionId, purchaseId, status = \"completed\") {\n        try {\n            // Get transaction details\n            const { data: transaction1, error: transactionError } = await _lib_database_supabase_admin_client__WEBPACK_IMPORTED_MODULE_0__[\"default\"].from(\"transactions\").select(`\r\n          *,\r\n          purchase:purchase_records!purchase_record_id(\r\n            group_sub_id,\r\n            group_sub:group_subs(\r\n              subscription_platforms(name)\r\n            )\r\n          )\r\n        `).eq(\"id\", transactionId).single();\n            if (transactionError || !transaction1) {\n                console.error(\"Error fetching transaction for notification:\", transactionError);\n                return null;\n            }\n            // Determine notification content based on status\n            let title, content, type;\n            const platformName = transaction1.purchase?.group_sub?.subscription_platforms?.name || \"subskrypcji\";\n            if (status === \"completed\") {\n                type = \"purchase_completed\";\n                title = `Zakup ${platformName} zakończony pomyślnie`;\n                content = `Twój zakup subskrypcji ${platformName} został pomyślnie zrealizowany. Możesz teraz uzyskać dostęp do instrukcji.`;\n            } else if (status === \"failed\") {\n                type = \"purchase_failed\";\n                title = `Problem z zakupem ${platformName}`;\n                content = `Wystąpił problem z Twoim zakupem subskrypcji ${platformName}. Sprawdź szczegóły płatności.`;\n            } else {\n                type = \"purchase_update\";\n                title = `Aktualizacja zakupu ${platformName}`;\n                content = `Status Twojego zakupu subskrypcji ${platformName} został zaktualizowany.`;\n            }\n            // Create notification with transaction as the related entity\n            return this.createNotification(userId, type, title, content, \"transaction\", transactionId, status === \"failed\" ? \"high\" : \"normal\", 0, true // Skip duplicate check since we've already customized this\n            );\n        } catch (error) {\n            console.error(\"Error creating transaction notification:\", error);\n            // Fall back to basic notification\n            return this.createNotification(userId, \"purchase\", \"Aktualizacja zakupu\", \"Tw\\xf3j zakup został zaktualizowany.\", \"purchase_record\", purchaseId);\n        }\n    }\n    /**\r\n   * Get unread notification count for a user\r\n   * @param {string} userId - User ID\r\n   * @returns {Promise<number>} Number of unread notifications\r\n   */ async getUnreadCount(userId) {\n        try {\n            const { count, error } = await _lib_database_supabase_admin_client__WEBPACK_IMPORTED_MODULE_0__[\"default\"].from(\"notifications\").select(\"*\", {\n                count: \"exact\",\n                head: true\n            }).eq(\"user_id\", userId).eq(\"is_read\", false);\n            if (error) throw error;\n            return count || 0;\n        } catch (error) {\n            console.error(\"Error counting unread notifications:\", error);\n            return 0;\n        }\n    }\n    /**\r\n   * Mark notification as read\r\n   * @param {string|string[]} notificationIds - Notification ID or array of IDs\r\n   * @param {string} userId - User ID for verification\r\n   * @returns {Promise<boolean>} Success status\r\n   */ async markAsRead(notificationIds, userId) {\n        try {\n            // Convert single ID to array if needed\n            const ids = Array.isArray(notificationIds) ? notificationIds : [\n                notificationIds\n            ];\n            const { error } = await _lib_database_supabase_admin_client__WEBPACK_IMPORTED_MODULE_0__[\"default\"].from(\"notifications\").update({\n                is_read: true\n            }).in(\"id\", ids).eq(\"user_id\", userId);\n            if (error) throw error;\n            return true;\n        } catch (error) {\n            console.error(\"Error marking notifications as read:\", error);\n            return false;\n        }\n    }\n    /**\r\n   * Mark all notifications as read for a user\r\n   * @param {string} userId - User ID\r\n   * @returns {Promise<boolean>} Success status\r\n   */ async markAllAsRead(userId) {\n        try {\n            const { error } = await _lib_database_supabase_admin_client__WEBPACK_IMPORTED_MODULE_0__[\"default\"].from(\"notifications\").update({\n                is_read: true\n            }).eq(\"user_id\", userId).eq(\"is_read\", false);\n            if (error) throw error;\n            return true;\n        } catch (error) {\n            console.error(\"Error marking all notifications as read:\", error);\n            return false;\n        }\n    }\n    /**\r\n   * Delete a notification\r\n   * @param {string} notificationId - Notification ID\r\n   * @param {string} userId - User ID for verification\r\n   * @returns {Promise<boolean>} Success status\r\n   */ async deleteNotification(notificationId, userId) {\n        try {\n            const { error } = await _lib_database_supabase_admin_client__WEBPACK_IMPORTED_MODULE_0__[\"default\"].from(\"notifications\").delete().eq(\"id\", notificationId).eq(\"user_id\", userId);\n            if (error) throw error;\n            return true;\n        } catch (error) {\n            console.error(\"Error deleting notification:\", error);\n            return false;\n        }\n    }\n    /**\r\n   * Get user notifications with filtering and pagination\r\n   * @param {string} userId - User ID\r\n   * @param {Object} options - Filter and pagination options\r\n   * @returns {Promise<Object>} Notifications and pagination info\r\n   */ async getUserNotifications(userId, options = {}) {\n        try {\n            // Build the query\n            let query = _lib_database_supabase_admin_client__WEBPACK_IMPORTED_MODULE_0__[\"default\"].from(\"notifications\").select(\"*\", {\n                count: \"exact\"\n            }).eq(\"user_id\", userId);\n            // Apply filters\n            if (options.type) {\n                query = query.eq(\"type\", options.type);\n            }\n            if (options.read !== null && options.read !== undefined) {\n                query = query.eq(\"is_read\", options.read);\n            }\n            if (options.priority) {\n                query = query.eq(\"priority\", options.priority);\n            }\n            if (options.relatedEntityType) {\n                query = query.eq(\"related_entity_type\", options.relatedEntityType);\n            }\n            if (options.relatedEntityId) {\n                query = query.eq(\"related_entity_id\", options.relatedEntityId);\n            }\n            // Order by creation date, newest first\n            query = query.order(\"created_at\", {\n                ascending: false\n            });\n            // Apply pagination\n            const page = options.page || 1;\n            const pageSize = options.pageSize || 10;\n            const start = (page - 1) * pageSize;\n            const end = start + pageSize - 1;\n            query = query.range(start, end);\n            // Execute the query\n            const { data, error, count } = await query;\n            if (error) throw error;\n            // Calculate pagination info\n            const totalPages = Math.ceil((count || 0) / pageSize);\n            return {\n                notifications: data || [],\n                pagination: {\n                    page,\n                    pageSize,\n                    total: count || 0,\n                    totalPages\n                }\n            };\n        } catch (error) {\n            console.error(\"Exception in getUserNotifications:\", error);\n            throw new Error(`Failed to fetch notifications: ${error.message}`);\n        }\n    }\n    /**\r\n   * Get notification preferences for a user\r\n   * @param {string} userId - User ID\r\n   * @returns {Promise<Object>} Notification preferences\r\n   */ async getNotificationPreferences(userId) {\n        try {\n            const { data, error } = await _lib_database_supabase_admin_client__WEBPACK_IMPORTED_MODULE_0__[\"default\"].from(\"notification_preferences\").select(\"*\").eq(\"user_id\", userId).maybeSingle();\n            if (error) throw error;\n            // If no preferences exist, return defaults\n            if (!data) {\n                return {\n                    user_id: userId,\n                    email_enabled: true,\n                    push_enabled: false,\n                    notify_on_invite: true,\n                    notify_on_message: true,\n                    notify_on_purchase: true,\n                    notify_on_dispute: true,\n                    email_digest: \"daily\"\n                };\n            }\n            return data;\n        } catch (error) {\n            console.error(\"Error fetching notification preferences:\", error);\n            // Return defaults on error\n            return {\n                user_id: userId,\n                email_enabled: true,\n                push_enabled: false,\n                notify_on_invite: true,\n                notify_on_message: true,\n                notify_on_purchase: true,\n                notify_on_dispute: true,\n                email_digest: \"daily\"\n            };\n        }\n    }\n    /**\r\n   * Update notification preferences for a user\r\n   * @param {string} userId - User ID\r\n   * @param {Object} preferences - Updated preferences\r\n   * @returns {Promise<Object>} Updated preferences\r\n   */ async updateNotificationPreferences(userId, preferences) {\n        try {\n            // Check if preferences already exist\n            const { data: existing } = await _lib_database_supabase_admin_client__WEBPACK_IMPORTED_MODULE_0__[\"default\"].from(\"notification_preferences\").select(\"id\").eq(\"user_id\", userId).maybeSingle();\n            let result;\n            if (existing) {\n                // Update existing preferences\n                const { data, error } = await _lib_database_supabase_admin_client__WEBPACK_IMPORTED_MODULE_0__[\"default\"].from(\"notification_preferences\").update(preferences).eq(\"user_id\", userId).select().single();\n                if (error) throw error;\n                result = data;\n            } else {\n                // Create new preferences\n                const { data, error } = await _lib_database_supabase_admin_client__WEBPACK_IMPORTED_MODULE_0__[\"default\"].from(\"notification_preferences\").insert({\n                    user_id: userId,\n                    ...preferences\n                }).select().single();\n                if (error) throw error;\n                result = data;\n            }\n            return result;\n        } catch (error) {\n            console.error(\"Error updating notification preferences:\", error);\n            throw new Error(`Failed to update notification preferences: ${error.message}`);\n        }\n    }\n}\n// Create and export a singleton instance\nconst notificationService = new NotificationService();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/services/notification/notification-service.js\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/@clerk","vendor-chunks/next","vendor-chunks/@supabase","vendor-chunks/tr46","vendor-chunks/whatwg-url","vendor-chunks/webidl-conversions","vendor-chunks/tslib","vendor-chunks/cookie","vendor-chunks/map-obj","vendor-chunks/no-case","vendor-chunks/lower-case","vendor-chunks/snakecase-keys","vendor-chunks/snake-case","vendor-chunks/dot-case"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fnotifications%2Fcount%2Froute&page=%2Fapi%2Fnotifications%2Fcount%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fnotifications%2Fcount%2Froute.js&appDir=C%3A%5CUsers%5Cbacze%5CProject%5CGroupShare%5Cgroupshare-project%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5Cbacze%5CProject%5CGroupShare%5Cgroupshare-project&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();