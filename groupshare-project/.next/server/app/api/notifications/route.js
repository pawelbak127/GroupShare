"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/notifications/route";
exports.ids = ["app/api/notifications/route"];
exports.modules = {

/***/ "../../client/components/action-async-storage.external":
/*!*******************************************************************************!*\
  !*** external "next/dist/client/components/action-async-storage.external.js" ***!
  \*******************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/client/components/action-async-storage.external.js");

/***/ }),

/***/ "../../client/components/request-async-storage.external":
/*!********************************************************************************!*\
  !*** external "next/dist/client/components/request-async-storage.external.js" ***!
  \********************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/client/components/request-async-storage.external.js");

/***/ }),

/***/ "../../client/components/static-generation-async-storage.external":
/*!******************************************************************************************!*\
  !*** external "next/dist/client/components/static-generation-async-storage.external.js" ***!
  \******************************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/client/components/static-generation-async-storage.external.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "buffer":
/*!*************************!*\
  !*** external "buffer" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("buffer");

/***/ }),

/***/ "crypto":
/*!*************************!*\
  !*** external "crypto" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("crypto");

/***/ }),

/***/ "events":
/*!*************************!*\
  !*** external "events" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("events");

/***/ }),

/***/ "http":
/*!***********************!*\
  !*** external "http" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("http");

/***/ }),

/***/ "https":
/*!************************!*\
  !*** external "https" ***!
  \************************/
/***/ ((module) => {

module.exports = require("https");

/***/ }),

/***/ "net":
/*!**********************!*\
  !*** external "net" ***!
  \**********************/
/***/ ((module) => {

module.exports = require("net");

/***/ }),

/***/ "punycode":
/*!***************************!*\
  !*** external "punycode" ***!
  \***************************/
/***/ ((module) => {

module.exports = require("punycode");

/***/ }),

/***/ "stream":
/*!*************************!*\
  !*** external "stream" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("stream");

/***/ }),

/***/ "tls":
/*!**********************!*\
  !*** external "tls" ***!
  \**********************/
/***/ ((module) => {

module.exports = require("tls");

/***/ }),

/***/ "url":
/*!**********************!*\
  !*** external "url" ***!
  \**********************/
/***/ ((module) => {

module.exports = require("url");

/***/ }),

/***/ "zlib":
/*!***********************!*\
  !*** external "zlib" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("zlib");

/***/ }),

/***/ "node:async_hooks":
/*!***********************************!*\
  !*** external "node:async_hooks" ***!
  \***********************************/
/***/ ((module) => {

module.exports = require("node:async_hooks");

/***/ }),

/***/ "node:crypto":
/*!******************************!*\
  !*** external "node:crypto" ***!
  \******************************/
/***/ ((module) => {

module.exports = require("node:crypto");

/***/ }),

/***/ "node:fs":
/*!**************************!*\
  !*** external "node:fs" ***!
  \**************************/
/***/ ((module) => {

module.exports = require("node:fs");

/***/ }),

/***/ "node:path":
/*!****************************!*\
  !*** external "node:path" ***!
  \****************************/
/***/ ((module) => {

module.exports = require("node:path");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fnotifications%2Froute&page=%2Fapi%2Fnotifications%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fnotifications%2Froute.js&appDir=C%3A%5CUsers%5Cbacze%5CProject%5CGroupShare%5Cgroupshare-project%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5Cbacze%5CProject%5CGroupShare%5Cgroupshare-project&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fnotifications%2Froute&page=%2Fapi%2Fnotifications%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fnotifications%2Froute.js&appDir=C%3A%5CUsers%5Cbacze%5CProject%5CGroupShare%5Cgroupshare-project%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5Cbacze%5CProject%5CGroupShare%5Cgroupshare-project&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   originalPathname: () => (/* binding */ originalPathname),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   requestAsyncStorage: () => (/* binding */ requestAsyncStorage),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   staticGenerationAsyncStorage: () => (/* binding */ staticGenerationAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(rsc)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var C_Users_bacze_Project_GroupShare_groupshare_project_src_app_api_notifications_route_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./src/app/api/notifications/route.js */ \"(rsc)/./src/app/api/notifications/route.js\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/notifications/route\",\n        pathname: \"/api/notifications\",\n        filename: \"route\",\n        bundlePath: \"app/api/notifications/route\"\n    },\n    resolvedPagePath: \"C:\\\\Users\\\\bacze\\\\Project\\\\GroupShare\\\\groupshare-project\\\\src\\\\app\\\\api\\\\notifications\\\\route.js\",\n    nextConfigOutput,\n    userland: C_Users_bacze_Project_GroupShare_groupshare_project_src_app_api_notifications_route_js__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks } = routeModule;\nconst originalPathname = \"/api/notifications/route\";\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        serverHooks,\n        staticGenerationAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIuanM/bmFtZT1hcHAlMkZhcGklMkZub3RpZmljYXRpb25zJTJGcm91dGUmcGFnZT0lMkZhcGklMkZub3RpZmljYXRpb25zJTJGcm91dGUmYXBwUGF0aHM9JnBhZ2VQYXRoPXByaXZhdGUtbmV4dC1hcHAtZGlyJTJGYXBpJTJGbm90aWZpY2F0aW9ucyUyRnJvdXRlLmpzJmFwcERpcj1DJTNBJTVDVXNlcnMlNUNiYWN6ZSU1Q1Byb2plY3QlNUNHcm91cFNoYXJlJTVDZ3JvdXBzaGFyZS1wcm9qZWN0JTVDc3JjJTVDYXBwJnBhZ2VFeHRlbnNpb25zPXRzeCZwYWdlRXh0ZW5zaW9ucz10cyZwYWdlRXh0ZW5zaW9ucz1qc3gmcGFnZUV4dGVuc2lvbnM9anMmcm9vdERpcj1DJTNBJTVDVXNlcnMlNUNiYWN6ZSU1Q1Byb2plY3QlNUNHcm91cFNoYXJlJTVDZ3JvdXBzaGFyZS1wcm9qZWN0JmlzRGV2PXRydWUmdHNjb25maWdQYXRoPXRzY29uZmlnLmpzb24mYmFzZVBhdGg9JmFzc2V0UHJlZml4PSZuZXh0Q29uZmlnT3V0cHV0PSZwcmVmZXJyZWRSZWdpb249Jm1pZGRsZXdhcmVDb25maWc9ZTMwJTNEISIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7QUFBc0c7QUFDdkM7QUFDYztBQUNpRDtBQUM5SDtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsZ0hBQW1CO0FBQzNDO0FBQ0EsY0FBYyx5RUFBUztBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsWUFBWTtBQUNaLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxRQUFRLGlFQUFpRTtBQUN6RTtBQUNBO0FBQ0EsV0FBVyw0RUFBVztBQUN0QjtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ3VIOztBQUV2SCIsInNvdXJjZXMiOlsid2VicGFjazovL2dyb3Vwc2hhcmUtcHJvamVjdC8/NmFiYSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBcHBSb3V0ZVJvdXRlTW9kdWxlIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLW1vZHVsZXMvYXBwLXJvdXRlL21vZHVsZS5jb21waWxlZFwiO1xuaW1wb3J0IHsgUm91dGVLaW5kIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLWtpbmRcIjtcbmltcG9ydCB7IHBhdGNoRmV0Y2ggYXMgX3BhdGNoRmV0Y2ggfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9saWIvcGF0Y2gtZmV0Y2hcIjtcbmltcG9ydCAqIGFzIHVzZXJsYW5kIGZyb20gXCJDOlxcXFxVc2Vyc1xcXFxiYWN6ZVxcXFxQcm9qZWN0XFxcXEdyb3VwU2hhcmVcXFxcZ3JvdXBzaGFyZS1wcm9qZWN0XFxcXHNyY1xcXFxhcHBcXFxcYXBpXFxcXG5vdGlmaWNhdGlvbnNcXFxccm91dGUuanNcIjtcbi8vIFdlIGluamVjdCB0aGUgbmV4dENvbmZpZ091dHB1dCBoZXJlIHNvIHRoYXQgd2UgY2FuIHVzZSB0aGVtIGluIHRoZSByb3V0ZVxuLy8gbW9kdWxlLlxuY29uc3QgbmV4dENvbmZpZ091dHB1dCA9IFwiXCJcbmNvbnN0IHJvdXRlTW9kdWxlID0gbmV3IEFwcFJvdXRlUm91dGVNb2R1bGUoe1xuICAgIGRlZmluaXRpb246IHtcbiAgICAgICAga2luZDogUm91dGVLaW5kLkFQUF9ST1VURSxcbiAgICAgICAgcGFnZTogXCIvYXBpL25vdGlmaWNhdGlvbnMvcm91dGVcIixcbiAgICAgICAgcGF0aG5hbWU6IFwiL2FwaS9ub3RpZmljYXRpb25zXCIsXG4gICAgICAgIGZpbGVuYW1lOiBcInJvdXRlXCIsXG4gICAgICAgIGJ1bmRsZVBhdGg6IFwiYXBwL2FwaS9ub3RpZmljYXRpb25zL3JvdXRlXCJcbiAgICB9LFxuICAgIHJlc29sdmVkUGFnZVBhdGg6IFwiQzpcXFxcVXNlcnNcXFxcYmFjemVcXFxcUHJvamVjdFxcXFxHcm91cFNoYXJlXFxcXGdyb3Vwc2hhcmUtcHJvamVjdFxcXFxzcmNcXFxcYXBwXFxcXGFwaVxcXFxub3RpZmljYXRpb25zXFxcXHJvdXRlLmpzXCIsXG4gICAgbmV4dENvbmZpZ091dHB1dCxcbiAgICB1c2VybGFuZFxufSk7XG4vLyBQdWxsIG91dCB0aGUgZXhwb3J0cyB0aGF0IHdlIG5lZWQgdG8gZXhwb3NlIGZyb20gdGhlIG1vZHVsZS4gVGhpcyBzaG91bGRcbi8vIGJlIGVsaW1pbmF0ZWQgd2hlbiB3ZSd2ZSBtb3ZlZCB0aGUgb3RoZXIgcm91dGVzIHRvIHRoZSBuZXcgZm9ybWF0LiBUaGVzZVxuLy8gYXJlIHVzZWQgdG8gaG9vayBpbnRvIHRoZSByb3V0ZS5cbmNvbnN0IHsgcmVxdWVzdEFzeW5jU3RvcmFnZSwgc3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZSwgc2VydmVySG9va3MgfSA9IHJvdXRlTW9kdWxlO1xuY29uc3Qgb3JpZ2luYWxQYXRobmFtZSA9IFwiL2FwaS9ub3RpZmljYXRpb25zL3JvdXRlXCI7XG5mdW5jdGlvbiBwYXRjaEZldGNoKCkge1xuICAgIHJldHVybiBfcGF0Y2hGZXRjaCh7XG4gICAgICAgIHNlcnZlckhvb2tzLFxuICAgICAgICBzdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlXG4gICAgfSk7XG59XG5leHBvcnQgeyByb3V0ZU1vZHVsZSwgcmVxdWVzdEFzeW5jU3RvcmFnZSwgc3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZSwgc2VydmVySG9va3MsIG9yaWdpbmFsUGF0aG5hbWUsIHBhdGNoRmV0Y2gsICB9O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1hcHAtcm91dGUuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fnotifications%2Froute&page=%2Fapi%2Fnotifications%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fnotifications%2Froute.js&appDir=C%3A%5CUsers%5Cbacze%5CProject%5CGroupShare%5Cgroupshare-project%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5Cbacze%5CProject%5CGroupShare%5Cgroupshare-project&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./src/app/api/notifications/route.js":
/*!********************************************!*\
  !*** ./src/app/api/notifications/route.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GET: () => (/* binding */ GET),\n/* harmony export */   PATCH: () => (/* binding */ PATCH),\n/* harmony export */   dynamic: () => (/* binding */ dynamic)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* harmony import */ var _clerk_nextjs_server__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @clerk/nextjs/server */ \"(rsc)/./node_modules/@clerk/nextjs/dist/esm/app-router/server/currentUser.js\");\n/* harmony import */ var _lib_database_supabase_admin_client__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/database/supabase-admin-client */ \"(rsc)/./src/lib/database/supabase-admin-client.js\");\n/* harmony import */ var _services_notification_notification_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/services/notification/notification-service */ \"(rsc)/./src/services/notification/notification-service.js\");\n// src/app/api/notifications/route.js\n\n\n\n\nconst dynamic = \"force-dynamic\";\n/**\r\n * GET /api/notifications\r\n * Pobiera powiadomienia dla zalogowanego użytkownika\r\n */ async function GET(request) {\n    try {\n        // Sprawdź autentykację\n        const user = await (0,_clerk_nextjs_server__WEBPACK_IMPORTED_MODULE_3__.currentUser)();\n        if (!user) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: \"Unauthorized\"\n            }, {\n                status: 401\n            });\n        }\n        // Pobierz parametry zapytania\n        const { searchParams } = new URL(request.url);\n        const options = {\n            type: searchParams.get(\"type\"),\n            read: searchParams.get(\"read\") === \"true\" ? true : searchParams.get(\"read\") === \"false\" ? false : null,\n            priority: searchParams.get(\"priority\"),\n            page: parseInt(searchParams.get(\"page\") || \"1\"),\n            pageSize: parseInt(searchParams.get(\"pageSize\") || \"10\"),\n            relatedEntityType: searchParams.get(\"relatedEntityType\"),\n            relatedEntityId: searchParams.get(\"relatedEntityId\")\n        };\n        // Pobierz ID profilu użytkownika\n        const { data: userProfile } = await _lib_database_supabase_admin_client__WEBPACK_IMPORTED_MODULE_1__[\"default\"].from(\"user_profiles\").select(\"id\").eq(\"external_auth_id\", user.id).single();\n        if (!userProfile) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: \"User profile not found\"\n            }, {\n                status: 404\n            });\n        }\n        // Pobierz powiadomienia za pomocą serwisu\n        const result = await _services_notification_notification_service__WEBPACK_IMPORTED_MODULE_2__.notificationService.getUserNotifications(userProfile.id, options);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json(result);\n    } catch (error) {\n        console.error(\"Error fetching notifications:\", error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: \"Failed to fetch notifications\",\n            details: error.message\n        }, {\n            status: 500\n        });\n    }\n}\n/**\r\n * PATCH /api/notifications\r\n * Oznacza wiele powiadomień jako przeczytane\r\n */ async function PATCH(request) {\n    try {\n        // Sprawdź autentykację\n        const user = await (0,_clerk_nextjs_server__WEBPACK_IMPORTED_MODULE_3__.currentUser)();\n        if (!user) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: \"Unauthorized\"\n            }, {\n                status: 401\n            });\n        }\n        // Pobierz dane z body\n        const { ids, all = false } = await request.json();\n        // Pobierz ID profilu użytkownika\n        const { data: userProfile } = await _lib_database_supabase_admin_client__WEBPACK_IMPORTED_MODULE_1__[\"default\"].from(\"user_profiles\").select(\"id\").eq(\"external_auth_id\", user.id).single();\n        if (!userProfile) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: \"User profile not found\"\n            }, {\n                status: 404\n            });\n        }\n        let success;\n        if (all) {\n            // Oznacz wszystkie jako przeczytane\n            success = await _services_notification_notification_service__WEBPACK_IMPORTED_MODULE_2__.notificationService.markAllAsRead(userProfile.id);\n        } else if (ids && ids.length > 0) {\n            // Oznacz konkretne powiadomienia jako przeczytane\n            success = await _services_notification_notification_service__WEBPACK_IMPORTED_MODULE_2__.notificationService.markAsRead(ids, userProfile.id);\n        } else {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: \"Either ids array or all=true is required\"\n            }, {\n                status: 400\n            });\n        }\n        if (!success) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: \"Failed to update notifications\"\n            }, {\n                status: 500\n            });\n        }\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            success: true\n        });\n    } catch (error) {\n        console.error(\"Error updating notifications:\", error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: \"Failed to update notifications\",\n            details: error.message\n        }, {\n            status: 500\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/app/api/notifications/route.js\n");

/***/ }),

/***/ "(rsc)/./src/lib/database/supabase-admin-client.js":
/*!***************************************************!*\
  !*** ./src/lib/database/supabase-admin-client.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createNotification: () => (/* binding */ createNotification),\n/* harmony export */   createUserProfileAdmin: () => (/* binding */ createUserProfileAdmin),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   getGroupMembersAdmin: () => (/* binding */ getGroupMembersAdmin),\n/* harmony export */   getSubscriptionPlatformsAdmin: () => (/* binding */ getSubscriptionPlatformsAdmin),\n/* harmony export */   getUnreadNotificationsCount: () => (/* binding */ getUnreadNotificationsCount),\n/* harmony export */   getUserByAuthIdAdmin: () => (/* binding */ getUserByAuthIdAdmin),\n/* harmony export */   handleSupabaseAdminError: () => (/* binding */ handleSupabaseAdminError),\n/* harmony export */   logAdminActivity: () => (/* binding */ logAdminActivity),\n/* harmony export */   updateUserProfileAdmin: () => (/* binding */ updateUserProfileAdmin)\n/* harmony export */ });\n/* harmony import */ var _supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @supabase/supabase-js */ \"(rsc)/./node_modules/@supabase/supabase-js/dist/module/index.js\");\n// src/lib/database/supabase-admin-client.js\n\n// Inicjalizacja klienta Supabase z uprawnieniami administratora\n// Dodajemy wartości domyślne w przypadku braku zmiennych środowiskowych\nconst supabaseUrl = \"https://nimrnohkesysfppcmujb.supabase.co\" || 0;\nconst supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY || \"\";\n// Sprawdzenie czy zmienne środowiskowe są ustawione\nif (!supabaseUrl || !supabaseServiceKey) {\n    console.error(\"Missing environment variables: NEXT_PUBLIC_SUPABASE_URL or SUPABASE_SERVICE_ROLE_KEY\");\n}\n// Sprawdź, czy zmienne są poprawne przed utworzeniem klienta\nconst isConfigValid = supabaseUrl && supabaseServiceKey;\n// Uwaga: Ten klient ma pełne uprawnienia do bazy danych, używaj ostrożnie!\nconst supabaseAdmin = isConfigValid ? (0,_supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__.createClient)(supabaseUrl, supabaseServiceKey, {\n    auth: {\n        persistSession: false,\n        autoRefreshToken: false\n    }\n}) : null;\n// Funkcja pomocnicza do obsługi błędów Supabase\nconst handleSupabaseAdminError = (error)=>{\n    console.error(\"Supabase Admin error:\", error);\n    return {\n        error: true,\n        message: error.message || \"Nieoczekiwany błąd administratora\",\n        code: error.code || \"unknown_error\",\n        details: error.details || null\n    };\n};\n// Funkcje administratora do zarządzania użytkownikami\n// Funkcja do tworzenia profilu użytkownika przez administratora\nconst createUserProfileAdmin = async (userProfile)=>{\n    try {\n        // Sprawdź czy klient jest dostępny\n        if (!supabaseAdmin) {\n            throw new Error(\"Database client is not initialized. Check environment variables.\");\n        }\n        const { data, error } = await supabaseAdmin.from(\"user_profiles\").insert([\n            userProfile\n        ]).select().single();\n        if (error) {\n            if (error.code === \"23505\") {\n                console.warn(\"Admin: Pr\\xf3ba utworzenia duplikatu profilu użytkownika:\", error);\n                // Jeśli profil już istnieje, pobierz go\n                const { data: existingUser, error: fetchError } = await supabaseAdmin.from(\"user_profiles\").select(\"*\").eq(\"external_auth_id\", userProfile.external_auth_id).single();\n                if (fetchError) {\n                    throw new Error(\"Nie można pobrać istniejącego profilu: \" + fetchError.message);\n                }\n                return existingUser;\n            } else {\n                throw new Error(error.message || \"Nie udało się utworzyć profilu użytkownika\");\n            }\n        }\n        return data;\n    } catch (error) {\n        handleSupabaseAdminError(error);\n        throw error;\n    }\n};\n// Funkcja do pobierania profilu użytkownika przez administratora\nconst getUserByAuthIdAdmin = async (authId)=>{\n    if (!authId) return null;\n    try {\n        // Sprawdź czy klient jest dostępny\n        if (!supabaseAdmin) {\n            throw new Error(\"Database client is not initialized. Check environment variables.\");\n        }\n        const { data, error } = await supabaseAdmin.from(\"user_profiles\").select(\"*\").eq(\"external_auth_id\", authId).single();\n        if (error) {\n            if (error.code === \"PGRST116\") {\n                // Nie znaleziono - to normalny przypadek\n                return null;\n            } else {\n                console.error(\"Admin: Błąd pobierania profilu użytkownika:\", error);\n                throw new Error(error.message || \"Nie udało się pobrać profilu użytkownika\");\n            }\n        }\n        return data;\n    } catch (error) {\n        handleSupabaseAdminError(error);\n        throw error;\n    }\n};\n// Funkcja do aktualizacji profilu użytkownika przez administratora\nconst updateUserProfileAdmin = async (userId, updates)=>{\n    try {\n        // Sprawdź czy klient jest dostępny\n        if (!supabaseAdmin) {\n            throw new Error(\"Database client is not initialized. Check environment variables.\");\n        }\n        const { data, error } = await supabaseAdmin.from(\"user_profiles\").update(updates).eq(\"id\", userId).select().single();\n        if (error) throw error;\n        return data;\n    } catch (error) {\n        handleSupabaseAdminError(error);\n        throw error;\n    }\n};\n// Funkcja do pobierania platform subskrypcyjnych przez administratora\nconst getSubscriptionPlatformsAdmin = async ()=>{\n    try {\n        // Sprawdź czy klient jest dostępny\n        if (!supabaseAdmin) {\n            throw new Error(\"Database client is not initialized. Check environment variables.\");\n        }\n        const { data, error } = await supabaseAdmin.from(\"subscription_platforms\").select(\"*\").order(\"name\");\n        if (error) throw error;\n        return data;\n    } catch (error) {\n        handleSupabaseAdminError(error);\n        return [];\n    }\n};\n// Funkcja do pobierania członków grupy przez administratora\nconst getGroupMembersAdmin = async (groupId)=>{\n    try {\n        // Sprawdź czy klient jest dostępny\n        if (!supabaseAdmin) {\n            throw new Error(\"Database client is not initialized. Check environment variables.\");\n        }\n        const { data, error } = await supabaseAdmin.from(\"group_members\").select(`\r\n        *,\r\n        user:user_profiles(id, display_name, avatar_url, email)\r\n      `).eq(\"group_id\", groupId);\n        if (error) throw error;\n        return data;\n    } catch (error) {\n        handleSupabaseAdminError(error);\n        return [];\n    }\n};\n// Zapisz wszystkie aktywności administratora do logu bezpieczeństwa\nconst logAdminActivity = async (action, resourceType, resourceId, details = {})=>{\n    try {\n        // Sprawdź czy klient jest dostępny\n        if (!supabaseAdmin) {\n            console.error(\"Database client is not initialized. Could not log activity.\");\n            return;\n        }\n        const { data, error } = await supabaseAdmin.from(\"security_logs\").insert([\n            {\n                action_type: action,\n                resource_type: resourceType,\n                resource_id: resourceId,\n                status: \"success\",\n                details: details\n            }\n        ]);\n        if (error) console.error(\"Błąd logowania aktywności administratora:\", error);\n    } catch (error) {\n        console.error(\"Wyjątek podczas logowania aktywności administratora:\", error);\n    }\n};\n// Funkcja do zarządzania powiadomieniami użytkowników\nconst createNotification = async (userId, type, title, content, relatedEntityType = null, relatedEntityId = null)=>{\n    try {\n        // Sprawdź czy klient jest dostępny\n        if (!supabaseAdmin) {\n            throw new Error(\"Database client is not initialized. Check environment variables.\");\n        }\n        const { data, error } = await supabaseAdmin.from(\"notifications\").insert([\n            {\n                user_id: userId,\n                type,\n                title,\n                content,\n                related_entity_type: relatedEntityType,\n                related_entity_id: relatedEntityId,\n                is_read: false,\n                created_at: new Date().toISOString(),\n                updated_at: new Date().toISOString()\n            }\n        ]).select().single();\n        if (error) throw error;\n        return data;\n    } catch (error) {\n        handleSupabaseAdminError(error);\n        throw error;\n    }\n};\n// Funkcja do pobierania nieprzeczytanych powiadomień użytkownika\nconst getUnreadNotificationsCount = async (userId)=>{\n    try {\n        // Sprawdź czy klient jest dostępny\n        if (!supabaseAdmin) {\n            throw new Error(\"Database client is not initialized. Check environment variables.\");\n        }\n        const { count, error } = await supabaseAdmin.from(\"notifications\").select(\"*\", {\n            count: \"exact\",\n            head: true\n        }).eq(\"user_id\", userId).eq(\"is_read\", false);\n        if (error) throw error;\n        return count || 0;\n    } catch (error) {\n        handleSupabaseAdminError(error);\n        return 0;\n    }\n};\n// Sprawdź czy klient jest poprawnie skonfigurowany\nif (!supabaseAdmin) {\n    console.error(\"UWAGA: Klient supabaseAdmin nie został zainicjalizowany poprawnie. Upewnij się, że zmienne środowiskowe są ustawione.\");\n}\n// Eksport klienta administratora jako domyślny\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (supabaseAdmin);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/database/supabase-admin-client.js\n");

/***/ }),

/***/ "(rsc)/./src/services/notification/notification-service.js":
/*!***********************************************************!*\
  !*** ./src/services/notification/notification-service.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   NotificationService: () => (/* binding */ NotificationService),\n/* harmony export */   notificationService: () => (/* binding */ notificationService)\n/* harmony export */ });\n/* harmony import */ var _lib_database_supabase_admin_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/lib/database/supabase-admin-client */ \"(rsc)/./src/lib/database/supabase-admin-client.js\");\n// src/services/notification/notification-service.js\n\n/**\r\n * Serwis do zarządzania powiadomieniami użytkowników\r\n */ class NotificationService {\n    constructor(){\n        // Sprawdź czy supabaseAdmin jest dostępny przy inicjalizacji\n        if (!_lib_database_supabase_admin_client__WEBPACK_IMPORTED_MODULE_0__[\"default\"]) {\n            console.warn(\"NotificationService: supabaseAdmin is not initialized. Service functionality will be limited.\");\n        }\n    }\n    /**\r\n   * Metoda pomocnicza sprawdzająca dostępność klienta supabase\r\n   * @private\r\n   */ _checkSupabaseClient() {\n        if (!_lib_database_supabase_admin_client__WEBPACK_IMPORTED_MODULE_0__[\"default\"]) {\n            throw new Error(\"Database client is not initialized. Check server configuration.\");\n        }\n    }\n    /**\r\n   * Tworzy nowe powiadomienie\r\n   * @param {string} userId - ID użytkownika, który ma otrzymać powiadomienie\r\n   * @param {string} type - Typ powiadomienia (invite, message, purchase, dispute)\r\n   * @param {string} title - Tytuł powiadomienia\r\n   * @param {string} content - Treść powiadomienia\r\n   * @param {string} relatedEntityType - Typ powiązanego zasobu (np. group, purchase)\r\n   * @param {string} relatedEntityId - ID powiązanego zasobu\r\n   * @param {string} priority - Priorytet powiadomienia (high, normal, low)\r\n   * @param {number} ttl - Czas życia w sekundach, 0 oznacza brak wygaśnięcia\r\n   * @returns {Promise<Object>} - Utworzone powiadomienie\r\n   */ async createNotification(userId, type, title, content, relatedEntityType = null, relatedEntityId = null, priority = \"normal\", ttl = 0) {\n        try {\n            this._checkSupabaseClient();\n            // Walidacja podstawowych danych\n            if (!userId || !type || !title || !content) {\n                throw new Error(\"Missing required fields: userId, type, title and content are required\");\n            }\n            // Walidacja typu\n            const validTypes = [\n                \"invite\",\n                \"message\",\n                \"purchase\",\n                \"dispute\"\n            ];\n            if (!validTypes.includes(type)) {\n                throw new Error(`Invalid notification type. Must be one of: ${validTypes.join(\", \")}`);\n            }\n            // Walidacja priorytetu\n            const validPriorities = [\n                \"high\",\n                \"normal\",\n                \"low\"\n            ];\n            if (!validPriorities.includes(priority)) {\n                throw new Error(`Invalid priority. Must be one of: ${validPriorities.join(\", \")}`);\n            }\n            // Oblicz datę wygaśnięcia, jeśli podano TTL\n            let expiresAt = null;\n            if (ttl > 0) {\n                expiresAt = new Date();\n                expiresAt.setSeconds(expiresAt.getSeconds() + ttl);\n            }\n            const notification = {\n                user_id: userId,\n                type,\n                title,\n                content,\n                related_entity_type: relatedEntityType,\n                related_entity_id: relatedEntityId,\n                priority,\n                expires_at: expiresAt ? expiresAt.toISOString() : null,\n                created_at: new Date().toISOString(),\n                is_read: false\n            };\n            const { data, error } = await _lib_database_supabase_admin_client__WEBPACK_IMPORTED_MODULE_0__[\"default\"].from(\"notifications\").insert(notification).select().single();\n            if (error) {\n                console.error(\"Error creating notification:\", error);\n                throw new Error(`Failed to create notification: ${error.message}`);\n            }\n            return data;\n        } catch (error) {\n            console.error(\"Exception in createNotification:\", error);\n            throw error;\n        }\n    }\n    /**\r\n   * Pobiera powiadomienia użytkownika z filtrowaniem i paginacją\r\n   * @param {string} userId - ID użytkownika\r\n   * @param {Object} options - Opcje filtrowania i paginacji\r\n   * @returns {Promise<Object>} - Powiadomienia i informacje o paginacji\r\n   */ async getUserNotifications(userId, options = {}) {\n        try {\n            this._checkSupabaseClient();\n            if (!userId) {\n                throw new Error(\"User ID is required\");\n            }\n            const { type = null, read = null, priority = null, page = 1, pageSize = 10, relatedEntityType = null, relatedEntityId = null, olderThan = null, newerThan = null } = options;\n            // Oblicz paginację\n            const from = (page - 1) * pageSize;\n            const to = from + pageSize - 1;\n            // Zbuduj zapytanie\n            let query = _lib_database_supabase_admin_client__WEBPACK_IMPORTED_MODULE_0__[\"default\"].from(\"notifications\").select(\"*\", {\n                count: \"exact\"\n            }).eq(\"user_id\", userId);\n            // Zastosuj filtry\n            if (type) {\n                query = query.eq(\"type\", type);\n            }\n            if (read !== null) {\n                query = query.eq(\"is_read\", read);\n            }\n            if (priority) {\n                query = query.eq(\"priority\", priority);\n            }\n            if (relatedEntityType) {\n                query = query.eq(\"related_entity_type\", relatedEntityType);\n            }\n            if (relatedEntityId) {\n                query = query.eq(\"related_entity_id\", relatedEntityId);\n            }\n            // Filtry dat\n            if (olderThan) {\n                query = query.lt(\"created_at\", olderThan);\n            }\n            if (newerThan) {\n                query = query.gt(\"created_at\", newerThan);\n            }\n            // Wykluczanie wygasłych powiadomień\n            query = query.or(`expires_at.is.null,expires_at.gt.${new Date().toISOString()}`);\n            // Sortowanie i paginacja\n            query = query.order(\"created_at\", {\n                ascending: false\n            }).range(from, to);\n            const { data, error, count } = await query;\n            if (error) {\n                console.error(\"Error fetching notifications:\", error);\n                throw new Error(`Failed to fetch notifications: ${error.message}`);\n            }\n            return {\n                notifications: data || [],\n                pagination: {\n                    page,\n                    pageSize,\n                    total: count || 0,\n                    totalPages: count ? Math.ceil(count / pageSize) : 0\n                }\n            };\n        } catch (error) {\n            console.error(\"Exception in getUserNotifications:\", error);\n            // Zwróć domyślną strukturę w przypadku błędu, aby aplikacja mogła działać dalej\n            return {\n                notifications: [],\n                pagination: {\n                    page: options.page || 1,\n                    pageSize: options.pageSize || 10,\n                    total: 0,\n                    totalPages: 0\n                },\n                error: error.message\n            };\n        }\n    }\n    /**\r\n   * Pobiera liczbę nieprzeczytanych powiadomień dla użytkownika\r\n   * @param {string} userId - ID użytkownika\r\n   * @returns {Promise<number>} - Liczba nieprzeczytanych powiadomień\r\n   */ async getUnreadCount(userId) {\n        try {\n            this._checkSupabaseClient();\n            if (!userId) {\n                return 0;\n            }\n            const { count, error } = await _lib_database_supabase_admin_client__WEBPACK_IMPORTED_MODULE_0__[\"default\"].from(\"notifications\").select(\"*\", {\n                count: \"exact\",\n                head: true\n            }).eq(\"user_id\", userId).eq(\"is_read\", false).or(`expires_at.is.null,expires_at.gt.${new Date().toISOString()}`);\n            if (error) {\n                console.error(\"Error counting unread notifications:\", error);\n                return 0;\n            }\n            return count || 0;\n        } catch (error) {\n            console.error(\"Exception in getUnreadCount:\", error);\n            return 0;\n        }\n    }\n    /**\r\n   * Oznacza powiadomienia jako przeczytane\r\n   * @param {Array<string>} notificationIds - Tablica ID powiadomień do oznaczenia\r\n   * @param {string} userId - ID użytkownika (dla weryfikacji bezpieczeństwa)\r\n   * @returns {Promise<boolean>} - Czy operacja się powiodła\r\n   */ async markAsRead(notificationIds, userId) {\n        try {\n            this._checkSupabaseClient();\n            if (!Array.isArray(notificationIds) || notificationIds.length === 0 || !userId) {\n                return false;\n            }\n            // Aktualizuj powiadomienia, upewniając się, że należą do użytkownika\n            const { error } = await _lib_database_supabase_admin_client__WEBPACK_IMPORTED_MODULE_0__[\"default\"].from(\"notifications\").update({\n                is_read: true,\n                read_at: new Date().toISOString()\n            }).in(\"id\", notificationIds).eq(\"user_id\", userId);\n            if (error) {\n                console.error(\"Error marking notifications as read:\", error);\n                return false;\n            }\n            return true;\n        } catch (error) {\n            console.error(\"Exception in markAsRead:\", error);\n            return false;\n        }\n    }\n    /**\r\n   * Oznacza wszystkie powiadomienia użytkownika jako przeczytane\r\n   * @param {string} userId - ID użytkownika\r\n   * @returns {Promise<boolean>} - Czy operacja się powiodła\r\n   */ async markAllAsRead(userId) {\n        try {\n            this._checkSupabaseClient();\n            if (!userId) {\n                return false;\n            }\n            const { error } = await _lib_database_supabase_admin_client__WEBPACK_IMPORTED_MODULE_0__[\"default\"].from(\"notifications\").update({\n                is_read: true,\n                read_at: new Date().toISOString()\n            }).eq(\"user_id\", userId).eq(\"is_read\", false);\n            if (error) {\n                console.error(\"Error marking all notifications as read:\", error);\n                return false;\n            }\n            return true;\n        } catch (error) {\n            console.error(\"Exception in markAllAsRead:\", error);\n            return false;\n        }\n    }\n    /**\r\n   * Usuwa powiadomienie\r\n   * @param {string} notificationId - ID powiadomienia do usunięcia\r\n   * @param {string} userId - ID użytkownika (dla weryfikacji bezpieczeństwa)\r\n   * @returns {Promise<boolean>} - Czy operacja się powiodła\r\n   */ async deleteNotification(notificationId, userId) {\n        try {\n            this._checkSupabaseClient();\n            if (!notificationId || !userId) {\n                return false;\n            }\n            // Usuń powiadomienie, upewniając się, że należy do użytkownika\n            const { error } = await _lib_database_supabase_admin_client__WEBPACK_IMPORTED_MODULE_0__[\"default\"].from(\"notifications\").delete().eq(\"id\", notificationId).eq(\"user_id\", userId);\n            if (error) {\n                console.error(\"Error deleting notification:\", error);\n                return false;\n            }\n            return true;\n        } catch (error) {\n            console.error(\"Exception in deleteNotification:\", error);\n            return false;\n        }\n    }\n    /**\r\n   * Pobiera preferencje powiadomień dla użytkownika\r\n   * @param {string} userId - ID użytkownika\r\n   * @returns {Promise<Object>} - Preferencje powiadomień\r\n   */ async getNotificationPreferences(userId) {\n        try {\n            this._checkSupabaseClient();\n            if (!userId) {\n                return this.getDefaultPreferences();\n            }\n            const { data, error } = await _lib_database_supabase_admin_client__WEBPACK_IMPORTED_MODULE_0__[\"default\"].from(\"notification_preferences\").select(\"*\").eq(\"user_id\", userId).single();\n            if (error && error.code !== \"PGRST116\") {\n                console.error(\"Error fetching notification preferences:\", error);\n                return this.getDefaultPreferences();\n            }\n            // Jeśli nie znaleziono preferencji, zwróć domyślne\n            if (!data) {\n                return this.getDefaultPreferences();\n            }\n            return data;\n        } catch (error) {\n            console.error(\"Exception in getNotificationPreferences:\", error);\n            return this.getDefaultPreferences();\n        }\n    }\n    /**\r\n   * Aktualizuje preferencje powiadomień dla użytkownika\r\n   * @param {string} userId - ID użytkownika\r\n   * @param {Object} preferences - Preferencje powiadomień do aktualizacji\r\n   * @returns {Promise<Object>} - Zaktualizowane preferencje\r\n   */ async updateNotificationPreferences(userId, preferences) {\n        try {\n            this._checkSupabaseClient();\n            if (!userId) {\n                throw new Error(\"User ID is required\");\n            }\n            // Pobierz aktualne preferencje\n            const currentPrefs = await this.getNotificationPreferences(userId);\n            // Sprawdź, czy trzeba wstawić czy zaktualizować\n            const operation = currentPrefs.id ? _lib_database_supabase_admin_client__WEBPACK_IMPORTED_MODULE_0__[\"default\"].from(\"notification_preferences\").update({\n                ...preferences,\n                updated_at: new Date().toISOString()\n            }).eq(\"id\", currentPrefs.id) : _lib_database_supabase_admin_client__WEBPACK_IMPORTED_MODULE_0__[\"default\"].from(\"notification_preferences\").insert({\n                user_id: userId,\n                ...preferences,\n                created_at: new Date().toISOString(),\n                updated_at: new Date().toISOString()\n            });\n            const { data, error } = await operation.select().single();\n            if (error) {\n                console.error(\"Error updating notification preferences:\", error);\n                throw new Error(`Failed to update notification preferences: ${error.message}`);\n            }\n            return data;\n        } catch (error) {\n            console.error(\"Exception in updateNotificationPreferences:\", error);\n            throw error;\n        }\n    }\n    /**\r\n   * Pobiera domyślne preferencje powiadomień\r\n   * @returns {Object} - Domyślne preferencje\r\n   */ getDefaultPreferences() {\n        return {\n            email_notifications: true,\n            push_notifications: false,\n            notify_on_invite: true,\n            notify_on_message: true,\n            notify_on_purchase: true,\n            notify_on_dispute: true,\n            email_digest: \"daily\"\n        };\n    }\n    /**\r\n   * Grupuje powiązane powiadomienia\r\n   * @param {Array<Object>} notifications - Powiadomienia do pogrupowania\r\n   * @returns {Array<Object>} - Pogrupowane powiadomienia\r\n   */ groupNotifications(notifications) {\n        if (!notifications || notifications.length === 0) {\n            return [];\n        }\n        const groups = {};\n        // Grupuj powiadomienia według powiązanego zasobu, jeśli dostępny\n        notifications.forEach((notification)=>{\n            if (notification.related_entity_type && notification.related_entity_id) {\n                const key = `${notification.related_entity_type}_${notification.related_entity_id}`;\n                if (!groups[key]) {\n                    groups[key] = {\n                        type: notification.type,\n                        related_entity_type: notification.related_entity_type,\n                        related_entity_id: notification.related_entity_id,\n                        latest: notification,\n                        count: 1,\n                        notifications: [\n                            notification\n                        ]\n                    };\n                } else {\n                    groups[key].count++;\n                    groups[key].notifications.push(notification);\n                    // Zaktualizuj najnowsze, jeśli to powiadomienie jest nowsze\n                    if (new Date(notification.created_at) > new Date(groups[key].latest.created_at)) {\n                        groups[key].latest = notification;\n                    }\n                }\n            } else {\n                // Dla powiadomień bez powiązań utwórz unikalną grupę\n                const key = `individual_${notification.id}`;\n                groups[key] = {\n                    type: notification.type,\n                    latest: notification,\n                    count: 1,\n                    notifications: [\n                        notification\n                    ]\n                };\n            }\n        });\n        // Konwertuj na tablicę i sortuj według daty najnowszego powiadomienia\n        return Object.values(groups).sort((a, b)=>new Date(b.latest.created_at) - new Date(a.latest.created_at));\n    }\n    /**\r\n   * Czyści wygasłe powiadomienia\r\n   * @returns {Promise<number>} - Liczba usuniętych powiadomień\r\n   */ async cleanupExpiredNotifications() {\n        try {\n            this._checkSupabaseClient();\n            const now = new Date().toISOString();\n            const { data, error } = await _lib_database_supabase_admin_client__WEBPACK_IMPORTED_MODULE_0__[\"default\"].from(\"notifications\").delete().lt(\"expires_at\", now).not(\"expires_at\", \"is\", null).select(\"id\");\n            if (error) {\n                console.error(\"Error cleaning up expired notifications:\", error);\n                return 0;\n            }\n            return data ? data.length : 0;\n        } catch (error) {\n            console.error(\"Exception in cleanupExpiredNotifications:\", error);\n            return 0;\n        }\n    }\n}\n// Instancja singletona\nconst notificationService = new NotificationService();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/services/notification/notification-service.js\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/@clerk","vendor-chunks/next","vendor-chunks/@supabase","vendor-chunks/tr46","vendor-chunks/whatwg-url","vendor-chunks/webidl-conversions","vendor-chunks/tslib","vendor-chunks/cookie","vendor-chunks/map-obj","vendor-chunks/no-case","vendor-chunks/lower-case","vendor-chunks/snakecase-keys","vendor-chunks/snake-case","vendor-chunks/dot-case"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fnotifications%2Froute&page=%2Fapi%2Fnotifications%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fnotifications%2Froute.js&appDir=C%3A%5CUsers%5Cbacze%5CProject%5CGroupShare%5Cgroupshare-project%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5Cbacze%5CProject%5CGroupShare%5Cgroupshare-project&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();