"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/payments/route";
exports.ids = ["app/api/payments/route"];
exports.modules = {

/***/ "../../client/components/action-async-storage.external":
/*!*******************************************************************************!*\
  !*** external "next/dist/client/components/action-async-storage.external.js" ***!
  \*******************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/client/components/action-async-storage.external.js");

/***/ }),

/***/ "../../client/components/request-async-storage.external":
/*!********************************************************************************!*\
  !*** external "next/dist/client/components/request-async-storage.external.js" ***!
  \********************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/client/components/request-async-storage.external.js");

/***/ }),

/***/ "../../client/components/static-generation-async-storage.external":
/*!******************************************************************************************!*\
  !*** external "next/dist/client/components/static-generation-async-storage.external.js" ***!
  \******************************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/client/components/static-generation-async-storage.external.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "buffer":
/*!*************************!*\
  !*** external "buffer" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("buffer");

/***/ }),

/***/ "crypto":
/*!*************************!*\
  !*** external "crypto" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("crypto");

/***/ }),

/***/ "events":
/*!*************************!*\
  !*** external "events" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("events");

/***/ }),

/***/ "http":
/*!***********************!*\
  !*** external "http" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("http");

/***/ }),

/***/ "https":
/*!************************!*\
  !*** external "https" ***!
  \************************/
/***/ ((module) => {

module.exports = require("https");

/***/ }),

/***/ "net":
/*!**********************!*\
  !*** external "net" ***!
  \**********************/
/***/ ((module) => {

module.exports = require("net");

/***/ }),

/***/ "punycode":
/*!***************************!*\
  !*** external "punycode" ***!
  \***************************/
/***/ ((module) => {

module.exports = require("punycode");

/***/ }),

/***/ "stream":
/*!*************************!*\
  !*** external "stream" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("stream");

/***/ }),

/***/ "tls":
/*!**********************!*\
  !*** external "tls" ***!
  \**********************/
/***/ ((module) => {

module.exports = require("tls");

/***/ }),

/***/ "url":
/*!**********************!*\
  !*** external "url" ***!
  \**********************/
/***/ ((module) => {

module.exports = require("url");

/***/ }),

/***/ "zlib":
/*!***********************!*\
  !*** external "zlib" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("zlib");

/***/ }),

/***/ "node:async_hooks":
/*!***********************************!*\
  !*** external "node:async_hooks" ***!
  \***********************************/
/***/ ((module) => {

module.exports = require("node:async_hooks");

/***/ }),

/***/ "node:crypto":
/*!******************************!*\
  !*** external "node:crypto" ***!
  \******************************/
/***/ ((module) => {

module.exports = require("node:crypto");

/***/ }),

/***/ "node:fs":
/*!**************************!*\
  !*** external "node:fs" ***!
  \**************************/
/***/ ((module) => {

module.exports = require("node:fs");

/***/ }),

/***/ "node:path":
/*!****************************!*\
  !*** external "node:path" ***!
  \****************************/
/***/ ((module) => {

module.exports = require("node:path");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fpayments%2Froute&page=%2Fapi%2Fpayments%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fpayments%2Froute.js&appDir=C%3A%5CUsers%5Cbacze%5CProject%5CGroupShare%5Cgroupshare-project%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5Cbacze%5CProject%5CGroupShare%5Cgroupshare-project&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fpayments%2Froute&page=%2Fapi%2Fpayments%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fpayments%2Froute.js&appDir=C%3A%5CUsers%5Cbacze%5CProject%5CGroupShare%5Cgroupshare-project%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5Cbacze%5CProject%5CGroupShare%5Cgroupshare-project&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   originalPathname: () => (/* binding */ originalPathname),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   requestAsyncStorage: () => (/* binding */ requestAsyncStorage),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   staticGenerationAsyncStorage: () => (/* binding */ staticGenerationAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(rsc)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var C_Users_bacze_Project_GroupShare_groupshare_project_src_app_api_payments_route_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./src/app/api/payments/route.js */ \"(rsc)/./src/app/api/payments/route.js\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/payments/route\",\n        pathname: \"/api/payments\",\n        filename: \"route\",\n        bundlePath: \"app/api/payments/route\"\n    },\n    resolvedPagePath: \"C:\\\\Users\\\\bacze\\\\Project\\\\GroupShare\\\\groupshare-project\\\\src\\\\app\\\\api\\\\payments\\\\route.js\",\n    nextConfigOutput,\n    userland: C_Users_bacze_Project_GroupShare_groupshare_project_src_app_api_payments_route_js__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks } = routeModule;\nconst originalPathname = \"/api/payments/route\";\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        serverHooks,\n        staticGenerationAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIuanM/bmFtZT1hcHAlMkZhcGklMkZwYXltZW50cyUyRnJvdXRlJnBhZ2U9JTJGYXBpJTJGcGF5bWVudHMlMkZyb3V0ZSZhcHBQYXRocz0mcGFnZVBhdGg9cHJpdmF0ZS1uZXh0LWFwcC1kaXIlMkZhcGklMkZwYXltZW50cyUyRnJvdXRlLmpzJmFwcERpcj1DJTNBJTVDVXNlcnMlNUNiYWN6ZSU1Q1Byb2plY3QlNUNHcm91cFNoYXJlJTVDZ3JvdXBzaGFyZS1wcm9qZWN0JTVDc3JjJTVDYXBwJnBhZ2VFeHRlbnNpb25zPXRzeCZwYWdlRXh0ZW5zaW9ucz10cyZwYWdlRXh0ZW5zaW9ucz1qc3gmcGFnZUV4dGVuc2lvbnM9anMmcm9vdERpcj1DJTNBJTVDVXNlcnMlNUNiYWN6ZSU1Q1Byb2plY3QlNUNHcm91cFNoYXJlJTVDZ3JvdXBzaGFyZS1wcm9qZWN0JmlzRGV2PXRydWUmdHNjb25maWdQYXRoPXRzY29uZmlnLmpzb24mYmFzZVBhdGg9JmFzc2V0UHJlZml4PSZuZXh0Q29uZmlnT3V0cHV0PSZwcmVmZXJyZWRSZWdpb249Jm1pZGRsZXdhcmVDb25maWc9ZTMwJTNEISIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7QUFBc0c7QUFDdkM7QUFDYztBQUM0QztBQUN6SDtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsZ0hBQW1CO0FBQzNDO0FBQ0EsY0FBYyx5RUFBUztBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsWUFBWTtBQUNaLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxRQUFRLGlFQUFpRTtBQUN6RTtBQUNBO0FBQ0EsV0FBVyw0RUFBVztBQUN0QjtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ3VIOztBQUV2SCIsInNvdXJjZXMiOlsid2VicGFjazovL2dyb3Vwc2hhcmUtcHJvamVjdC8/ZjFhMyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBcHBSb3V0ZVJvdXRlTW9kdWxlIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLW1vZHVsZXMvYXBwLXJvdXRlL21vZHVsZS5jb21waWxlZFwiO1xuaW1wb3J0IHsgUm91dGVLaW5kIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLWtpbmRcIjtcbmltcG9ydCB7IHBhdGNoRmV0Y2ggYXMgX3BhdGNoRmV0Y2ggfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9saWIvcGF0Y2gtZmV0Y2hcIjtcbmltcG9ydCAqIGFzIHVzZXJsYW5kIGZyb20gXCJDOlxcXFxVc2Vyc1xcXFxiYWN6ZVxcXFxQcm9qZWN0XFxcXEdyb3VwU2hhcmVcXFxcZ3JvdXBzaGFyZS1wcm9qZWN0XFxcXHNyY1xcXFxhcHBcXFxcYXBpXFxcXHBheW1lbnRzXFxcXHJvdXRlLmpzXCI7XG4vLyBXZSBpbmplY3QgdGhlIG5leHRDb25maWdPdXRwdXQgaGVyZSBzbyB0aGF0IHdlIGNhbiB1c2UgdGhlbSBpbiB0aGUgcm91dGVcbi8vIG1vZHVsZS5cbmNvbnN0IG5leHRDb25maWdPdXRwdXQgPSBcIlwiXG5jb25zdCByb3V0ZU1vZHVsZSA9IG5ldyBBcHBSb3V0ZVJvdXRlTW9kdWxlKHtcbiAgICBkZWZpbml0aW9uOiB7XG4gICAgICAgIGtpbmQ6IFJvdXRlS2luZC5BUFBfUk9VVEUsXG4gICAgICAgIHBhZ2U6IFwiL2FwaS9wYXltZW50cy9yb3V0ZVwiLFxuICAgICAgICBwYXRobmFtZTogXCIvYXBpL3BheW1lbnRzXCIsXG4gICAgICAgIGZpbGVuYW1lOiBcInJvdXRlXCIsXG4gICAgICAgIGJ1bmRsZVBhdGg6IFwiYXBwL2FwaS9wYXltZW50cy9yb3V0ZVwiXG4gICAgfSxcbiAgICByZXNvbHZlZFBhZ2VQYXRoOiBcIkM6XFxcXFVzZXJzXFxcXGJhY3plXFxcXFByb2plY3RcXFxcR3JvdXBTaGFyZVxcXFxncm91cHNoYXJlLXByb2plY3RcXFxcc3JjXFxcXGFwcFxcXFxhcGlcXFxccGF5bWVudHNcXFxccm91dGUuanNcIixcbiAgICBuZXh0Q29uZmlnT3V0cHV0LFxuICAgIHVzZXJsYW5kXG59KTtcbi8vIFB1bGwgb3V0IHRoZSBleHBvcnRzIHRoYXQgd2UgbmVlZCB0byBleHBvc2UgZnJvbSB0aGUgbW9kdWxlLiBUaGlzIHNob3VsZFxuLy8gYmUgZWxpbWluYXRlZCB3aGVuIHdlJ3ZlIG1vdmVkIHRoZSBvdGhlciByb3V0ZXMgdG8gdGhlIG5ldyBmb3JtYXQuIFRoZXNlXG4vLyBhcmUgdXNlZCB0byBob29rIGludG8gdGhlIHJvdXRlLlxuY29uc3QgeyByZXF1ZXN0QXN5bmNTdG9yYWdlLCBzdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlLCBzZXJ2ZXJIb29rcyB9ID0gcm91dGVNb2R1bGU7XG5jb25zdCBvcmlnaW5hbFBhdGhuYW1lID0gXCIvYXBpL3BheW1lbnRzL3JvdXRlXCI7XG5mdW5jdGlvbiBwYXRjaEZldGNoKCkge1xuICAgIHJldHVybiBfcGF0Y2hGZXRjaCh7XG4gICAgICAgIHNlcnZlckhvb2tzLFxuICAgICAgICBzdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlXG4gICAgfSk7XG59XG5leHBvcnQgeyByb3V0ZU1vZHVsZSwgcmVxdWVzdEFzeW5jU3RvcmFnZSwgc3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZSwgc2VydmVySG9va3MsIG9yaWdpbmFsUGF0aG5hbWUsIHBhdGNoRmV0Y2gsICB9O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1hcHAtcm91dGUuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fpayments%2Froute&page=%2Fapi%2Fpayments%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fpayments%2Froute.js&appDir=C%3A%5CUsers%5Cbacze%5CProject%5CGroupShare%5Cgroupshare-project%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5Cbacze%5CProject%5CGroupShare%5Cgroupshare-project&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./src/app/api/payments/route.js":
/*!***************************************!*\
  !*** ./src/app/api/payments/route.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   POST: () => (/* binding */ POST)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* harmony import */ var _clerk_nextjs_server__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @clerk/nextjs/server */ \"(rsc)/./node_modules/@clerk/nextjs/dist/esm/app-router/server/currentUser.js\");\n/* harmony import */ var _lib_database_supabase_client__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/database/supabase-client */ \"(rsc)/./src/lib/database/supabase-client.js\");\n/* harmony import */ var _services_payment_payment_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/services/payment/payment-service */ \"(rsc)/./src/services/payment/payment-service.js\");\n// src/app/api/payments/route.js\n\n\n\n\n/**\r\n * POST /api/payments\r\n * Przetwarza płatność za subskrypcję i automatycznie przyznaje dostęp\r\n * Zrefaktoryzowana wersja używająca PaymentService\r\n */ async function POST(request) {\n    try {\n        const { purchaseId, paymentMethod } = await request.json();\n        // Sprawdź autentykację\n        const user = await (0,_clerk_nextjs_server__WEBPACK_IMPORTED_MODULE_3__.currentUser)();\n        if (!user) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: \"Unauthorized\"\n            }, {\n                status: 401\n            });\n        }\n        console.log(\"Processing payment for user:\", user.id);\n        // Pobierz profil użytkownika\n        let userProfile = await _lib_database_supabase_client__WEBPACK_IMPORTED_MODULE_1__.userRepository.getByAuthId(user.id);\n        // Jeśli nie znaleziono profilu, utwórz nowy\n        if (!userProfile) {\n            console.log(\"User profile not found, creating new profile\");\n            // Tworzenie nowego profilu\n            const newProfile = {\n                external_auth_id: user.id,\n                display_name: user.firstName ? `${user.firstName} ${user.lastName || \"\"}`.trim() : user.username || \"Nowy użytkownik\",\n                email: user.emailAddresses[0]?.emailAddress || \"\",\n                phone_number: user.phoneNumbers[0]?.phoneNumber || null,\n                profile_type: \"buyer\",\n                verification_level: \"basic\",\n                created_at: new Date().toISOString(),\n                updated_at: new Date().toISOString()\n            };\n            userProfile = await _lib_database_supabase_client__WEBPACK_IMPORTED_MODULE_1__.userRepository.create(newProfile);\n            if (!userProfile) {\n                return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                    error: \"Failed to create user profile\"\n                }, {\n                    status: 500\n                });\n            }\n        }\n        try {\n            // Przetwórz płatność za pomocą serwisu płatności\n            const result = await _services_payment_payment_service__WEBPACK_IMPORTED_MODULE_2__.paymentService.processPayment(purchaseId, paymentMethod, userProfile.id);\n            // Zwróć odpowiedź w formacie kompatybilnym z dotychczasowym API\n            // aby zachować zgodność z istniejącym kodem frontendu\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                success: true,\n                message: \"Payment processed successfully\",\n                purchaseId: purchaseId,\n                accessUrl: result.accessUrl,\n                recovered: result.recovered // dodane pole informujące o częściowym odzyskaniu\n            });\n        } catch (paymentError) {\n            // Sprawdź, czy komunikat błędu dotyczy braku miejsc\n            if (paymentError.message.includes(\"Brak dostępnych miejsc\")) {\n                return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                    error: \"Przepraszamy, ale wszystkie miejsca zostały już zajęte. Odśwież stronę, aby zobaczyć aktualne oferty.\",\n                    code: \"NO_AVAILABLE_SLOTS\"\n                }, {\n                    status: 400\n                });\n            }\n            // Inny błąd płatności\n            throw paymentError;\n        }\n    } catch (error) {\n        console.error(\"Error processing payment:\", error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: error.message || \"Failed to process payment\"\n        }, {\n            status: 500\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvYXBwL2FwaS9wYXltZW50cy9yb3V0ZS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBLGdDQUFnQztBQUNXO0FBQ1E7QUFDYTtBQUNJO0FBRXBFOzs7O0NBSUMsR0FDTSxlQUFlSSxLQUFLQyxPQUFPO0lBQ2hDLElBQUk7UUFDRixNQUFNLEVBQUVDLFVBQVUsRUFBRUMsYUFBYSxFQUFFLEdBQUcsTUFBTUYsUUFBUUcsSUFBSTtRQUV4RCx1QkFBdUI7UUFDdkIsTUFBTUMsT0FBTyxNQUFNUixpRUFBV0E7UUFDOUIsSUFBSSxDQUFDUSxNQUFNO1lBQ1QsT0FBT1QscURBQVlBLENBQUNRLElBQUksQ0FDdEI7Z0JBQUVFLE9BQU87WUFBZSxHQUN4QjtnQkFBRUMsUUFBUTtZQUFJO1FBRWxCO1FBRUFDLFFBQVFDLEdBQUcsQ0FBQyxnQ0FBZ0NKLEtBQUtLLEVBQUU7UUFFbkQsNkJBQTZCO1FBQzdCLElBQUlDLGNBQWMsTUFBTWIseUVBQWNBLENBQUNjLFdBQVcsQ0FBQ1AsS0FBS0ssRUFBRTtRQUUxRCw0Q0FBNEM7UUFDNUMsSUFBSSxDQUFDQyxhQUFhO1lBQ2hCSCxRQUFRQyxHQUFHLENBQUM7WUFFWiwyQkFBMkI7WUFDM0IsTUFBTUksYUFBYTtnQkFDakJDLGtCQUFrQlQsS0FBS0ssRUFBRTtnQkFDekJLLGNBQWNWLEtBQUtXLFNBQVMsR0FDeEIsQ0FBQyxFQUFFWCxLQUFLVyxTQUFTLENBQUMsQ0FBQyxFQUFFWCxLQUFLWSxRQUFRLElBQUksR0FBRyxDQUFDLENBQUNDLElBQUksS0FDOUNiLEtBQUtjLFFBQVEsSUFBSTtnQkFDdEJDLE9BQU9mLEtBQUtnQixjQUFjLENBQUMsRUFBRSxFQUFFQyxnQkFBZ0I7Z0JBQy9DQyxjQUFjbEIsS0FBS21CLFlBQVksQ0FBQyxFQUFFLEVBQUVDLGVBQWU7Z0JBQ25EQyxjQUFjO2dCQUNkQyxvQkFBb0I7Z0JBQ3BCQyxZQUFZLElBQUlDLE9BQU9DLFdBQVc7Z0JBQ2xDQyxZQUFZLElBQUlGLE9BQU9DLFdBQVc7WUFDcEM7WUFFQW5CLGNBQWMsTUFBTWIseUVBQWNBLENBQUNrQyxNQUFNLENBQUNuQjtZQUUxQyxJQUFJLENBQUNGLGFBQWE7Z0JBQ2hCLE9BQU9mLHFEQUFZQSxDQUFDUSxJQUFJLENBQ3RCO29CQUFFRSxPQUFPO2dCQUFnQyxHQUN6QztvQkFBRUMsUUFBUTtnQkFBSTtZQUVsQjtRQUNGO1FBRUEsSUFBSTtZQUNGLGlEQUFpRDtZQUNqRCxNQUFNMEIsU0FBUyxNQUFNbEMsNkVBQWNBLENBQUNtQyxjQUFjLENBQ2hEaEMsWUFDQUMsZUFDQVEsWUFBWUQsRUFBRTtZQUdoQixnRUFBZ0U7WUFDaEUsc0RBQXNEO1lBQ3RELE9BQU9kLHFEQUFZQSxDQUFDUSxJQUFJLENBQUM7Z0JBQ3ZCK0IsU0FBUztnQkFDVEMsU0FBUztnQkFDVGxDLFlBQVlBO2dCQUNabUMsV0FBV0osT0FBT0ksU0FBUztnQkFDM0JDLFdBQVdMLE9BQU9LLFNBQVMsQ0FBQyxrREFBa0Q7WUFDaEY7UUFDRixFQUFFLE9BQU9DLGNBQWM7WUFDckIsb0RBQW9EO1lBQ3BELElBQUlBLGFBQWFILE9BQU8sQ0FBQ0ksUUFBUSxDQUFDLDJCQUEyQjtnQkFDM0QsT0FBTzVDLHFEQUFZQSxDQUFDUSxJQUFJLENBQ3RCO29CQUNFRSxPQUFPO29CQUNQbUMsTUFBTTtnQkFDUixHQUNBO29CQUFFbEMsUUFBUTtnQkFBSTtZQUVsQjtZQUVBLHNCQUFzQjtZQUN0QixNQUFNZ0M7UUFDUjtJQUNGLEVBQUUsT0FBT2pDLE9BQU87UUFDZEUsUUFBUUYsS0FBSyxDQUFDLDZCQUE2QkE7UUFDM0MsT0FBT1YscURBQVlBLENBQUNRLElBQUksQ0FDdEI7WUFBRUUsT0FBT0EsTUFBTThCLE9BQU8sSUFBSTtRQUE0QixHQUN0RDtZQUFFN0IsUUFBUTtRQUFJO0lBRWxCO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ncm91cHNoYXJlLXByb2plY3QvLi9zcmMvYXBwL2FwaS9wYXltZW50cy9yb3V0ZS5qcz9lNjhkIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIHNyYy9hcHAvYXBpL3BheW1lbnRzL3JvdXRlLmpzXHJcbmltcG9ydCB7IE5leHRSZXNwb25zZSB9IGZyb20gJ25leHQvc2VydmVyJztcclxuaW1wb3J0IHsgY3VycmVudFVzZXIgfSBmcm9tICdAY2xlcmsvbmV4dGpzL3NlcnZlcic7XHJcbmltcG9ydCB7IHVzZXJSZXBvc2l0b3J5IH0gZnJvbSAnQC9saWIvZGF0YWJhc2Uvc3VwYWJhc2UtY2xpZW50JztcclxuaW1wb3J0IHsgcGF5bWVudFNlcnZpY2UgfSBmcm9tICdAL3NlcnZpY2VzL3BheW1lbnQvcGF5bWVudC1zZXJ2aWNlJztcclxuXHJcbi8qKlxyXG4gKiBQT1NUIC9hcGkvcGF5bWVudHNcclxuICogUHJ6ZXR3YXJ6YSBwxYJhdG5vxZvEhyB6YSBzdWJza3J5cGNqxJkgaSBhdXRvbWF0eWN6bmllIHByenl6bmFqZSBkb3N0xJlwXHJcbiAqIFpyZWZha3Rvcnl6b3dhbmEgd2Vyc2phIHXFvHl3YWrEhWNhIFBheW1lbnRTZXJ2aWNlXHJcbiAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gUE9TVChyZXF1ZXN0KSB7XHJcbiAgdHJ5IHtcclxuICAgIGNvbnN0IHsgcHVyY2hhc2VJZCwgcGF5bWVudE1ldGhvZCB9ID0gYXdhaXQgcmVxdWVzdC5qc29uKCk7XHJcbiAgICBcclxuICAgIC8vIFNwcmF3ZMW6IGF1dGVudHlrYWNqxJlcclxuICAgIGNvbnN0IHVzZXIgPSBhd2FpdCBjdXJyZW50VXNlcigpO1xyXG4gICAgaWYgKCF1c2VyKSB7XHJcbiAgICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbihcclxuICAgICAgICB7IGVycm9yOiAnVW5hdXRob3JpemVkJyB9LFxyXG4gICAgICAgIHsgc3RhdHVzOiA0MDEgfVxyXG4gICAgICApO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICBjb25zb2xlLmxvZygnUHJvY2Vzc2luZyBwYXltZW50IGZvciB1c2VyOicsIHVzZXIuaWQpO1xyXG4gICAgXHJcbiAgICAvLyBQb2JpZXJ6IHByb2ZpbCB1xbx5dGtvd25pa2FcclxuICAgIGxldCB1c2VyUHJvZmlsZSA9IGF3YWl0IHVzZXJSZXBvc2l0b3J5LmdldEJ5QXV0aElkKHVzZXIuaWQpO1xyXG4gICAgXHJcbiAgICAvLyBKZcWbbGkgbmllIHpuYWxlemlvbm8gcHJvZmlsdSwgdXR3w7NyeiBub3d5XHJcbiAgICBpZiAoIXVzZXJQcm9maWxlKSB7XHJcbiAgICAgIGNvbnNvbGUubG9nKCdVc2VyIHByb2ZpbGUgbm90IGZvdW5kLCBjcmVhdGluZyBuZXcgcHJvZmlsZScpO1xyXG4gICAgICBcclxuICAgICAgLy8gVHdvcnplbmllIG5vd2VnbyBwcm9maWx1XHJcbiAgICAgIGNvbnN0IG5ld1Byb2ZpbGUgPSB7XHJcbiAgICAgICAgZXh0ZXJuYWxfYXV0aF9pZDogdXNlci5pZCxcclxuICAgICAgICBkaXNwbGF5X25hbWU6IHVzZXIuZmlyc3ROYW1lIFxyXG4gICAgICAgICAgPyBgJHt1c2VyLmZpcnN0TmFtZX0gJHt1c2VyLmxhc3ROYW1lIHx8ICcnfWAudHJpbSgpIFxyXG4gICAgICAgICAgOiAodXNlci51c2VybmFtZSB8fCAnTm93eSB1xbx5dGtvd25paycpLFxyXG4gICAgICAgIGVtYWlsOiB1c2VyLmVtYWlsQWRkcmVzc2VzWzBdPy5lbWFpbEFkZHJlc3MgfHwgJycsXHJcbiAgICAgICAgcGhvbmVfbnVtYmVyOiB1c2VyLnBob25lTnVtYmVyc1swXT8ucGhvbmVOdW1iZXIgfHwgbnVsbCxcclxuICAgICAgICBwcm9maWxlX3R5cGU6ICdidXllcicsXHJcbiAgICAgICAgdmVyaWZpY2F0aW9uX2xldmVsOiAnYmFzaWMnLFxyXG4gICAgICAgIGNyZWF0ZWRfYXQ6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSxcclxuICAgICAgICB1cGRhdGVkX2F0OiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKClcclxuICAgICAgfTtcclxuICAgICAgXHJcbiAgICAgIHVzZXJQcm9maWxlID0gYXdhaXQgdXNlclJlcG9zaXRvcnkuY3JlYXRlKG5ld1Byb2ZpbGUpO1xyXG4gICAgICBcclxuICAgICAgaWYgKCF1c2VyUHJvZmlsZSkge1xyXG4gICAgICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbihcclxuICAgICAgICAgIHsgZXJyb3I6ICdGYWlsZWQgdG8gY3JlYXRlIHVzZXIgcHJvZmlsZScgfSxcclxuICAgICAgICAgIHsgc3RhdHVzOiA1MDAgfVxyXG4gICAgICAgICk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIFxyXG4gICAgdHJ5IHtcclxuICAgICAgLy8gUHJ6ZXR3w7NyeiBwxYJhdG5vxZvEhyB6YSBwb21vY8SFIHNlcndpc3UgcMWCYXRub8WbY2lcclxuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgcGF5bWVudFNlcnZpY2UucHJvY2Vzc1BheW1lbnQoXHJcbiAgICAgICAgcHVyY2hhc2VJZCwgXHJcbiAgICAgICAgcGF5bWVudE1ldGhvZCwgXHJcbiAgICAgICAgdXNlclByb2ZpbGUuaWRcclxuICAgICAgKTtcclxuICAgICAgXHJcbiAgICAgIC8vIFp3csOzxIcgb2Rwb3dpZWTFuiB3IGZvcm1hY2llIGtvbXBhdHliaWxueW0geiBkb3R5Y2hjemFzb3d5bSBBUElcclxuICAgICAgLy8gYWJ5IHphY2hvd2HEhyB6Z29kbm/Fm8SHIHogaXN0bmllasSFY3ltIGtvZGVtIGZyb250ZW5kdVxyXG4gICAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oe1xyXG4gICAgICAgIHN1Y2Nlc3M6IHRydWUsXHJcbiAgICAgICAgbWVzc2FnZTogJ1BheW1lbnQgcHJvY2Vzc2VkIHN1Y2Nlc3NmdWxseScsXHJcbiAgICAgICAgcHVyY2hhc2VJZDogcHVyY2hhc2VJZCxcclxuICAgICAgICBhY2Nlc3NVcmw6IHJlc3VsdC5hY2Nlc3NVcmwsXHJcbiAgICAgICAgcmVjb3ZlcmVkOiByZXN1bHQucmVjb3ZlcmVkIC8vIGRvZGFuZSBwb2xlIGluZm9ybXVqxIVjZSBvIGN6xJnFm2Npb3d5bSBvZHp5c2thbml1XHJcbiAgICAgIH0pO1xyXG4gICAgfSBjYXRjaCAocGF5bWVudEVycm9yKSB7XHJcbiAgICAgIC8vIFNwcmF3ZMW6LCBjenkga29tdW5pa2F0IGLFgsSZZHUgZG90eWN6eSBicmFrdSBtaWVqc2NcclxuICAgICAgaWYgKHBheW1lbnRFcnJvci5tZXNzYWdlLmluY2x1ZGVzKCdCcmFrIGRvc3TEmXBueWNoIG1pZWpzYycpKSB7XHJcbiAgICAgICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKFxyXG4gICAgICAgICAgeyBcclxuICAgICAgICAgICAgZXJyb3I6ICdQcnplcHJhc3phbXksIGFsZSB3c3p5c3RraWUgbWllanNjYSB6b3N0YcWCeSBqdcW8IHphasSZdGUuIE9kxZt3aWXFvCBzdHJvbsSZLCBhYnkgem9iYWN6ecSHIGFrdHVhbG5lIG9mZXJ0eS4nLFxyXG4gICAgICAgICAgICBjb2RlOiAnTk9fQVZBSUxBQkxFX1NMT1RTJ1xyXG4gICAgICAgICAgfSxcclxuICAgICAgICAgIHsgc3RhdHVzOiA0MDAgfVxyXG4gICAgICAgICk7XHJcbiAgICAgIH1cclxuICAgICAgXHJcbiAgICAgIC8vIElubnkgYsWCxIVkIHDFgmF0bm/Fm2NpXHJcbiAgICAgIHRocm93IHBheW1lbnRFcnJvcjtcclxuICAgIH1cclxuICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgY29uc29sZS5lcnJvcignRXJyb3IgcHJvY2Vzc2luZyBwYXltZW50OicsIGVycm9yKTtcclxuICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbihcclxuICAgICAgeyBlcnJvcjogZXJyb3IubWVzc2FnZSB8fCAnRmFpbGVkIHRvIHByb2Nlc3MgcGF5bWVudCcgfSxcclxuICAgICAgeyBzdGF0dXM6IDUwMCB9XHJcbiAgICApO1xyXG4gIH1cclxufSJdLCJuYW1lcyI6WyJOZXh0UmVzcG9uc2UiLCJjdXJyZW50VXNlciIsInVzZXJSZXBvc2l0b3J5IiwicGF5bWVudFNlcnZpY2UiLCJQT1NUIiwicmVxdWVzdCIsInB1cmNoYXNlSWQiLCJwYXltZW50TWV0aG9kIiwianNvbiIsInVzZXIiLCJlcnJvciIsInN0YXR1cyIsImNvbnNvbGUiLCJsb2ciLCJpZCIsInVzZXJQcm9maWxlIiwiZ2V0QnlBdXRoSWQiLCJuZXdQcm9maWxlIiwiZXh0ZXJuYWxfYXV0aF9pZCIsImRpc3BsYXlfbmFtZSIsImZpcnN0TmFtZSIsImxhc3ROYW1lIiwidHJpbSIsInVzZXJuYW1lIiwiZW1haWwiLCJlbWFpbEFkZHJlc3NlcyIsImVtYWlsQWRkcmVzcyIsInBob25lX251bWJlciIsInBob25lTnVtYmVycyIsInBob25lTnVtYmVyIiwicHJvZmlsZV90eXBlIiwidmVyaWZpY2F0aW9uX2xldmVsIiwiY3JlYXRlZF9hdCIsIkRhdGUiLCJ0b0lTT1N0cmluZyIsInVwZGF0ZWRfYXQiLCJjcmVhdGUiLCJyZXN1bHQiLCJwcm9jZXNzUGF5bWVudCIsInN1Y2Nlc3MiLCJtZXNzYWdlIiwiYWNjZXNzVXJsIiwicmVjb3ZlcmVkIiwicGF5bWVudEVycm9yIiwiaW5jbHVkZXMiLCJjb2RlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./src/app/api/payments/route.js\n");

/***/ }),

/***/ "(rsc)/./src/lib/database/supabase-admin-client.js":
/*!***************************************************!*\
  !*** ./src/lib/database/supabase-admin-client.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createUserProfileAdmin: () => (/* binding */ createUserProfileAdmin),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   getGroupMembersAdmin: () => (/* binding */ getGroupMembersAdmin),\n/* harmony export */   getSubscriptionPlatformsAdmin: () => (/* binding */ getSubscriptionPlatformsAdmin),\n/* harmony export */   getUserByAuthIdAdmin: () => (/* binding */ getUserByAuthIdAdmin),\n/* harmony export */   handleSupabaseAdminError: () => (/* binding */ handleSupabaseAdminError),\n/* harmony export */   logAdminActivity: () => (/* binding */ logAdminActivity),\n/* harmony export */   updateUserProfileAdmin: () => (/* binding */ updateUserProfileAdmin)\n/* harmony export */ });\n/* harmony import */ var _supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @supabase/supabase-js */ \"(rsc)/./node_modules/@supabase/supabase-js/dist/module/index.js\");\n// src/lib/supabase-admin-client.js\n\n// Inicjalizacja klienta Supabase z uprawnieniami administratora\nconst supabaseUrl = \"https://nimrnohkesysfppcmujb.supabase.co\";\nconst supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;\n// Sprawdzenie czy zmienne środowiskowe są ustawione\nif (!supabaseUrl || !supabaseServiceKey) {\n    console.error(\"Missing environment variables: NEXT_PUBLIC_SUPABASE_URL or SUPABASE_SERVICE_ROLE_KEY\");\n}\n// Uwaga: Ten klient ma pełne uprawnienia do bazy danych, używaj ostrożnie!\nconst supabaseAdmin = (0,_supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__.createClient)(supabaseUrl, supabaseServiceKey, {\n    auth: {\n        persistSession: false,\n        autoRefreshToken: false\n    }\n});\n// Funkcja pomocnicza do obsługi błędów Supabase\nconst handleSupabaseAdminError = (error)=>{\n    console.error(\"Supabase Admin error:\", error);\n    return {\n        error: true,\n        message: error.message || \"Nieoczekiwany błąd administratora\",\n        code: error.code || \"unknown_error\",\n        details: error.details || null\n    };\n};\n// Funkcje administratora do zarządzania użytkownikami\n// Funkcja do tworzenia profilu użytkownika przez administratora\nconst createUserProfileAdmin = async (userProfile)=>{\n    try {\n        const { data, error } = await supabaseAdmin.from(\"user_profiles\").insert([\n            userProfile\n        ]).select().single();\n        if (error) {\n            if (error.code === \"23505\") {\n                console.warn(\"Admin: Pr\\xf3ba utworzenia duplikatu profilu użytkownika:\", error);\n                // Jeśli profil już istnieje, pobierz go\n                const { data: existingUser, error: fetchError } = await supabaseAdmin.from(\"user_profiles\").select(\"*\").eq(\"external_auth_id\", userProfile.external_auth_id).single();\n                if (fetchError) {\n                    throw new Error(\"Nie można pobrać istniejącego profilu: \" + fetchError.message);\n                }\n                return existingUser;\n            } else {\n                throw new Error(error.message || \"Nie udało się utworzyć profilu użytkownika\");\n            }\n        }\n        return data;\n    } catch (error) {\n        handleSupabaseAdminError(error);\n        throw error;\n    }\n};\n// Funkcja do pobierania profilu użytkownika przez administratora\nconst getUserByAuthIdAdmin = async (authId)=>{\n    if (!authId) return null;\n    try {\n        const { data, error } = await supabaseAdmin.from(\"user_profiles\").select(\"*\").eq(\"external_auth_id\", authId).single();\n        if (error) {\n            if (error.code === \"PGRST116\") {\n                // Nie znaleziono - to normalny przypadek\n                return null;\n            } else {\n                console.error(\"Admin: Błąd pobierania profilu użytkownika:\", error);\n                throw new Error(error.message || \"Nie udało się pobrać profilu użytkownika\");\n            }\n        }\n        return data;\n    } catch (error) {\n        handleSupabaseAdminError(error);\n        throw error;\n    }\n};\n// Funkcja do aktualizacji profilu użytkownika przez administratora\nconst updateUserProfileAdmin = async (userId, updates)=>{\n    try {\n        const { data, error } = await supabaseAdmin.from(\"user_profiles\").update(updates).eq(\"id\", userId).select().single();\n        if (error) throw error;\n        return data;\n    } catch (error) {\n        handleSupabaseAdminError(error);\n        throw error;\n    }\n};\n// Funkcja do pobierania platform subskrypcyjnych przez administratora\nconst getSubscriptionPlatformsAdmin = async ()=>{\n    try {\n        const { data, error } = await supabaseAdmin.from(\"subscription_platforms\").select(\"*\").order(\"name\");\n        if (error) throw error;\n        return data;\n    } catch (error) {\n        handleSupabaseAdminError(error);\n        return [];\n    }\n};\n// Funkcja do pobierania członków grupy przez administratora\nconst getGroupMembersAdmin = async (groupId)=>{\n    try {\n        const { data, error } = await supabaseAdmin.from(\"group_members\").select(`\r\n        *,\r\n        user:user_profiles(id, display_name, avatar_url, email)\r\n      `).eq(\"group_id\", groupId);\n        if (error) throw error;\n        return data;\n    } catch (error) {\n        handleSupabaseAdminError(error);\n        return [];\n    }\n};\n// Zapisz wszystkie aktywności administratora do logu bezpieczeństwa\nconst logAdminActivity = async (action, resourceType, resourceId, details = {})=>{\n    try {\n        const { data, error } = await supabaseAdmin.from(\"security_logs\").insert([\n            {\n                action_type: action,\n                resource_type: resourceType,\n                resource_id: resourceId,\n                status: \"success\",\n                details: details\n            }\n        ]);\n        if (error) console.error(\"Błąd logowania aktywności administratora:\", error);\n    } catch (error) {\n        console.error(\"Wyjątek podczas logowania aktywności administratora:\", error);\n    }\n};\n// Eksport klienta administratora jako domyślny\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (supabaseAdmin);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/database/supabase-admin-client.js\n");

/***/ }),

/***/ "(rsc)/./src/lib/database/supabase-client.js":
/*!*********************************************!*\
  !*** ./src/lib/database/supabase-client.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   handleDatabaseError: () => (/* binding */ handleDatabaseError),\n/* harmony export */   offersRepository: () => (/* binding */ offersRepository),\n/* harmony export */   platformsRepository: () => (/* binding */ platformsRepository),\n/* harmony export */   purchasesRepository: () => (/* binding */ purchasesRepository),\n/* harmony export */   safeQueryExecution: () => (/* binding */ safeQueryExecution),\n/* harmony export */   userRepository: () => (/* binding */ userRepository)\n/* harmony export */ });\n/* harmony import */ var _supabase_supabase_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @supabase/supabase-js */ \"(rsc)/./node_modules/@supabase/supabase-js/dist/module/index.js\");\n/* harmony import */ var _supabase_admin_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./supabase-admin-client */ \"(rsc)/./src/lib/database/supabase-admin-client.js\");\n// src/lib/database/supabase-client.js\n\n\n// Inicjalizacja klienta Supabase\nconst supabaseUrl = \"https://nimrnohkesysfppcmujb.supabase.co\";\nconst supabaseAnonKey = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im5pbXJub2hrZXN5c2ZwcGNtdWpiIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDQ2MzI1ODgsImV4cCI6MjA2MDIwODU4OH0.xanoTueWzP87TJEZj3zNa8qyC3eRMooobIL71bjxdEs\";\n// Sprawdzenie, czy zmienne środowiskowe są ustawione\nif (!supabaseUrl || !supabaseAnonKey) {\n    console.error(\"Brak wymaganych zmiennych środowiskowych: NEXT_PUBLIC_SUPABASE_URL lub NEXT_PUBLIC_SUPABASE_ANON_KEY\");\n}\n// Stała instancja klienta Supabase do ponownego użycia w całej aplikacji\nconst supabase = (0,_supabase_supabase_js__WEBPACK_IMPORTED_MODULE_1__.createClient)(supabaseUrl, supabaseAnonKey);\n/**\r\n * Standardowa obsługa błędów Supabase \r\n * @param {Error} error - Błąd zwrócony przez Supabase\r\n * @param {string} operation - Nazwa operacji, która spowodowała błąd\r\n * @param {boolean} throwError - Czy wyrzucić błąd (true) czy zwrócić obiekt błędu (false)\r\n * @returns {Object} - Standardowy obiekt błędu (jeśli throwError = false)\r\n * @throws {Error} - Rzuca błąd (jeśli throwError = true)\r\n */ const handleDatabaseError = (error, operation = \"database operation\", throwError = false)=>{\n    // Tworzenie standardowego obiektu błędu\n    const standardError = {\n        error: true,\n        message: error.message || `Wystąpił błąd podczas ${operation}`,\n        code: error.code || \"unknown_error\",\n        details: error.details || null,\n        operation,\n        data: [] // Dodano pustą tablicę dla kompatybilności z klientem\n    };\n    // Zapisz szczegółowy log błędu\n    console.error(`Database error during ${operation}:`, {\n        message: error.message,\n        code: error.code,\n        details: error.details,\n        stack: error.stack\n    });\n    if (throwError) {\n        // Stwórz nowy obiekt błędu z dodatkowymi metadanymi\n        const enhancedError = new Error(standardError.message);\n        enhancedError.code = standardError.code;\n        enhancedError.details = standardError.details;\n        enhancedError.operation = operation;\n        enhancedError.data = []; // Dodano pustą tablicę dla kompatybilności\n        throw enhancedError;\n    }\n    return standardError;\n};\n/**\r\n * Bezpieczne wykonanie operacji Supabase z obsługą błędów i fallbackiem do klienta administratora\r\n * @param {Function} operation - Funkcja operacji Supabase do wykonania\r\n * @param {string} operationName - Nazwa operacji (dla logów)\r\n * @param {boolean} useAdminOnFailure - Czy próbować z klientem admin w przypadku błędu uprawnień\r\n * @param {boolean} throwOnError - Czy wyrzucać błędy zamiast zwracać null/[] \r\n * @returns {Promise<any>} - Wynik operacji lub null/[] w przypadku błędu\r\n */ const safeQueryExecution = async (operation, operationName = \"database operation\", useAdminOnFailure = true, throwOnError = false)=>{\n    try {\n        // Próba wykonania operacji ze standardowym klientem\n        const result = await operation(supabase);\n        // Jeśli wynik zawiera błąd\n        if (result.error) {\n            // Jeśli to błąd uprawnień i mamy fallback do admina\n            if (result.error.code === \"42501\" && useAdminOnFailure) {\n                console.log(`Permission denied during ${operationName}, trying admin client`);\n                // Próba wykonania tej samej operacji z klientem administratora\n                const adminResult = await operation(_supabase_admin_client__WEBPACK_IMPORTED_MODULE_0__[\"default\"]);\n                if (adminResult.error) {\n                    return handleDatabaseError(adminResult.error, operationName, throwOnError);\n                }\n                // Upewnij się, że zwracamy dane w oczekiwanym formacie\n                if (Array.isArray(adminResult.data)) {\n                    return adminResult.data;\n                } else if (adminResult.data === null || adminResult.data === undefined) {\n                    return []; // Zwracamy pustą tablicę jeśli nie ma danych\n                } else {\n                    return adminResult.data; // Zwracamy pojedynczy obiekt\n                }\n            }\n            return handleDatabaseError(result.error, operationName, throwOnError);\n        }\n        // Upewnij się, że zwracamy dane w oczekiwanym formacie\n        if (Array.isArray(result.data)) {\n            return result.data;\n        } else if (result.data === null || result.data === undefined) {\n            return []; // Zwracamy pustą tablicę jeśli nie ma danych\n        } else {\n            return result.data; // Zwracamy pojedynczy obiekt\n        }\n    } catch (error) {\n        return handleDatabaseError(error, operationName, throwOnError);\n    }\n};\n// Repozytoria dostępu do danych - wysoki poziom abstrakcji\n/**\r\n * Repozytorium użytkowników\r\n */ const userRepository = {\n    /**\r\n   * Pobiera profil użytkownika na podstawie zewnętrznego ID uwierzytelniania\r\n   * @param {string} authId - ID uwierzytelniania (np. z Clerk)\r\n   * @returns {Promise<Object|null>} - Profil użytkownika lub null\r\n   */ async getByAuthId (authId) {\n        if (!authId) return null;\n        return safeQueryExecution((client)=>client.from(\"user_profiles\").select(\"*\").eq(\"external_auth_id\", authId).single(), \"getByAuthId\");\n    },\n    /**\r\n   * Tworzy nowy profil użytkownika\r\n   * @param {Object} userProfile - Dane profilu użytkownika\r\n   * @returns {Promise<Object|null>} - Utworzony profil użytkownika lub null\r\n   */ async create (userProfile) {\n        return safeQueryExecution((client)=>client.from(\"user_profiles\").insert([\n                userProfile\n            ]).select().single(), \"createUserProfile\", true // zawsze używaj klienta admina przy tworzeniu użytkownika\n        );\n    },\n    /**\r\n   * Aktualizuje istniejący profil użytkownika\r\n   * @param {string} userId - ID profilu użytkownika\r\n   * @param {Object} updates - Dane do aktualizacji\r\n   * @returns {Promise<Object|null>} - Zaktualizowany profil użytkownika lub null\r\n   */ async update (userId, updates) {\n        return safeQueryExecution((client)=>client.from(\"user_profiles\").update(updates).eq(\"id\", userId).select().single(), \"updateUserProfile\");\n    },\n    /**\r\n   * Pobiera profil użytkownika po ID\r\n   * @param {string} userId - ID profilu użytkownika\r\n   * @returns {Promise<Object|null>} - Profil użytkownika lub null\r\n   */ async getById (userId) {\n        return safeQueryExecution((client)=>client.from(\"user_profiles\").select(\"*\").eq(\"id\", userId).single(), \"getUserById\");\n    }\n};\n/**\r\n * Repozytorium ofert subskrypcji\r\n */ const offersRepository = {\n    /**\r\n   * Pobiera oferty subskrypcji z filtrowaniem\r\n   * @param {Object} filters - Filtry do zastosowania\r\n   * @returns {Promise<Array>} - Lista ofert\r\n   */ async getAll (filters = {}) {\n        // Przygotowanie bazowego zapytania\n        const queryBuilder = (client)=>{\n            let query = client.from(\"group_subs\").select(`\r\n          *,\r\n          subscription_platforms(*),\r\n          groups(id, name),\r\n          owner:groups!inner(owner_id, user_profiles!inner(id, display_name, avatar_url, rating_avg, rating_count, verification_level))\r\n        `).eq(\"status\", \"active\");\n            // Zastosowanie filtrów\n            if (filters.platformId) {\n                query = query.eq(\"platform_id\", filters.platformId);\n            }\n            if (filters.minPrice !== undefined) {\n                query = query.gte(\"price_per_slot\", filters.minPrice);\n            }\n            if (filters.maxPrice !== undefined) {\n                query = query.lte(\"price_per_slot\", filters.maxPrice);\n            }\n            if (filters.availableSlots === true) {\n                query = query.gt(\"slots_available\", 0);\n            }\n            // Sortowanie\n            const orderBy = filters.orderBy || \"created_at\";\n            const ascending = filters.ascending === true;\n            query = query.order(orderBy, {\n                ascending\n            });\n            // Paginacja\n            if (filters.limit) {\n                query = query.limit(filters.limit);\n            }\n            if (filters.offset) {\n                query = query.range(filters.offset, filters.offset + (filters.limit || 10) - 1);\n            }\n            return query;\n        };\n        return safeQueryExecution(queryBuilder, \"getAllOffers\") || [];\n    },\n    /**\r\n   * Pobiera ofertę subskrypcji po ID\r\n   * @param {string} offerId - ID oferty\r\n   * @returns {Promise<Object|null>} - Oferta subskrypcji lub null\r\n   */ async getById (offerId) {\n        return safeQueryExecution((client)=>client.from(\"group_subs\").select(`\r\n          *,\r\n          subscription_platforms(*),\r\n          groups(id, name, description),\r\n          owner:groups!inner(owner_id, user_profiles!inner(id, display_name, avatar_url, rating_avg, rating_count, verification_level, bio))\r\n        `).eq(\"id\", offerId).single(), \"getOfferById\");\n    },\n    /**\r\n   * Tworzy nową ofertę subskrypcji\r\n   * @param {Object} offerData - Dane oferty\r\n   * @returns {Promise<Object|null>} - Utworzona oferta lub null\r\n   */ async create (offerData) {\n        return safeQueryExecution((client)=>client.from(\"group_subs\").insert([\n                offerData\n            ]).select().single(), \"createOffer\");\n    },\n    /**\r\n   * Aktualizuje ofertę subskrypcji\r\n   * @param {string} offerId - ID oferty\r\n   * @param {Object} updates - Dane do aktualizacji\r\n   * @returns {Promise<Object|null>} - Zaktualizowana oferta lub null \r\n   */ async update (offerId, updates) {\n        return safeQueryExecution((client)=>client.from(\"group_subs\").update(updates).eq(\"id\", offerId).select().single(), \"updateOffer\");\n    },\n    /**\r\n   * Usuwa ofertę subskrypcji\r\n   * @param {string} offerId - ID oferty\r\n   * @returns {Promise<boolean>} - Czy operacja się powiodła\r\n   */ async delete (offerId) {\n        const result = await safeQueryExecution((client)=>client.from(\"group_subs\").delete().eq(\"id\", offerId), \"deleteOffer\");\n        return result !== null;\n    }\n};\n/**\r\n * Repozytorium platform subskrypcji\r\n */ const platformsRepository = {\n    /**\r\n   * Pobiera wszystkie aktywne platformy subskrypcji\r\n   * @returns {Promise<Array>} - Lista platform\r\n   */ async getAll () {\n        return safeQueryExecution((client)=>client.from(\"subscription_platforms\").select(\"*\").eq(\"active\", true).order(\"name\"), \"getAllPlatforms\") || [];\n    },\n    /**\r\n   * Pobiera platformę po ID\r\n   * @param {string} platformId - ID platformy\r\n   * @returns {Promise<Object|null>} - Platforma lub null\r\n   */ async getById (platformId) {\n        return safeQueryExecution((client)=>client.from(\"subscription_platforms\").select(\"*\").eq(\"id\", platformId).single(), \"getPlatformById\");\n    }\n};\n/**\r\n * Repozytorium zakupów\r\n */ const purchasesRepository = {\n    /**\r\n   * Tworzy nowy zakup\r\n   * @param {Object} purchaseData - Dane zakupu\r\n   * @returns {Promise<Object|null>} - Utworzony zakup lub null\r\n   */ async create (purchaseData) {\n        return safeQueryExecution((client)=>client.from(\"purchase_records\").insert([\n                purchaseData\n            ]).select().single(), \"createPurchase\", true // używaj klienta admin\n        );\n    },\n    /**\r\n   * Pobiera zakup po ID\r\n   * @param {string} purchaseId - ID zakupu\r\n   * @returns {Promise<Object|null>} - Zakup lub null\r\n   */ async getById (purchaseId) {\n        return safeQueryExecution((client)=>client.from(\"purchase_records\").select(`\r\n          *,\r\n          group_sub:group_subs(\r\n            *,\r\n            subscription_platforms(\r\n              id,\r\n              name,\r\n              icon\r\n            )\r\n          )\r\n        `).eq(\"id\", purchaseId).single(), \"getPurchaseById\");\n    },\n    /**\r\n   * Aktualizuje zakup\r\n   * @param {string} purchaseId - ID zakupu\r\n   * @param {Object} updates - Dane do aktualizacji\r\n   * @returns {Promise<Object|null>} - Zaktualizowany zakup lub null\r\n   */ async update (purchaseId, updates) {\n        return safeQueryExecution((client)=>client.from(\"purchase_records\").update(updates).eq(\"id\", purchaseId).select().single(), \"updatePurchase\");\n    },\n    /**\r\n   * Pobiera zakupy użytkownika\r\n   * @param {string} userId - ID użytkownika\r\n   * @returns {Promise<Array>} - Lista zakupów\r\n   */ async getByUserId (userId) {\n        return safeQueryExecution((client)=>client.from(\"purchase_records\").select(`\r\n          *,\r\n          group_sub:group_subs(\r\n            *,\r\n            subscription_platforms(\r\n              id,\r\n              name,\r\n              icon\r\n            )\r\n          )\r\n        `).eq(\"user_id\", userId).order(\"created_at\", {\n                ascending: false\n            }), \"getUserPurchases\") || [];\n    }\n};\n// Eksport podstawowego klienta Supabase\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (supabase);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvbGliL2RhdGFiYXNlL3N1cGFiYXNlLWNsaWVudC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFBQSxzQ0FBc0M7QUFDZTtBQUNEO0FBRXBELGlDQUFpQztBQUNqQyxNQUFNRSxjQUFjQywwQ0FBb0M7QUFDeEQsTUFBTUcsa0JBQWtCSCxrTkFBeUM7QUFFakUscURBQXFEO0FBQ3JELElBQUksQ0FBQ0QsZUFBZSxDQUFDSSxpQkFBaUI7SUFDcENFLFFBQVFDLEtBQUssQ0FDWDtBQUVKO0FBRUEseUVBQXlFO0FBQ3pFLE1BQU1DLFdBQVdWLG1FQUFZQSxDQUFDRSxhQUFhSTtBQUUzQzs7Ozs7OztDQU9DLEdBQ00sTUFBTUssc0JBQXNCLENBQUNGLE9BQU9HLFlBQVksb0JBQW9CLEVBQUVDLGFBQWEsS0FBSztJQUM3Rix3Q0FBd0M7SUFDeEMsTUFBTUMsZ0JBQWdCO1FBQ3BCTCxPQUFPO1FBQ1BNLFNBQVNOLE1BQU1NLE9BQU8sSUFBSSxDQUFDLHNCQUFzQixFQUFFSCxVQUFVLENBQUM7UUFDOURJLE1BQU1QLE1BQU1PLElBQUksSUFBSTtRQUNwQkMsU0FBU1IsTUFBTVEsT0FBTyxJQUFJO1FBQzFCTDtRQUNBTSxNQUFNLEVBQUUsQ0FBQyxzREFBc0Q7SUFDakU7SUFFQSwrQkFBK0I7SUFDL0JWLFFBQVFDLEtBQUssQ0FBQyxDQUFDLHNCQUFzQixFQUFFRyxVQUFVLENBQUMsQ0FBQyxFQUFFO1FBQ25ERyxTQUFTTixNQUFNTSxPQUFPO1FBQ3RCQyxNQUFNUCxNQUFNTyxJQUFJO1FBQ2hCQyxTQUFTUixNQUFNUSxPQUFPO1FBQ3RCRSxPQUFPVixNQUFNVSxLQUFLO0lBQ3BCO0lBRUEsSUFBSU4sWUFBWTtRQUNkLG9EQUFvRDtRQUNwRCxNQUFNTyxnQkFBZ0IsSUFBSUMsTUFBTVAsY0FBY0MsT0FBTztRQUNyREssY0FBY0osSUFBSSxHQUFHRixjQUFjRSxJQUFJO1FBQ3ZDSSxjQUFjSCxPQUFPLEdBQUdILGNBQWNHLE9BQU87UUFDN0NHLGNBQWNSLFNBQVMsR0FBR0E7UUFDMUJRLGNBQWNGLElBQUksR0FBRyxFQUFFLEVBQUUsMkNBQTJDO1FBQ3BFLE1BQU1FO0lBQ1I7SUFFQSxPQUFPTjtBQUNULEVBQUU7QUFFRjs7Ozs7OztDQU9DLEdBQ00sTUFBTVEscUJBQXFCLE9BQ2hDVixXQUNBVyxnQkFBZ0Isb0JBQW9CLEVBQ3BDQyxvQkFBb0IsSUFBSSxFQUN4QkMsZUFBZSxLQUFLO0lBRXBCLElBQUk7UUFDRixvREFBb0Q7UUFDcEQsTUFBTUMsU0FBUyxNQUFNZCxVQUFVRjtRQUUvQiwyQkFBMkI7UUFDM0IsSUFBSWdCLE9BQU9qQixLQUFLLEVBQUU7WUFDaEIsb0RBQW9EO1lBQ3BELElBQUlpQixPQUFPakIsS0FBSyxDQUFDTyxJQUFJLEtBQUssV0FBV1EsbUJBQW1CO2dCQUN0RGhCLFFBQVFtQixHQUFHLENBQUMsQ0FBQyx5QkFBeUIsRUFBRUosY0FBYyxxQkFBcUIsQ0FBQztnQkFFNUUsK0RBQStEO2dCQUMvRCxNQUFNSyxjQUFjLE1BQU1oQixVQUFVWCw4REFBYUE7Z0JBRWpELElBQUkyQixZQUFZbkIsS0FBSyxFQUFFO29CQUNyQixPQUFPRSxvQkFBb0JpQixZQUFZbkIsS0FBSyxFQUFFYyxlQUFlRTtnQkFDL0Q7Z0JBRUEsdURBQXVEO2dCQUN2RCxJQUFJSSxNQUFNQyxPQUFPLENBQUNGLFlBQVlWLElBQUksR0FBRztvQkFDbkMsT0FBT1UsWUFBWVYsSUFBSTtnQkFDekIsT0FBTyxJQUFJVSxZQUFZVixJQUFJLEtBQUssUUFBUVUsWUFBWVYsSUFBSSxLQUFLYSxXQUFXO29CQUN0RSxPQUFPLEVBQUUsRUFBRSw2Q0FBNkM7Z0JBQzFELE9BQU87b0JBQ0wsT0FBT0gsWUFBWVYsSUFBSSxFQUFFLDZCQUE2QjtnQkFDeEQ7WUFDRjtZQUVBLE9BQU9QLG9CQUFvQmUsT0FBT2pCLEtBQUssRUFBRWMsZUFBZUU7UUFDMUQ7UUFFQSx1REFBdUQ7UUFDdkQsSUFBSUksTUFBTUMsT0FBTyxDQUFDSixPQUFPUixJQUFJLEdBQUc7WUFDOUIsT0FBT1EsT0FBT1IsSUFBSTtRQUNwQixPQUFPLElBQUlRLE9BQU9SLElBQUksS0FBSyxRQUFRUSxPQUFPUixJQUFJLEtBQUthLFdBQVc7WUFDNUQsT0FBTyxFQUFFLEVBQUUsNkNBQTZDO1FBQzFELE9BQU87WUFDTCxPQUFPTCxPQUFPUixJQUFJLEVBQUUsNkJBQTZCO1FBQ25EO0lBQ0YsRUFBRSxPQUFPVCxPQUFPO1FBQ2QsT0FBT0Usb0JBQW9CRixPQUFPYyxlQUFlRTtJQUNuRDtBQUNGLEVBQUU7QUFFRiwyREFBMkQ7QUFFM0Q7O0NBRUMsR0FDTSxNQUFNTyxpQkFBaUI7SUFDNUI7Ozs7R0FJQyxHQUNELE1BQU1DLGFBQVlDLE1BQU07UUFDdEIsSUFBSSxDQUFDQSxRQUFRLE9BQU87UUFFcEIsT0FBT1osbUJBQ0wsQ0FBQ2EsU0FBV0EsT0FDVEMsSUFBSSxDQUFDLGlCQUNMQyxNQUFNLENBQUMsS0FDUEMsRUFBRSxDQUFDLG9CQUFvQkosUUFDdkJLLE1BQU0sSUFDVDtJQUVKO0lBRUE7Ozs7R0FJQyxHQUNELE1BQU1DLFFBQU9DLFdBQVc7UUFDdEIsT0FBT25CLG1CQUNMLENBQUNhLFNBQVdBLE9BQ1RDLElBQUksQ0FBQyxpQkFDTE0sTUFBTSxDQUFDO2dCQUFDRDthQUFZLEVBQ3BCSixNQUFNLEdBQ05FLE1BQU0sSUFDVCxxQkFDQSxLQUFLLDBEQUEwRDs7SUFFbkU7SUFFQTs7Ozs7R0FLQyxHQUNELE1BQU1JLFFBQU9DLE1BQU0sRUFBRUMsT0FBTztRQUMxQixPQUFPdkIsbUJBQ0wsQ0FBQ2EsU0FBV0EsT0FDVEMsSUFBSSxDQUFDLGlCQUNMTyxNQUFNLENBQUNFLFNBQ1BQLEVBQUUsQ0FBQyxNQUFNTSxRQUNUUCxNQUFNLEdBQ05FLE1BQU0sSUFDVDtJQUVKO0lBRUE7Ozs7R0FJQyxHQUNELE1BQU1PLFNBQVFGLE1BQU07UUFDbEIsT0FBT3RCLG1CQUNMLENBQUNhLFNBQVdBLE9BQ1RDLElBQUksQ0FBQyxpQkFDTEMsTUFBTSxDQUFDLEtBQ1BDLEVBQUUsQ0FBQyxNQUFNTSxRQUNUTCxNQUFNLElBQ1Q7SUFFSjtBQUNGLEVBQUU7QUFFRjs7Q0FFQyxHQUNNLE1BQU1RLG1CQUFtQjtJQUM5Qjs7OztHQUlDLEdBQ0QsTUFBTUMsUUFBT0MsVUFBVSxDQUFDLENBQUM7UUFDdkIsbUNBQW1DO1FBQ25DLE1BQU1DLGVBQWUsQ0FBQ2Y7WUFDcEIsSUFBSWdCLFFBQVFoQixPQUNUQyxJQUFJLENBQUMsY0FDTEMsTUFBTSxDQUFDLENBQUM7Ozs7O1FBS1QsQ0FBQyxFQUNBQyxFQUFFLENBQUMsVUFBVTtZQUVoQix1QkFBdUI7WUFDdkIsSUFBSVcsUUFBUUcsVUFBVSxFQUFFO2dCQUN0QkQsUUFBUUEsTUFBTWIsRUFBRSxDQUFDLGVBQWVXLFFBQVFHLFVBQVU7WUFDcEQ7WUFFQSxJQUFJSCxRQUFRSSxRQUFRLEtBQUt0QixXQUFXO2dCQUNsQ29CLFFBQVFBLE1BQU1HLEdBQUcsQ0FBQyxrQkFBa0JMLFFBQVFJLFFBQVE7WUFDdEQ7WUFFQSxJQUFJSixRQUFRTSxRQUFRLEtBQUt4QixXQUFXO2dCQUNsQ29CLFFBQVFBLE1BQU1LLEdBQUcsQ0FBQyxrQkFBa0JQLFFBQVFNLFFBQVE7WUFDdEQ7WUFFQSxJQUFJTixRQUFRUSxjQUFjLEtBQUssTUFBTTtnQkFDbkNOLFFBQVFBLE1BQU1PLEVBQUUsQ0FBQyxtQkFBbUI7WUFDdEM7WUFFQSxhQUFhO1lBQ2IsTUFBTUMsVUFBVVYsUUFBUVUsT0FBTyxJQUFJO1lBQ25DLE1BQU1DLFlBQVlYLFFBQVFXLFNBQVMsS0FBSztZQUN4Q1QsUUFBUUEsTUFBTVUsS0FBSyxDQUFDRixTQUFTO2dCQUFFQztZQUFVO1lBRXpDLFlBQVk7WUFDWixJQUFJWCxRQUFRYSxLQUFLLEVBQUU7Z0JBQ2pCWCxRQUFRQSxNQUFNVyxLQUFLLENBQUNiLFFBQVFhLEtBQUs7WUFDbkM7WUFFQSxJQUFJYixRQUFRYyxNQUFNLEVBQUU7Z0JBQ2xCWixRQUFRQSxNQUFNYSxLQUFLLENBQUNmLFFBQVFjLE1BQU0sRUFBRWQsUUFBUWMsTUFBTSxHQUFJZCxDQUFBQSxRQUFRYSxLQUFLLElBQUksRUFBQyxJQUFLO1lBQy9FO1lBRUEsT0FBT1g7UUFDVDtRQUVBLE9BQU83QixtQkFBbUI0QixjQUFjLG1CQUFtQixFQUFFO0lBQy9EO0lBRUE7Ozs7R0FJQyxHQUNELE1BQU1KLFNBQVFtQixPQUFPO1FBQ25CLE9BQU8zQyxtQkFDTCxDQUFDYSxTQUFXQSxPQUNUQyxJQUFJLENBQUMsY0FDTEMsTUFBTSxDQUFDLENBQUM7Ozs7O1FBS1QsQ0FBQyxFQUNBQyxFQUFFLENBQUMsTUFBTTJCLFNBQ1QxQixNQUFNLElBQ1Q7SUFFSjtJQUVBOzs7O0dBSUMsR0FDRCxNQUFNQyxRQUFPMEIsU0FBUztRQUNwQixPQUFPNUMsbUJBQ0wsQ0FBQ2EsU0FBV0EsT0FDVEMsSUFBSSxDQUFDLGNBQ0xNLE1BQU0sQ0FBQztnQkFBQ3dCO2FBQVUsRUFDbEI3QixNQUFNLEdBQ05FLE1BQU0sSUFDVDtJQUVKO0lBRUE7Ozs7O0dBS0MsR0FDRCxNQUFNSSxRQUFPc0IsT0FBTyxFQUFFcEIsT0FBTztRQUMzQixPQUFPdkIsbUJBQ0wsQ0FBQ2EsU0FBV0EsT0FDVEMsSUFBSSxDQUFDLGNBQ0xPLE1BQU0sQ0FBQ0UsU0FDUFAsRUFBRSxDQUFDLE1BQU0yQixTQUNUNUIsTUFBTSxHQUNORSxNQUFNLElBQ1Q7SUFFSjtJQUVBOzs7O0dBSUMsR0FDRCxNQUFNNEIsUUFBT0YsT0FBTztRQUNsQixNQUFNdkMsU0FBUyxNQUFNSixtQkFDbkIsQ0FBQ2EsU0FBV0EsT0FDVEMsSUFBSSxDQUFDLGNBQ0wrQixNQUFNLEdBQ043QixFQUFFLENBQUMsTUFBTTJCLFVBQ1o7UUFHRixPQUFPdkMsV0FBVztJQUNwQjtBQUNGLEVBQUU7QUFFRjs7Q0FFQyxHQUNNLE1BQU0wQyxzQkFBc0I7SUFDakM7OztHQUdDLEdBQ0QsTUFBTXBCO1FBQ0osT0FBTzFCLG1CQUNMLENBQUNhLFNBQVdBLE9BQ1RDLElBQUksQ0FBQywwQkFDTEMsTUFBTSxDQUFDLEtBQ1BDLEVBQUUsQ0FBQyxVQUFVLE1BQ2J1QixLQUFLLENBQUMsU0FDVCxzQkFDRyxFQUFFO0lBQ1Q7SUFFQTs7OztHQUlDLEdBQ0QsTUFBTWYsU0FBUU0sVUFBVTtRQUN0QixPQUFPOUIsbUJBQ0wsQ0FBQ2EsU0FBV0EsT0FDVEMsSUFBSSxDQUFDLDBCQUNMQyxNQUFNLENBQUMsS0FDUEMsRUFBRSxDQUFDLE1BQU1jLFlBQ1RiLE1BQU0sSUFDVDtJQUVKO0FBQ0YsRUFBRTtBQUVGOztDQUVDLEdBQ00sTUFBTThCLHNCQUFzQjtJQUNqQzs7OztHQUlDLEdBQ0QsTUFBTTdCLFFBQU84QixZQUFZO1FBQ3ZCLE9BQU9oRCxtQkFDTCxDQUFDYSxTQUFXQSxPQUNUQyxJQUFJLENBQUMsb0JBQ0xNLE1BQU0sQ0FBQztnQkFBQzRCO2FBQWEsRUFDckJqQyxNQUFNLEdBQ05FLE1BQU0sSUFDVCxrQkFDQSxLQUFLLHVCQUF1Qjs7SUFFaEM7SUFFQTs7OztHQUlDLEdBQ0QsTUFBTU8sU0FBUXlCLFVBQVU7UUFDdEIsT0FBT2pELG1CQUNMLENBQUNhLFNBQVdBLE9BQ1RDLElBQUksQ0FBQyxvQkFDTEMsTUFBTSxDQUFDLENBQUM7Ozs7Ozs7Ozs7UUFVVCxDQUFDLEVBQ0FDLEVBQUUsQ0FBQyxNQUFNaUMsWUFDVGhDLE1BQU0sSUFDVDtJQUVKO0lBRUE7Ozs7O0dBS0MsR0FDRCxNQUFNSSxRQUFPNEIsVUFBVSxFQUFFMUIsT0FBTztRQUM5QixPQUFPdkIsbUJBQ0wsQ0FBQ2EsU0FBV0EsT0FDVEMsSUFBSSxDQUFDLG9CQUNMTyxNQUFNLENBQUNFLFNBQ1BQLEVBQUUsQ0FBQyxNQUFNaUMsWUFDVGxDLE1BQU0sR0FDTkUsTUFBTSxJQUNUO0lBRUo7SUFFQTs7OztHQUlDLEdBQ0QsTUFBTWlDLGFBQVk1QixNQUFNO1FBQ3RCLE9BQU90QixtQkFDTCxDQUFDYSxTQUFXQSxPQUNUQyxJQUFJLENBQUMsb0JBQ0xDLE1BQU0sQ0FBQyxDQUFDOzs7Ozs7Ozs7O1FBVVQsQ0FBQyxFQUNBQyxFQUFFLENBQUMsV0FBV00sUUFDZGlCLEtBQUssQ0FBQyxjQUFjO2dCQUFFRCxXQUFXO1lBQU0sSUFDMUMsdUJBQ0csRUFBRTtJQUNUO0FBQ0YsRUFBRTtBQUVGLHdDQUF3QztBQUN4QyxpRUFBZWxELFFBQVFBLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ncm91cHNoYXJlLXByb2plY3QvLi9zcmMvbGliL2RhdGFiYXNlL3N1cGFiYXNlLWNsaWVudC5qcz9jNTc2Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIHNyYy9saWIvZGF0YWJhc2Uvc3VwYWJhc2UtY2xpZW50LmpzXHJcbmltcG9ydCB7IGNyZWF0ZUNsaWVudCB9IGZyb20gJ0BzdXBhYmFzZS9zdXBhYmFzZS1qcyc7XHJcbmltcG9ydCBzdXBhYmFzZUFkbWluIGZyb20gJy4vc3VwYWJhc2UtYWRtaW4tY2xpZW50JztcclxuXHJcbi8vIEluaWNqYWxpemFjamEga2xpZW50YSBTdXBhYmFzZVxyXG5jb25zdCBzdXBhYmFzZVVybCA9IHByb2Nlc3MuZW52Lk5FWFRfUFVCTElDX1NVUEFCQVNFX1VSTDtcclxuY29uc3Qgc3VwYWJhc2VBbm9uS2V5ID0gcHJvY2Vzcy5lbnYuTkVYVF9QVUJMSUNfU1VQQUJBU0VfQU5PTl9LRVk7XHJcblxyXG4vLyBTcHJhd2R6ZW5pZSwgY3p5IHptaWVubmUgxZtyb2Rvd2lza293ZSBzxIUgdXN0YXdpb25lXHJcbmlmICghc3VwYWJhc2VVcmwgfHwgIXN1cGFiYXNlQW5vbktleSkge1xyXG4gIGNvbnNvbGUuZXJyb3IoXHJcbiAgICAnQnJhayB3eW1hZ2FueWNoIHptaWVubnljaCDFm3JvZG93aXNrb3d5Y2g6IE5FWFRfUFVCTElDX1NVUEFCQVNFX1VSTCBsdWIgTkVYVF9QVUJMSUNfU1VQQUJBU0VfQU5PTl9LRVknXHJcbiAgKTtcclxufVxyXG5cclxuLy8gU3RhxYJhIGluc3RhbmNqYSBrbGllbnRhIFN1cGFiYXNlIGRvIHBvbm93bmVnbyB1xbx5Y2lhIHcgY2HFgmVqIGFwbGlrYWNqaVxyXG5jb25zdCBzdXBhYmFzZSA9IGNyZWF0ZUNsaWVudChzdXBhYmFzZVVybCwgc3VwYWJhc2VBbm9uS2V5KTtcclxuXHJcbi8qKlxyXG4gKiBTdGFuZGFyZG93YSBvYnPFgnVnYSBixYLEmWTDs3cgU3VwYWJhc2UgXHJcbiAqIEBwYXJhbSB7RXJyb3J9IGVycm9yIC0gQsWCxIVkIHp3csOzY29ueSBwcnpleiBTdXBhYmFzZVxyXG4gKiBAcGFyYW0ge3N0cmluZ30gb3BlcmF0aW9uIC0gTmF6d2Egb3BlcmFjamksIGt0w7NyYSBzcG93b2Rvd2HFgmEgYsWCxIVkXHJcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gdGhyb3dFcnJvciAtIEN6eSB3eXJ6dWNpxIcgYsWCxIVkICh0cnVlKSBjenkgendyw7NjacSHIG9iaWVrdCBixYLEmWR1IChmYWxzZSlcclxuICogQHJldHVybnMge09iamVjdH0gLSBTdGFuZGFyZG93eSBvYmlla3QgYsWCxJlkdSAoamXFm2xpIHRocm93RXJyb3IgPSBmYWxzZSlcclxuICogQHRocm93cyB7RXJyb3J9IC0gUnp1Y2EgYsWCxIVkIChqZcWbbGkgdGhyb3dFcnJvciA9IHRydWUpXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgaGFuZGxlRGF0YWJhc2VFcnJvciA9IChlcnJvciwgb3BlcmF0aW9uID0gJ2RhdGFiYXNlIG9wZXJhdGlvbicsIHRocm93RXJyb3IgPSBmYWxzZSkgPT4ge1xyXG4gIC8vIFR3b3J6ZW5pZSBzdGFuZGFyZG93ZWdvIG9iaWVrdHUgYsWCxJlkdVxyXG4gIGNvbnN0IHN0YW5kYXJkRXJyb3IgPSB7XHJcbiAgICBlcnJvcjogdHJ1ZSxcclxuICAgIG1lc3NhZ2U6IGVycm9yLm1lc3NhZ2UgfHwgYFd5c3TEhXBpxYIgYsWCxIVkIHBvZGN6YXMgJHtvcGVyYXRpb259YCxcclxuICAgIGNvZGU6IGVycm9yLmNvZGUgfHwgJ3Vua25vd25fZXJyb3InLFxyXG4gICAgZGV0YWlsczogZXJyb3IuZGV0YWlscyB8fCBudWxsLFxyXG4gICAgb3BlcmF0aW9uLFxyXG4gICAgZGF0YTogW10gLy8gRG9kYW5vIHB1c3TEhSB0YWJsaWPEmSBkbGEga29tcGF0eWJpbG5vxZtjaSB6IGtsaWVudGVtXHJcbiAgfTtcclxuXHJcbiAgLy8gWmFwaXN6IHN6Y3plZ8OzxYJvd3kgbG9nIGLFgsSZZHVcclxuICBjb25zb2xlLmVycm9yKGBEYXRhYmFzZSBlcnJvciBkdXJpbmcgJHtvcGVyYXRpb259OmAsIHtcclxuICAgIG1lc3NhZ2U6IGVycm9yLm1lc3NhZ2UsXHJcbiAgICBjb2RlOiBlcnJvci5jb2RlLFxyXG4gICAgZGV0YWlsczogZXJyb3IuZGV0YWlscyxcclxuICAgIHN0YWNrOiBlcnJvci5zdGFja1xyXG4gIH0pO1xyXG5cclxuICBpZiAodGhyb3dFcnJvcikge1xyXG4gICAgLy8gU3R3w7NyeiBub3d5IG9iaWVrdCBixYLEmWR1IHogZG9kYXRrb3d5bWkgbWV0YWRhbnltaVxyXG4gICAgY29uc3QgZW5oYW5jZWRFcnJvciA9IG5ldyBFcnJvcihzdGFuZGFyZEVycm9yLm1lc3NhZ2UpO1xyXG4gICAgZW5oYW5jZWRFcnJvci5jb2RlID0gc3RhbmRhcmRFcnJvci5jb2RlO1xyXG4gICAgZW5oYW5jZWRFcnJvci5kZXRhaWxzID0gc3RhbmRhcmRFcnJvci5kZXRhaWxzO1xyXG4gICAgZW5oYW5jZWRFcnJvci5vcGVyYXRpb24gPSBvcGVyYXRpb247XHJcbiAgICBlbmhhbmNlZEVycm9yLmRhdGEgPSBbXTsgLy8gRG9kYW5vIHB1c3TEhSB0YWJsaWPEmSBkbGEga29tcGF0eWJpbG5vxZtjaVxyXG4gICAgdGhyb3cgZW5oYW5jZWRFcnJvcjtcclxuICB9XHJcblxyXG4gIHJldHVybiBzdGFuZGFyZEVycm9yO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIEJlenBpZWN6bmUgd3lrb25hbmllIG9wZXJhY2ppIFN1cGFiYXNlIHogb2JzxYJ1Z8SFIGLFgsSZZMOzdyBpIGZhbGxiYWNraWVtIGRvIGtsaWVudGEgYWRtaW5pc3RyYXRvcmFcclxuICogQHBhcmFtIHtGdW5jdGlvbn0gb3BlcmF0aW9uIC0gRnVua2NqYSBvcGVyYWNqaSBTdXBhYmFzZSBkbyB3eWtvbmFuaWFcclxuICogQHBhcmFtIHtzdHJpbmd9IG9wZXJhdGlvbk5hbWUgLSBOYXp3YSBvcGVyYWNqaSAoZGxhIGxvZ8OzdylcclxuICogQHBhcmFtIHtib29sZWFufSB1c2VBZG1pbk9uRmFpbHVyZSAtIEN6eSBwcsOzYm93YcSHIHoga2xpZW50ZW0gYWRtaW4gdyBwcnp5cGFka3UgYsWCxJlkdSB1cHJhd25pZcWEXHJcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gdGhyb3dPbkVycm9yIC0gQ3p5IHd5cnp1Y2HEhyBixYLEmWR5IHphbWlhc3QgendyYWNhxIcgbnVsbC9bXSBcclxuICogQHJldHVybnMge1Byb21pc2U8YW55Pn0gLSBXeW5payBvcGVyYWNqaSBsdWIgbnVsbC9bXSB3IHByenlwYWRrdSBixYLEmWR1XHJcbiAqL1xyXG5leHBvcnQgY29uc3Qgc2FmZVF1ZXJ5RXhlY3V0aW9uID0gYXN5bmMgKFxyXG4gIG9wZXJhdGlvbixcclxuICBvcGVyYXRpb25OYW1lID0gJ2RhdGFiYXNlIG9wZXJhdGlvbicsXHJcbiAgdXNlQWRtaW5PbkZhaWx1cmUgPSB0cnVlLFxyXG4gIHRocm93T25FcnJvciA9IGZhbHNlXHJcbikgPT4ge1xyXG4gIHRyeSB7XHJcbiAgICAvLyBQcsOzYmEgd3lrb25hbmlhIG9wZXJhY2ppIHplIHN0YW5kYXJkb3d5bSBrbGllbnRlbVxyXG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgb3BlcmF0aW9uKHN1cGFiYXNlKTtcclxuICAgIFxyXG4gICAgLy8gSmXFm2xpIHd5bmlrIHphd2llcmEgYsWCxIVkXHJcbiAgICBpZiAocmVzdWx0LmVycm9yKSB7XHJcbiAgICAgIC8vIEplxZtsaSB0byBixYLEhWQgdXByYXduaWXFhCBpIG1hbXkgZmFsbGJhY2sgZG8gYWRtaW5hXHJcbiAgICAgIGlmIChyZXN1bHQuZXJyb3IuY29kZSA9PT0gJzQyNTAxJyAmJiB1c2VBZG1pbk9uRmFpbHVyZSkge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKGBQZXJtaXNzaW9uIGRlbmllZCBkdXJpbmcgJHtvcGVyYXRpb25OYW1lfSwgdHJ5aW5nIGFkbWluIGNsaWVudGApO1xyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIFByw7NiYSB3eWtvbmFuaWEgdGVqIHNhbWVqIG9wZXJhY2ppIHoga2xpZW50ZW0gYWRtaW5pc3RyYXRvcmFcclxuICAgICAgICBjb25zdCBhZG1pblJlc3VsdCA9IGF3YWl0IG9wZXJhdGlvbihzdXBhYmFzZUFkbWluKTtcclxuICAgICAgICBcclxuICAgICAgICBpZiAoYWRtaW5SZXN1bHQuZXJyb3IpIHtcclxuICAgICAgICAgIHJldHVybiBoYW5kbGVEYXRhYmFzZUVycm9yKGFkbWluUmVzdWx0LmVycm9yLCBvcGVyYXRpb25OYW1lLCB0aHJvd09uRXJyb3IpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICAvLyBVcGV3bmlqIHNpxJksIMW8ZSB6d3JhY2FteSBkYW5lIHcgb2N6ZWtpd2FueW0gZm9ybWFjaWVcclxuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShhZG1pblJlc3VsdC5kYXRhKSkge1xyXG4gICAgICAgICAgcmV0dXJuIGFkbWluUmVzdWx0LmRhdGE7XHJcbiAgICAgICAgfSBlbHNlIGlmIChhZG1pblJlc3VsdC5kYXRhID09PSBudWxsIHx8IGFkbWluUmVzdWx0LmRhdGEgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgcmV0dXJuIFtdOyAvLyBad3JhY2FteSBwdXN0xIUgdGFibGljxJkgamXFm2xpIG5pZSBtYSBkYW55Y2hcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgcmV0dXJuIGFkbWluUmVzdWx0LmRhdGE7IC8vIFp3cmFjYW15IHBvamVkeW5jenkgb2JpZWt0XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIFxyXG4gICAgICByZXR1cm4gaGFuZGxlRGF0YWJhc2VFcnJvcihyZXN1bHQuZXJyb3IsIG9wZXJhdGlvbk5hbWUsIHRocm93T25FcnJvcik7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIC8vIFVwZXduaWogc2nEmSwgxbxlIHp3cmFjYW15IGRhbmUgdyBvY3pla2l3YW55bSBmb3JtYWNpZVxyXG4gICAgaWYgKEFycmF5LmlzQXJyYXkocmVzdWx0LmRhdGEpKSB7XHJcbiAgICAgIHJldHVybiByZXN1bHQuZGF0YTtcclxuICAgIH0gZWxzZSBpZiAocmVzdWx0LmRhdGEgPT09IG51bGwgfHwgcmVzdWx0LmRhdGEgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICByZXR1cm4gW107IC8vIFp3cmFjYW15IHB1c3TEhSB0YWJsaWPEmSBqZcWbbGkgbmllIG1hIGRhbnljaFxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgcmV0dXJuIHJlc3VsdC5kYXRhOyAvLyBad3JhY2FteSBwb2plZHluY3p5IG9iaWVrdFxyXG4gICAgfVxyXG4gIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICByZXR1cm4gaGFuZGxlRGF0YWJhc2VFcnJvcihlcnJvciwgb3BlcmF0aW9uTmFtZSwgdGhyb3dPbkVycm9yKTtcclxuICB9XHJcbn07XHJcblxyXG4vLyBSZXBvenl0b3JpYSBkb3N0xJlwdSBkbyBkYW55Y2ggLSB3eXNva2kgcG96aW9tIGFic3RyYWtjamlcclxuXHJcbi8qKlxyXG4gKiBSZXBvenl0b3JpdW0gdcW8eXRrb3duaWvDs3dcclxuICovXHJcbmV4cG9ydCBjb25zdCB1c2VyUmVwb3NpdG9yeSA9IHtcclxuICAvKipcclxuICAgKiBQb2JpZXJhIHByb2ZpbCB1xbx5dGtvd25pa2EgbmEgcG9kc3Rhd2llIHpld27EmXRyem5lZ28gSUQgdXdpZXJ6eXRlbG5pYW5pYVxyXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBhdXRoSWQgLSBJRCB1d2llcnp5dGVsbmlhbmlhIChucC4geiBDbGVyaylcclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxPYmplY3R8bnVsbD59IC0gUHJvZmlsIHXFvHl0a293bmlrYSBsdWIgbnVsbFxyXG4gICAqL1xyXG4gIGFzeW5jIGdldEJ5QXV0aElkKGF1dGhJZCkge1xyXG4gICAgaWYgKCFhdXRoSWQpIHJldHVybiBudWxsO1xyXG4gICAgXHJcbiAgICByZXR1cm4gc2FmZVF1ZXJ5RXhlY3V0aW9uKFxyXG4gICAgICAoY2xpZW50KSA9PiBjbGllbnRcclxuICAgICAgICAuZnJvbSgndXNlcl9wcm9maWxlcycpXHJcbiAgICAgICAgLnNlbGVjdCgnKicpXHJcbiAgICAgICAgLmVxKCdleHRlcm5hbF9hdXRoX2lkJywgYXV0aElkKVxyXG4gICAgICAgIC5zaW5nbGUoKSxcclxuICAgICAgJ2dldEJ5QXV0aElkJ1xyXG4gICAgKTtcclxuICB9LFxyXG4gIFxyXG4gIC8qKlxyXG4gICAqIFR3b3J6eSBub3d5IHByb2ZpbCB1xbx5dGtvd25pa2FcclxuICAgKiBAcGFyYW0ge09iamVjdH0gdXNlclByb2ZpbGUgLSBEYW5lIHByb2ZpbHUgdcW8eXRrb3duaWthXHJcbiAgICogQHJldHVybnMge1Byb21pc2U8T2JqZWN0fG51bGw+fSAtIFV0d29yem9ueSBwcm9maWwgdcW8eXRrb3duaWthIGx1YiBudWxsXHJcbiAgICovXHJcbiAgYXN5bmMgY3JlYXRlKHVzZXJQcm9maWxlKSB7XHJcbiAgICByZXR1cm4gc2FmZVF1ZXJ5RXhlY3V0aW9uKFxyXG4gICAgICAoY2xpZW50KSA9PiBjbGllbnRcclxuICAgICAgICAuZnJvbSgndXNlcl9wcm9maWxlcycpXHJcbiAgICAgICAgLmluc2VydChbdXNlclByb2ZpbGVdKVxyXG4gICAgICAgIC5zZWxlY3QoKVxyXG4gICAgICAgIC5zaW5nbGUoKSxcclxuICAgICAgJ2NyZWF0ZVVzZXJQcm9maWxlJyxcclxuICAgICAgdHJ1ZSAvLyB6YXdzemUgdcW8eXdhaiBrbGllbnRhIGFkbWluYSBwcnp5IHR3b3J6ZW5pdSB1xbx5dGtvd25pa2FcclxuICAgICk7XHJcbiAgfSxcclxuICBcclxuICAvKipcclxuICAgKiBBa3R1YWxpenVqZSBpc3RuaWVqxIVjeSBwcm9maWwgdcW8eXRrb3duaWthXHJcbiAgICogQHBhcmFtIHtzdHJpbmd9IHVzZXJJZCAtIElEIHByb2ZpbHUgdcW8eXRrb3duaWthXHJcbiAgICogQHBhcmFtIHtPYmplY3R9IHVwZGF0ZXMgLSBEYW5lIGRvIGFrdHVhbGl6YWNqaVxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPE9iamVjdHxudWxsPn0gLSBaYWt0dWFsaXpvd2FueSBwcm9maWwgdcW8eXRrb3duaWthIGx1YiBudWxsXHJcbiAgICovXHJcbiAgYXN5bmMgdXBkYXRlKHVzZXJJZCwgdXBkYXRlcykge1xyXG4gICAgcmV0dXJuIHNhZmVRdWVyeUV4ZWN1dGlvbihcclxuICAgICAgKGNsaWVudCkgPT4gY2xpZW50XHJcbiAgICAgICAgLmZyb20oJ3VzZXJfcHJvZmlsZXMnKVxyXG4gICAgICAgIC51cGRhdGUodXBkYXRlcylcclxuICAgICAgICAuZXEoJ2lkJywgdXNlcklkKVxyXG4gICAgICAgIC5zZWxlY3QoKVxyXG4gICAgICAgIC5zaW5nbGUoKSxcclxuICAgICAgJ3VwZGF0ZVVzZXJQcm9maWxlJ1xyXG4gICAgKTtcclxuICB9LFxyXG4gIFxyXG4gIC8qKlxyXG4gICAqIFBvYmllcmEgcHJvZmlsIHXFvHl0a293bmlrYSBwbyBJRFxyXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB1c2VySWQgLSBJRCBwcm9maWx1IHXFvHl0a293bmlrYVxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPE9iamVjdHxudWxsPn0gLSBQcm9maWwgdcW8eXRrb3duaWthIGx1YiBudWxsXHJcbiAgICovXHJcbiAgYXN5bmMgZ2V0QnlJZCh1c2VySWQpIHtcclxuICAgIHJldHVybiBzYWZlUXVlcnlFeGVjdXRpb24oXHJcbiAgICAgIChjbGllbnQpID0+IGNsaWVudFxyXG4gICAgICAgIC5mcm9tKCd1c2VyX3Byb2ZpbGVzJylcclxuICAgICAgICAuc2VsZWN0KCcqJylcclxuICAgICAgICAuZXEoJ2lkJywgdXNlcklkKVxyXG4gICAgICAgIC5zaW5nbGUoKSxcclxuICAgICAgJ2dldFVzZXJCeUlkJ1xyXG4gICAgKTtcclxuICB9XHJcbn07XHJcblxyXG4vKipcclxuICogUmVwb3p5dG9yaXVtIG9mZXJ0IHN1YnNrcnlwY2ppXHJcbiAqL1xyXG5leHBvcnQgY29uc3Qgb2ZmZXJzUmVwb3NpdG9yeSA9IHtcclxuICAvKipcclxuICAgKiBQb2JpZXJhIG9mZXJ0eSBzdWJza3J5cGNqaSB6IGZpbHRyb3dhbmllbVxyXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBmaWx0ZXJzIC0gRmlsdHJ5IGRvIHphc3Rvc293YW5pYVxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPEFycmF5Pn0gLSBMaXN0YSBvZmVydFxyXG4gICAqL1xyXG4gIGFzeW5jIGdldEFsbChmaWx0ZXJzID0ge30pIHtcclxuICAgIC8vIFByenlnb3Rvd2FuaWUgYmF6b3dlZ28gemFweXRhbmlhXHJcbiAgICBjb25zdCBxdWVyeUJ1aWxkZXIgPSAoY2xpZW50KSA9PiB7XHJcbiAgICAgIGxldCBxdWVyeSA9IGNsaWVudFxyXG4gICAgICAgIC5mcm9tKCdncm91cF9zdWJzJylcclxuICAgICAgICAuc2VsZWN0KGBcclxuICAgICAgICAgICosXHJcbiAgICAgICAgICBzdWJzY3JpcHRpb25fcGxhdGZvcm1zKCopLFxyXG4gICAgICAgICAgZ3JvdXBzKGlkLCBuYW1lKSxcclxuICAgICAgICAgIG93bmVyOmdyb3VwcyFpbm5lcihvd25lcl9pZCwgdXNlcl9wcm9maWxlcyFpbm5lcihpZCwgZGlzcGxheV9uYW1lLCBhdmF0YXJfdXJsLCByYXRpbmdfYXZnLCByYXRpbmdfY291bnQsIHZlcmlmaWNhdGlvbl9sZXZlbCkpXHJcbiAgICAgICAgYClcclxuICAgICAgICAuZXEoJ3N0YXR1cycsICdhY3RpdmUnKTtcclxuICAgICAgXHJcbiAgICAgIC8vIFphc3Rvc293YW5pZSBmaWx0csOzd1xyXG4gICAgICBpZiAoZmlsdGVycy5wbGF0Zm9ybUlkKSB7XHJcbiAgICAgICAgcXVlcnkgPSBxdWVyeS5lcSgncGxhdGZvcm1faWQnLCBmaWx0ZXJzLnBsYXRmb3JtSWQpO1xyXG4gICAgICB9XHJcbiAgICAgIFxyXG4gICAgICBpZiAoZmlsdGVycy5taW5QcmljZSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgcXVlcnkgPSBxdWVyeS5ndGUoJ3ByaWNlX3Blcl9zbG90JywgZmlsdGVycy5taW5QcmljZSk7XHJcbiAgICAgIH1cclxuICAgICAgXHJcbiAgICAgIGlmIChmaWx0ZXJzLm1heFByaWNlICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICBxdWVyeSA9IHF1ZXJ5Lmx0ZSgncHJpY2VfcGVyX3Nsb3QnLCBmaWx0ZXJzLm1heFByaWNlKTtcclxuICAgICAgfVxyXG4gICAgICBcclxuICAgICAgaWYgKGZpbHRlcnMuYXZhaWxhYmxlU2xvdHMgPT09IHRydWUpIHtcclxuICAgICAgICBxdWVyeSA9IHF1ZXJ5Lmd0KCdzbG90c19hdmFpbGFibGUnLCAwKTtcclxuICAgICAgfVxyXG4gICAgICBcclxuICAgICAgLy8gU29ydG93YW5pZVxyXG4gICAgICBjb25zdCBvcmRlckJ5ID0gZmlsdGVycy5vcmRlckJ5IHx8ICdjcmVhdGVkX2F0JztcclxuICAgICAgY29uc3QgYXNjZW5kaW5nID0gZmlsdGVycy5hc2NlbmRpbmcgPT09IHRydWU7XHJcbiAgICAgIHF1ZXJ5ID0gcXVlcnkub3JkZXIob3JkZXJCeSwgeyBhc2NlbmRpbmcgfSk7XHJcbiAgICAgIFxyXG4gICAgICAvLyBQYWdpbmFjamFcclxuICAgICAgaWYgKGZpbHRlcnMubGltaXQpIHtcclxuICAgICAgICBxdWVyeSA9IHF1ZXJ5LmxpbWl0KGZpbHRlcnMubGltaXQpO1xyXG4gICAgICB9XHJcbiAgICAgIFxyXG4gICAgICBpZiAoZmlsdGVycy5vZmZzZXQpIHtcclxuICAgICAgICBxdWVyeSA9IHF1ZXJ5LnJhbmdlKGZpbHRlcnMub2Zmc2V0LCBmaWx0ZXJzLm9mZnNldCArIChmaWx0ZXJzLmxpbWl0IHx8IDEwKSAtIDEpO1xyXG4gICAgICB9XHJcbiAgICAgIFxyXG4gICAgICByZXR1cm4gcXVlcnk7XHJcbiAgICB9O1xyXG4gICAgXHJcbiAgICByZXR1cm4gc2FmZVF1ZXJ5RXhlY3V0aW9uKHF1ZXJ5QnVpbGRlciwgJ2dldEFsbE9mZmVycycpIHx8IFtdO1xyXG4gIH0sXHJcbiAgXHJcbiAgLyoqXHJcbiAgICogUG9iaWVyYSBvZmVydMSZIHN1YnNrcnlwY2ppIHBvIElEXHJcbiAgICogQHBhcmFtIHtzdHJpbmd9IG9mZmVySWQgLSBJRCBvZmVydHlcclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxPYmplY3R8bnVsbD59IC0gT2ZlcnRhIHN1YnNrcnlwY2ppIGx1YiBudWxsXHJcbiAgICovXHJcbiAgYXN5bmMgZ2V0QnlJZChvZmZlcklkKSB7XHJcbiAgICByZXR1cm4gc2FmZVF1ZXJ5RXhlY3V0aW9uKFxyXG4gICAgICAoY2xpZW50KSA9PiBjbGllbnRcclxuICAgICAgICAuZnJvbSgnZ3JvdXBfc3VicycpXHJcbiAgICAgICAgLnNlbGVjdChgXHJcbiAgICAgICAgICAqLFxyXG4gICAgICAgICAgc3Vic2NyaXB0aW9uX3BsYXRmb3JtcygqKSxcclxuICAgICAgICAgIGdyb3VwcyhpZCwgbmFtZSwgZGVzY3JpcHRpb24pLFxyXG4gICAgICAgICAgb3duZXI6Z3JvdXBzIWlubmVyKG93bmVyX2lkLCB1c2VyX3Byb2ZpbGVzIWlubmVyKGlkLCBkaXNwbGF5X25hbWUsIGF2YXRhcl91cmwsIHJhdGluZ19hdmcsIHJhdGluZ19jb3VudCwgdmVyaWZpY2F0aW9uX2xldmVsLCBiaW8pKVxyXG4gICAgICAgIGApXHJcbiAgICAgICAgLmVxKCdpZCcsIG9mZmVySWQpXHJcbiAgICAgICAgLnNpbmdsZSgpLFxyXG4gICAgICAnZ2V0T2ZmZXJCeUlkJ1xyXG4gICAgKTtcclxuICB9LFxyXG4gIFxyXG4gIC8qKlxyXG4gICAqIFR3b3J6eSBub3fEhSBvZmVydMSZIHN1YnNrcnlwY2ppXHJcbiAgICogQHBhcmFtIHtPYmplY3R9IG9mZmVyRGF0YSAtIERhbmUgb2ZlcnR5XHJcbiAgICogQHJldHVybnMge1Byb21pc2U8T2JqZWN0fG51bGw+fSAtIFV0d29yem9uYSBvZmVydGEgbHViIG51bGxcclxuICAgKi9cclxuICBhc3luYyBjcmVhdGUob2ZmZXJEYXRhKSB7XHJcbiAgICByZXR1cm4gc2FmZVF1ZXJ5RXhlY3V0aW9uKFxyXG4gICAgICAoY2xpZW50KSA9PiBjbGllbnRcclxuICAgICAgICAuZnJvbSgnZ3JvdXBfc3VicycpXHJcbiAgICAgICAgLmluc2VydChbb2ZmZXJEYXRhXSlcclxuICAgICAgICAuc2VsZWN0KClcclxuICAgICAgICAuc2luZ2xlKCksXHJcbiAgICAgICdjcmVhdGVPZmZlcidcclxuICAgICk7XHJcbiAgfSxcclxuICBcclxuICAvKipcclxuICAgKiBBa3R1YWxpenVqZSBvZmVydMSZIHN1YnNrcnlwY2ppXHJcbiAgICogQHBhcmFtIHtzdHJpbmd9IG9mZmVySWQgLSBJRCBvZmVydHlcclxuICAgKiBAcGFyYW0ge09iamVjdH0gdXBkYXRlcyAtIERhbmUgZG8gYWt0dWFsaXphY2ppXHJcbiAgICogQHJldHVybnMge1Byb21pc2U8T2JqZWN0fG51bGw+fSAtIFpha3R1YWxpem93YW5hIG9mZXJ0YSBsdWIgbnVsbCBcclxuICAgKi9cclxuICBhc3luYyB1cGRhdGUob2ZmZXJJZCwgdXBkYXRlcykge1xyXG4gICAgcmV0dXJuIHNhZmVRdWVyeUV4ZWN1dGlvbihcclxuICAgICAgKGNsaWVudCkgPT4gY2xpZW50XHJcbiAgICAgICAgLmZyb20oJ2dyb3VwX3N1YnMnKVxyXG4gICAgICAgIC51cGRhdGUodXBkYXRlcylcclxuICAgICAgICAuZXEoJ2lkJywgb2ZmZXJJZClcclxuICAgICAgICAuc2VsZWN0KClcclxuICAgICAgICAuc2luZ2xlKCksXHJcbiAgICAgICd1cGRhdGVPZmZlcidcclxuICAgICk7XHJcbiAgfSxcclxuICBcclxuICAvKipcclxuICAgKiBVc3V3YSBvZmVydMSZIHN1YnNrcnlwY2ppXHJcbiAgICogQHBhcmFtIHtzdHJpbmd9IG9mZmVySWQgLSBJRCBvZmVydHlcclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxib29sZWFuPn0gLSBDenkgb3BlcmFjamEgc2nEmSBwb3dpb2TFgmFcclxuICAgKi9cclxuICBhc3luYyBkZWxldGUob2ZmZXJJZCkge1xyXG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgc2FmZVF1ZXJ5RXhlY3V0aW9uKFxyXG4gICAgICAoY2xpZW50KSA9PiBjbGllbnRcclxuICAgICAgICAuZnJvbSgnZ3JvdXBfc3VicycpXHJcbiAgICAgICAgLmRlbGV0ZSgpXHJcbiAgICAgICAgLmVxKCdpZCcsIG9mZmVySWQpLFxyXG4gICAgICAnZGVsZXRlT2ZmZXInXHJcbiAgICApO1xyXG4gICAgXHJcbiAgICByZXR1cm4gcmVzdWx0ICE9PSBudWxsO1xyXG4gIH1cclxufTtcclxuXHJcbi8qKlxyXG4gKiBSZXBvenl0b3JpdW0gcGxhdGZvcm0gc3Vic2tyeXBjamlcclxuICovXHJcbmV4cG9ydCBjb25zdCBwbGF0Zm9ybXNSZXBvc2l0b3J5ID0ge1xyXG4gIC8qKlxyXG4gICAqIFBvYmllcmEgd3N6eXN0a2llIGFrdHl3bmUgcGxhdGZvcm15IHN1YnNrcnlwY2ppXHJcbiAgICogQHJldHVybnMge1Byb21pc2U8QXJyYXk+fSAtIExpc3RhIHBsYXRmb3JtXHJcbiAgICovXHJcbiAgYXN5bmMgZ2V0QWxsKCkge1xyXG4gICAgcmV0dXJuIHNhZmVRdWVyeUV4ZWN1dGlvbihcclxuICAgICAgKGNsaWVudCkgPT4gY2xpZW50XHJcbiAgICAgICAgLmZyb20oJ3N1YnNjcmlwdGlvbl9wbGF0Zm9ybXMnKVxyXG4gICAgICAgIC5zZWxlY3QoJyonKVxyXG4gICAgICAgIC5lcSgnYWN0aXZlJywgdHJ1ZSlcclxuICAgICAgICAub3JkZXIoJ25hbWUnKSxcclxuICAgICAgJ2dldEFsbFBsYXRmb3JtcydcclxuICAgICkgfHwgW107XHJcbiAgfSxcclxuICBcclxuICAvKipcclxuICAgKiBQb2JpZXJhIHBsYXRmb3JtxJkgcG8gSURcclxuICAgKiBAcGFyYW0ge3N0cmluZ30gcGxhdGZvcm1JZCAtIElEIHBsYXRmb3JteVxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPE9iamVjdHxudWxsPn0gLSBQbGF0Zm9ybWEgbHViIG51bGxcclxuICAgKi9cclxuICBhc3luYyBnZXRCeUlkKHBsYXRmb3JtSWQpIHtcclxuICAgIHJldHVybiBzYWZlUXVlcnlFeGVjdXRpb24oXHJcbiAgICAgIChjbGllbnQpID0+IGNsaWVudFxyXG4gICAgICAgIC5mcm9tKCdzdWJzY3JpcHRpb25fcGxhdGZvcm1zJylcclxuICAgICAgICAuc2VsZWN0KCcqJylcclxuICAgICAgICAuZXEoJ2lkJywgcGxhdGZvcm1JZClcclxuICAgICAgICAuc2luZ2xlKCksXHJcbiAgICAgICdnZXRQbGF0Zm9ybUJ5SWQnXHJcbiAgICApO1xyXG4gIH1cclxufTtcclxuXHJcbi8qKlxyXG4gKiBSZXBvenl0b3JpdW0gemFrdXDDs3dcclxuICovXHJcbmV4cG9ydCBjb25zdCBwdXJjaGFzZXNSZXBvc2l0b3J5ID0ge1xyXG4gIC8qKlxyXG4gICAqIFR3b3J6eSBub3d5IHpha3VwXHJcbiAgICogQHBhcmFtIHtPYmplY3R9IHB1cmNoYXNlRGF0YSAtIERhbmUgemFrdXB1XHJcbiAgICogQHJldHVybnMge1Byb21pc2U8T2JqZWN0fG51bGw+fSAtIFV0d29yem9ueSB6YWt1cCBsdWIgbnVsbFxyXG4gICAqL1xyXG4gIGFzeW5jIGNyZWF0ZShwdXJjaGFzZURhdGEpIHtcclxuICAgIHJldHVybiBzYWZlUXVlcnlFeGVjdXRpb24oXHJcbiAgICAgIChjbGllbnQpID0+IGNsaWVudFxyXG4gICAgICAgIC5mcm9tKCdwdXJjaGFzZV9yZWNvcmRzJylcclxuICAgICAgICAuaW5zZXJ0KFtwdXJjaGFzZURhdGFdKVxyXG4gICAgICAgIC5zZWxlY3QoKVxyXG4gICAgICAgIC5zaW5nbGUoKSxcclxuICAgICAgJ2NyZWF0ZVB1cmNoYXNlJyxcclxuICAgICAgdHJ1ZSAvLyB1xbx5d2FqIGtsaWVudGEgYWRtaW5cclxuICAgICk7XHJcbiAgfSxcclxuICBcclxuICAvKipcclxuICAgKiBQb2JpZXJhIHpha3VwIHBvIElEXHJcbiAgICogQHBhcmFtIHtzdHJpbmd9IHB1cmNoYXNlSWQgLSBJRCB6YWt1cHVcclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxPYmplY3R8bnVsbD59IC0gWmFrdXAgbHViIG51bGxcclxuICAgKi9cclxuICBhc3luYyBnZXRCeUlkKHB1cmNoYXNlSWQpIHtcclxuICAgIHJldHVybiBzYWZlUXVlcnlFeGVjdXRpb24oXHJcbiAgICAgIChjbGllbnQpID0+IGNsaWVudFxyXG4gICAgICAgIC5mcm9tKCdwdXJjaGFzZV9yZWNvcmRzJylcclxuICAgICAgICAuc2VsZWN0KGBcclxuICAgICAgICAgICosXHJcbiAgICAgICAgICBncm91cF9zdWI6Z3JvdXBfc3VicyhcclxuICAgICAgICAgICAgKixcclxuICAgICAgICAgICAgc3Vic2NyaXB0aW9uX3BsYXRmb3JtcyhcclxuICAgICAgICAgICAgICBpZCxcclxuICAgICAgICAgICAgICBuYW1lLFxyXG4gICAgICAgICAgICAgIGljb25cclxuICAgICAgICAgICAgKVxyXG4gICAgICAgICAgKVxyXG4gICAgICAgIGApXHJcbiAgICAgICAgLmVxKCdpZCcsIHB1cmNoYXNlSWQpXHJcbiAgICAgICAgLnNpbmdsZSgpLFxyXG4gICAgICAnZ2V0UHVyY2hhc2VCeUlkJ1xyXG4gICAgKTtcclxuICB9LFxyXG4gIFxyXG4gIC8qKlxyXG4gICAqIEFrdHVhbGl6dWplIHpha3VwXHJcbiAgICogQHBhcmFtIHtzdHJpbmd9IHB1cmNoYXNlSWQgLSBJRCB6YWt1cHVcclxuICAgKiBAcGFyYW0ge09iamVjdH0gdXBkYXRlcyAtIERhbmUgZG8gYWt0dWFsaXphY2ppXHJcbiAgICogQHJldHVybnMge1Byb21pc2U8T2JqZWN0fG51bGw+fSAtIFpha3R1YWxpem93YW55IHpha3VwIGx1YiBudWxsXHJcbiAgICovXHJcbiAgYXN5bmMgdXBkYXRlKHB1cmNoYXNlSWQsIHVwZGF0ZXMpIHtcclxuICAgIHJldHVybiBzYWZlUXVlcnlFeGVjdXRpb24oXHJcbiAgICAgIChjbGllbnQpID0+IGNsaWVudFxyXG4gICAgICAgIC5mcm9tKCdwdXJjaGFzZV9yZWNvcmRzJylcclxuICAgICAgICAudXBkYXRlKHVwZGF0ZXMpXHJcbiAgICAgICAgLmVxKCdpZCcsIHB1cmNoYXNlSWQpXHJcbiAgICAgICAgLnNlbGVjdCgpXHJcbiAgICAgICAgLnNpbmdsZSgpLFxyXG4gICAgICAndXBkYXRlUHVyY2hhc2UnXHJcbiAgICApO1xyXG4gIH0sXHJcbiAgXHJcbiAgLyoqXHJcbiAgICogUG9iaWVyYSB6YWt1cHkgdcW8eXRrb3duaWthXHJcbiAgICogQHBhcmFtIHtzdHJpbmd9IHVzZXJJZCAtIElEIHXFvHl0a293bmlrYVxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPEFycmF5Pn0gLSBMaXN0YSB6YWt1cMOzd1xyXG4gICAqL1xyXG4gIGFzeW5jIGdldEJ5VXNlcklkKHVzZXJJZCkge1xyXG4gICAgcmV0dXJuIHNhZmVRdWVyeUV4ZWN1dGlvbihcclxuICAgICAgKGNsaWVudCkgPT4gY2xpZW50XHJcbiAgICAgICAgLmZyb20oJ3B1cmNoYXNlX3JlY29yZHMnKVxyXG4gICAgICAgIC5zZWxlY3QoYFxyXG4gICAgICAgICAgKixcclxuICAgICAgICAgIGdyb3VwX3N1Yjpncm91cF9zdWJzKFxyXG4gICAgICAgICAgICAqLFxyXG4gICAgICAgICAgICBzdWJzY3JpcHRpb25fcGxhdGZvcm1zKFxyXG4gICAgICAgICAgICAgIGlkLFxyXG4gICAgICAgICAgICAgIG5hbWUsXHJcbiAgICAgICAgICAgICAgaWNvblxyXG4gICAgICAgICAgICApXHJcbiAgICAgICAgICApXHJcbiAgICAgICAgYClcclxuICAgICAgICAuZXEoJ3VzZXJfaWQnLCB1c2VySWQpXHJcbiAgICAgICAgLm9yZGVyKCdjcmVhdGVkX2F0JywgeyBhc2NlbmRpbmc6IGZhbHNlIH0pLFxyXG4gICAgICAnZ2V0VXNlclB1cmNoYXNlcydcclxuICAgICkgfHwgW107XHJcbiAgfVxyXG59O1xyXG5cclxuLy8gRWtzcG9ydCBwb2RzdGF3b3dlZ28ga2xpZW50YSBTdXBhYmFzZVxyXG5leHBvcnQgZGVmYXVsdCBzdXBhYmFzZTsiXSwibmFtZXMiOlsiY3JlYXRlQ2xpZW50Iiwic3VwYWJhc2VBZG1pbiIsInN1cGFiYXNlVXJsIiwicHJvY2VzcyIsImVudiIsIk5FWFRfUFVCTElDX1NVUEFCQVNFX1VSTCIsInN1cGFiYXNlQW5vbktleSIsIk5FWFRfUFVCTElDX1NVUEFCQVNFX0FOT05fS0VZIiwiY29uc29sZSIsImVycm9yIiwic3VwYWJhc2UiLCJoYW5kbGVEYXRhYmFzZUVycm9yIiwib3BlcmF0aW9uIiwidGhyb3dFcnJvciIsInN0YW5kYXJkRXJyb3IiLCJtZXNzYWdlIiwiY29kZSIsImRldGFpbHMiLCJkYXRhIiwic3RhY2siLCJlbmhhbmNlZEVycm9yIiwiRXJyb3IiLCJzYWZlUXVlcnlFeGVjdXRpb24iLCJvcGVyYXRpb25OYW1lIiwidXNlQWRtaW5PbkZhaWx1cmUiLCJ0aHJvd09uRXJyb3IiLCJyZXN1bHQiLCJsb2ciLCJhZG1pblJlc3VsdCIsIkFycmF5IiwiaXNBcnJheSIsInVuZGVmaW5lZCIsInVzZXJSZXBvc2l0b3J5IiwiZ2V0QnlBdXRoSWQiLCJhdXRoSWQiLCJjbGllbnQiLCJmcm9tIiwic2VsZWN0IiwiZXEiLCJzaW5nbGUiLCJjcmVhdGUiLCJ1c2VyUHJvZmlsZSIsImluc2VydCIsInVwZGF0ZSIsInVzZXJJZCIsInVwZGF0ZXMiLCJnZXRCeUlkIiwib2ZmZXJzUmVwb3NpdG9yeSIsImdldEFsbCIsImZpbHRlcnMiLCJxdWVyeUJ1aWxkZXIiLCJxdWVyeSIsInBsYXRmb3JtSWQiLCJtaW5QcmljZSIsImd0ZSIsIm1heFByaWNlIiwibHRlIiwiYXZhaWxhYmxlU2xvdHMiLCJndCIsIm9yZGVyQnkiLCJhc2NlbmRpbmciLCJvcmRlciIsImxpbWl0Iiwib2Zmc2V0IiwicmFuZ2UiLCJvZmZlcklkIiwib2ZmZXJEYXRhIiwiZGVsZXRlIiwicGxhdGZvcm1zUmVwb3NpdG9yeSIsInB1cmNoYXNlc1JlcG9zaXRvcnkiLCJwdXJjaGFzZURhdGEiLCJwdXJjaGFzZUlkIiwiZ2V0QnlVc2VySWQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/database/supabase-client.js\n");

/***/ }),

/***/ "(rsc)/./src/lib/security/encryption/encryption-service.js":
/*!***********************************************************!*\
  !*** ./src/lib/security/encryption/encryption-service.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EncryptionService: () => (/* binding */ EncryptionService),\n/* harmony export */   generateMasterKey: () => (/* binding */ generateMasterKey),\n/* harmony export */   simpleDecrypt: () => (/* binding */ simpleDecrypt),\n/* harmony export */   simpleEncrypt: () => (/* binding */ simpleEncrypt)\n/* harmony export */ });\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! crypto */ \"crypto\");\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(crypto__WEBPACK_IMPORTED_MODULE_0__);\n\n/**\r\n * Serwis szyfrowania do bezpiecznego zarządzania danymi dostępowymi\r\n * Implementacja wykorzystująca AES-256-GCM dla lepszego bezpieczeństwa\r\n */ class EncryptionService {\n    /**\r\n   * Inicjalizuje serwis szyfrowania\r\n   * @param {string} masterKey - Główny klucz szyfrowania (32 bajty jako hex)\r\n   * @param {Object} options - Opcje konfiguracyjne\r\n   */ constructor(masterKey, options = {}){\n        if (!masterKey) {\n            throw new Error(\"Master key is required for encryption service\");\n        }\n        // Konwertuj klucz hex na bufor\n        this.masterKey = Buffer.from(masterKey, \"hex\");\n        // Sprawdź długość klucza (AES-256 wymaga 32 bajtów)\n        if (this.masterKey.length !== 32) {\n            throw new Error(\"Master key must be 32 bytes (64 hex characters) for AES-256\");\n        }\n        this.algorithm = options.algorithm || \"aes-256-gcm\";\n        this.version = \"2.0\"; // Wersja formatu szyfrowania\n    }\n    /**\r\n   * Szyfruje dane\r\n   * @param {string} data - Dane do zaszyfrowania\r\n   * @param {Buffer} aad - Dodatkowe dane uwierzytelniające (opcjonalne)\r\n   * @returns {Object} - Obiekt z zaszyfrowanymi danymi i metadanymi\r\n   */ encrypt(data, aad = null) {\n        if (!data) {\n            throw new Error(\"Data is required for encryption\");\n        }\n        try {\n            // Generuj losowy wektor inicjalizacyjny (IV)\n            const iv = crypto__WEBPACK_IMPORTED_MODULE_0___default().randomBytes(16);\n            // Utwórz szyfr AES-256-GCM\n            const cipher = crypto__WEBPACK_IMPORTED_MODULE_0___default().createCipheriv(this.algorithm, this.masterKey, iv);\n            // Dodaj AAD jeśli dostarczone (dodatkowe dane uwierzytelniające)\n            if (aad) {\n                cipher.setAAD(aad);\n            }\n            // Zaszyfruj dane\n            let encrypted = cipher.update(data, \"utf8\", \"base64\");\n            encrypted += cipher.final(\"base64\");\n            // Pobierz tag uwierzytelniania\n            const authTag = cipher.getAuthTag();\n            // Zwróć kompletny pakiet zaszyfrowanych danych\n            return {\n                encryptedData: encrypted,\n                iv: iv.toString(\"base64\"),\n                authTag: authTag.toString(\"base64\"),\n                algorithm: this.algorithm,\n                version: this.version,\n                hasAAD: !!aad\n            };\n        } catch (error) {\n            console.error(\"Encryption error:\", error);\n            throw new Error(\"Failed to encrypt data\");\n        }\n    }\n    /**\r\n   * Deszyfruje dane\r\n   * @param {Object} encryptedPackage - Pakiet zaszyfrowanych danych\r\n   * @param {Buffer} aad - Dodatkowe dane uwierzytelniające (opcjonalne)\r\n   * @returns {string} - Odszyfrowane dane\r\n   */ decrypt(encryptedPackage, aad = null) {\n        if (!encryptedPackage || !encryptedPackage.encryptedData) {\n            throw new Error(\"Encrypted data package is required for decryption\");\n        }\n        try {\n            // Obsługa różnych wersji formatu szyfrowania\n            if (encryptedPackage.version && encryptedPackage.version !== this.version) {\n                // Implementacja obsługi starszych formatów szyfrowania\n                return this.decryptLegacy(encryptedPackage);\n            }\n            // Utwórz deszyfrator\n            const decipher = crypto__WEBPACK_IMPORTED_MODULE_0___default().createDecipheriv(encryptedPackage.algorithm || this.algorithm, this.masterKey, Buffer.from(encryptedPackage.iv, \"base64\"));\n            // Ustaw tag uwierzytelniania\n            decipher.setAuthTag(Buffer.from(encryptedPackage.authTag, \"base64\"));\n            // Dodaj AAD jeśli było używane\n            if (encryptedPackage.hasAAD && aad) {\n                decipher.setAAD(aad);\n            }\n            // Deszyfruj dane\n            let decrypted = decipher.update(encryptedPackage.encryptedData, \"base64\", \"utf8\");\n            decrypted += decipher.final(\"utf8\");\n            return decrypted;\n        } catch (error) {\n            console.error(\"Decryption error:\", error);\n            // Bardziej opisowe komunikaty błędów\n            if (error.message.includes(\"Unsupported state or unable to authenticate data\")) {\n                throw new Error(\"Authentication failed: the data may have been tampered with\");\n            } else if (error.message.includes(\"bad decrypt\")) {\n                throw new Error(\"Decryption failed: invalid key or corrupted data\");\n            } else {\n                throw new Error(`Failed to decrypt data: ${error.message}`);\n            }\n        }\n    }\n    /**\r\n   * Deszyfruje dane w starszym formacie\r\n   * @param {Object} encryptedPackage - Pakiet zaszyfrowanych danych\r\n   * @returns {string} - Odszyfrowane dane\r\n   */ decryptLegacy(encryptedPackage) {\n        // Obsługa formatu v1.0 (bez AAD, starsza implementacja)\n        if (encryptedPackage.version === \"1.0\") {\n            try {\n                // Starsza implementacja mogła używać IV w innym formacie\n                const iv = Buffer.from(encryptedPackage.iv, \"base64\");\n                // Utwórz deszyfrator dla starego formatu\n                const decipher = crypto__WEBPACK_IMPORTED_MODULE_0___default().createDecipheriv(encryptedPackage.algorithm || \"aes-256-gcm\", this.masterKey, iv);\n                // Ustaw tag uwierzytelniania (mógł być zapisany w innym formacie)\n                decipher.setAuthTag(Buffer.from(encryptedPackage.authTag || encryptedPackage.tag, \"base64\"));\n                // Deszyfruj dane\n                let decrypted = decipher.update(encryptedPackage.encryptedData, \"base64\", \"utf8\");\n                decrypted += decipher.final(\"utf8\");\n                return decrypted;\n            } catch (error) {\n                console.error(\"Legacy decryption error:\", error);\n                throw new Error(\"Failed to decrypt legacy data format\");\n            }\n        }\n        // Nieznany format\n        throw new Error(`Unsupported encryption format version: ${encryptedPackage.version}`);\n    }\n    /**\r\n   * Szyfruje instrukcje dostępowe dla oferty\r\n   * @param {string} instructions - Instrukcje do zaszyfrowania\r\n   * @param {string} groupSubId - ID oferty (do AAD)\r\n   * @returns {Object} - Zaszyfrowany pakiet\r\n   */ encryptAccessInstructions(instructions, groupSubId) {\n        if (!instructions) {\n            throw new Error(\"Instructions content is required\");\n        }\n        if (!groupSubId) {\n            throw new Error(\"Group subscription ID is required for context\");\n        }\n        // Przygotuj AAD (dodatkowe dane uwierzytelniające) z ID oferty\n        // AAD nie jest szyfrowane, ale zapewnia integralność kontekstu\n        const aad = Buffer.from(groupSubId);\n        // Zaszyfruj instrukcje z AAD\n        const encryptedPackage = this.encrypt(instructions, aad);\n        // Dodaj metadane\n        return {\n            ...encryptedPackage,\n            groupSubId,\n            timestamp: new Date().toISOString()\n        };\n    }\n    /**\r\n   * Deszyfruje instrukcje dostępowe\r\n   * @param {Object} encryptedPackage - Zaszyfrowany pakiet\r\n   * @param {string} expectedGroupSubId - Oczekiwane ID oferty do weryfikacji\r\n   * @returns {string} - Odszyfrowane instrukcje\r\n   */ decryptAccessInstructions(encryptedPackage, expectedGroupSubId) {\n        if (!encryptedPackage) {\n            throw new Error(\"Encrypted package is required\");\n        }\n        if (!expectedGroupSubId) {\n            throw new Error(\"Expected group subscription ID is required for verification\");\n        }\n        // Sprawdź, czy pakiet zawiera prawidłowe ID oferty\n        if (encryptedPackage.groupSubId !== expectedGroupSubId) {\n            throw new Error(\"Security context mismatch: incorrect group subscription ID\");\n        }\n        // Przygotuj AAD dla weryfikacji\n        const aad = Buffer.from(expectedGroupSubId);\n        // Deszyfruj instrukcje z weryfikacją AAD\n        return this.decrypt(encryptedPackage, aad);\n    }\n    /**\r\n   * Format współczesny: szyfruje dane używając simple API\r\n   * Dla prostszych przypadków użycia\r\n   * @param {string} data - Dane do zaszyfrowania\r\n   * @returns {string} - Zaszyfrowane dane w formacie string (JSON)\r\n   */ encryptToString(data) {\n        const encryptedPackage = this.encrypt(data);\n        return JSON.stringify(encryptedPackage);\n    }\n    /**\r\n   * Deszyfruje dane z formatu string\r\n   * @param {string} encryptedString - Zaszyfrowane dane w formacie string (JSON)\r\n   * @returns {string} - Odszyfrowane dane\r\n   */ decryptFromString(encryptedString) {\n        const encryptedPackage = JSON.parse(encryptedString);\n        return this.decrypt(encryptedPackage);\n    }\n}\n// Funkcja pomocnicza do generowania bezpiecznego klucza głównego\nfunction generateMasterKey() {\n    return crypto__WEBPACK_IMPORTED_MODULE_0___default().randomBytes(32).toString(\"hex\");\n}\n// Fallback - uproszczone szyfrowanie dla kompatybilności wstecznej\n// Dla zachowania kompatybilności ze starszym kodem\nfunction simpleEncrypt(data, key) {\n    if (!key) {\n        throw new Error(\"Encryption key is required\");\n    }\n    // Derive 32-byte key from the provided key using PBKDF2\n    const derivedKey = crypto__WEBPACK_IMPORTED_MODULE_0___default().pbkdf2Sync(key, \"salt\", 1000, 32, \"sha256\");\n    const iv = crypto__WEBPACK_IMPORTED_MODULE_0___default().randomBytes(16);\n    const cipher = crypto__WEBPACK_IMPORTED_MODULE_0___default().createCipheriv(\"aes-256-gcm\", derivedKey, iv);\n    let encrypted = cipher.update(data, \"utf8\", \"base64\");\n    encrypted += cipher.final(\"base64\");\n    const authTag = cipher.getAuthTag();\n    return {\n        encryptedData: encrypted,\n        iv: iv.toString(\"base64\"),\n        authTag: authTag.toString(\"base64\")\n    };\n}\nfunction simpleDecrypt(encryptedPackage, key) {\n    if (!key) {\n        throw new Error(\"Decryption key is required\");\n    }\n    // Derive the same key using the same parameters\n    const derivedKey = crypto__WEBPACK_IMPORTED_MODULE_0___default().pbkdf2Sync(key, \"salt\", 1000, 32, \"sha256\");\n    const decipher = crypto__WEBPACK_IMPORTED_MODULE_0___default().createDecipheriv(\"aes-256-gcm\", derivedKey, Buffer.from(encryptedPackage.iv, \"base64\"));\n    decipher.setAuthTag(Buffer.from(encryptedPackage.authTag, \"base64\"));\n    let decrypted = decipher.update(encryptedPackage.encryptedData, \"base64\", \"utf8\");\n    decrypted += decipher.final(\"utf8\");\n    return decrypted;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/security/encryption/encryption-service.js\n");

/***/ }),

/***/ "(rsc)/./src/lib/security/token-service.js":
/*!*******************************************!*\
  !*** ./src/lib/security/token-service.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TokenService: () => (/* binding */ TokenService),\n/* harmony export */   generateToken: () => (/* binding */ generateToken),\n/* harmony export */   hashToken: () => (/* binding */ hashToken),\n/* harmony export */   tokenService: () => (/* binding */ tokenService)\n/* harmony export */ });\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! crypto */ \"crypto\");\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(crypto__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _database_supabase_admin_client__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../database/supabase-admin-client */ \"(rsc)/./src/lib/database/supabase-admin-client.js\");\n// src/lib/security/token-service.js\n\n\n/**\r\n * Zunifikowany serwis zarządzania tokenami dostępowymi\r\n * Konsoliduje funkcje z token-utils.js i token-service.js\r\n */ class TokenService {\n    /**\r\n   * Inicjalizuje serwis tokenów z opcjonalnymi ustawieniami\r\n   * @param {Object} options - Opcje konfiguracyjne \r\n   */ constructor(options = {}){\n        this.tokenLength = options.tokenLength || 32; // długość tokenu w bajtach\n        this.defaultExpiry = options.defaultExpiry || 30; // domyślny czas wygaśnięcia w minutach\n        this.salt = process.env.TOKEN_SALT || \"default-salt-for-tokens\"; // sól do hashowania tokenów\n        // Limity generowania tokenów (zabezpieczenie przed nadużyciami)\n        this.rateLimit = options.rateLimit || {\n            maxTokens: 5,\n            interval: 60\n        };\n    }\n    /**\r\n   * Generuje nowy token dostępu dla zakupu\r\n   * @param {string} purchaseId - ID zakupu\r\n   * @param {string} userId - ID użytkownika tworzącego token (opcjonalne)\r\n   * @param {number} expirationMinutes - Czas ważności tokenu w minutach\r\n   * @returns {Promise<{token: string, tokenId: string, accessUrl: string}>}\r\n   */ async generateAccessToken(purchaseId, userId = null, expirationMinutes = this.defaultExpiry) {\n        try {\n            // Sprawdź limity tylko jeśli podano ID użytkownika\n            // Nowa wersja - obsługa błędów w checkRateLimit\n            if (userId) {\n                try {\n                    const withinLimit = await this.checkRateLimit(userId);\n                    if (!withinLimit) {\n                        console.warn(`Rate limit exceeded for user ${userId}`);\n                    // Kontynuujemy mimo limitu - nie blokujemy krytycznej funkcjonalności\n                    }\n                } catch (rateLimitError) {\n                    console.error(\"Error checking rate limit:\", rateLimitError);\n                // Kontynuujemy mimo błędu sprawdzania limitu\n                }\n            }\n            // Generowanie kryptograficznie bezpiecznego tokenu\n            const token = crypto__WEBPACK_IMPORTED_MODULE_0___default().randomBytes(this.tokenLength).toString(\"hex\");\n            // Hashowanie tokenu do przechowania w bazie\n            const tokenHash = this.hashToken(token);\n            // Obliczanie daty wygaśnięcia\n            const expiresAt = new Date();\n            expiresAt.setMinutes(expiresAt.getMinutes() + expirationMinutes);\n            // Przygotowanie podstawowych danych tokenu bez created_by\n            const tokenData = {\n                purchase_record_id: purchaseId,\n                token_hash: tokenHash,\n                expires_at: expiresAt.toISOString(),\n                used: false,\n                created_at: new Date().toISOString()\n            };\n            // Zapisanie tokenu w bazie danych - nie używamy kolumny created_by, która nie istnieje\n            const { data, error } = await _database_supabase_admin_client__WEBPACK_IMPORTED_MODULE_1__[\"default\"].from(\"access_tokens\").insert(tokenData).select(\"id\").single();\n            if (error) {\n                console.error(\"Błąd tworzenia tokenu dostępu:\", error);\n                throw new Error(`Nie udało się utworzyć tokenu dostępu: ${error.message}`);\n            }\n            // Generowanie URL dostępu\n            const baseUrl = \"http://localhost:3000\" || 0;\n            const accessUrl = `${baseUrl}/access?id=${purchaseId}&token=${token}`;\n            // Logowanie operacji w dzienniku bezpieczeństwa\n            await this.logTokenEvent(\"token_created\", data.id, purchaseId, userId);\n            return {\n                token,\n                tokenId: data.id,\n                accessUrl\n            };\n        } catch (error) {\n            console.error(\"Błąd w generateAccessToken:\", error);\n            throw error;\n        }\n    }\n    /**\r\n   * Weryfikuje token dostępu\r\n   * @param {string} token - Token do weryfikacji\r\n   * @param {string} purchaseId - ID zakupu\r\n   * @param {Object} metadata - Opcjonalne metadane (IP, User Agent)\r\n   * @returns {Promise<{valid: boolean, tokenData: Object|null, reason: string|null}>}\r\n   */ async verifyAccessToken(token, purchaseId, metadata = {}) {\n        try {\n            // Obliczanie hash tokenu\n            const tokenHash = this.hashToken(token);\n            // Wyszukanie tokenu w bazie danych\n            const { data, error } = await _database_supabase_admin_client__WEBPACK_IMPORTED_MODULE_1__[\"default\"].from(\"access_tokens\").select(\"*\").eq(\"purchase_record_id\", purchaseId).eq(\"token_hash\", tokenHash).gt(\"expires_at\", new Date().toISOString()).single();\n            // Jeśli wystąpił błąd (token nie znaleziony, wygasł, itp.)\n            if (error) {\n                // Sprawdź przyczynę niepowodzenia\n                const reason = await this.getTokenFailureReason(tokenHash, purchaseId);\n                // Zaloguj nieudaną próbę weryfikacji\n                await this.logTokenEvent(\"token_verification_failed\", null, purchaseId, null, {\n                    reason: reason,\n                    ip: metadata.ip,\n                    userAgent: metadata.userAgent\n                });\n                return {\n                    valid: false,\n                    tokenData: null,\n                    reason\n                };\n            }\n            // Jeśli token został już wykorzystany\n            if (data.used) {\n                await this.logTokenEvent(\"token_verification_failed\", data.id, purchaseId, null, {\n                    reason: \"Token już wykorzystany\",\n                    ip: metadata.ip,\n                    userAgent: metadata.userAgent\n                });\n                return {\n                    valid: false,\n                    tokenData: data,\n                    reason: \"Token już wykorzystany\"\n                };\n            }\n            // Oznacz token jako wykorzystany, jeśli żądanie tego wymaga\n            if (metadata.markAsUsed !== false) {\n                await this.markTokenAsUsed(data.id, metadata);\n            }\n            // Zaloguj udaną weryfikację\n            await this.logTokenEvent(\"token_verification_success\", data.id, purchaseId, null, {\n                ip: metadata.ip,\n                userAgent: metadata.userAgent\n            });\n            return {\n                valid: true,\n                tokenData: data,\n                reason: null\n            };\n        } catch (error) {\n            console.error(\"Błąd weryfikacji tokenu:\", error);\n            return {\n                valid: false,\n                tokenData: null,\n                reason: `Wystąpił błąd: ${error.message}`\n            };\n        }\n    }\n    /**\r\n   * Oznacza token jako wykorzystany\r\n   * @param {string} tokenId - ID tokenu\r\n   * @param {Object} metadata - Metadane (IP, User Agent)\r\n   * @returns {Promise<boolean>} - Czy operacja się powiodła\r\n   */ async markTokenAsUsed(tokenId, metadata = {}) {\n        try {\n            const { error } = await _database_supabase_admin_client__WEBPACK_IMPORTED_MODULE_1__[\"default\"].from(\"access_tokens\").update({\n                used: true,\n                used_at: new Date().toISOString(),\n                ip_address: metadata.ip || null,\n                user_agent: metadata.userAgent || null\n            }).eq(\"id\", tokenId);\n            if (error) {\n                console.error(\"Błąd oznaczania tokenu jako użytego:\", error);\n                return false;\n            }\n            return true;\n        } catch (error) {\n            console.error(\"Wyjątek w markTokenAsUsed:\", error);\n            return false;\n        }\n    }\n    /**\r\n   * Sprawdza przyczynę niepowodzenia weryfikacji tokenu\r\n   * @param {string} tokenHash - Hash tokenu\r\n   * @param {string} purchaseId - ID zakupu\r\n   * @returns {Promise<string>} - Przyczyna niepowodzenia\r\n   */ async getTokenFailureReason(tokenHash, purchaseId) {\n        try {\n            // Sprawdź, czy token istnieje, ale jest już użyty lub wygasł\n            const { data: tokenData } = await _database_supabase_admin_client__WEBPACK_IMPORTED_MODULE_1__[\"default\"].from(\"access_tokens\").select(\"*\").eq(\"purchase_record_id\", purchaseId).eq(\"token_hash\", tokenHash).maybeSingle();\n            if (tokenData) {\n                if (tokenData.used) {\n                    return \"Token już wykorzystany\";\n                }\n                if (new Date(tokenData.expires_at) <= new Date()) {\n                    return \"Token wygasł\";\n                }\n            }\n            return \"Token nie znaleziony\";\n        } catch (error) {\n            console.error(\"Błąd sprawdzania przyczyny niepowodzenia weryfikacji tokenu:\", error);\n            return \"Wystąpił błąd podczas weryfikacji\";\n        }\n    }\n    /**\r\n   * Sprawdza limity generowania tokenów dla użytkownika - poprawiona wersja\r\n   * @param {string} userId - ID użytkownika\r\n   * @returns {Promise<boolean>} - Czy użytkownik jest w limicie\r\n   */ async checkRateLimit(userId) {\n        try {\n            // Obliczanie czasu od którego sprawdzamy limity\n            const checkFrom = new Date();\n            checkFrom.setMinutes(checkFrom.getMinutes() - this.rateLimit.interval);\n            // Liczenie tokenów wygenerowanych przez użytkownika w danym okresie\n            // Ta część może nie działać, jeśli nie ma kolumny created_by, więc otaczamy ją try-catch\n            try {\n                // W przypadku braku kolumny created_by nie możemy sprawdzić limitu\n                // i zwracamy true (dozwolone)\n                return true;\n            /* Kod wyłączony, ponieważ kolumna created_by nie istnieje\r\n        const { count, error } = await supabaseAdmin\r\n          .from('access_tokens')\r\n          .select('id', { count: 'exact', head: true })\r\n          .eq('created_by', userId)\r\n          .gte('created_at', checkFrom.toISOString());\r\n        \r\n        if (error) {\r\n          console.error('Błąd sprawdzania limitu tokenów:', error);\r\n          // W przypadku błędu, pozwalamy na utworzenie tokenu (fail open)\r\n          return true;\r\n        }\r\n        \r\n        return count < this.rateLimit.maxTokens;\r\n        */ } catch (error) {\n                console.error(\"Błąd sprawdzania limitu token\\xf3w:\", error);\n                // W przypadku błędu, pozwalamy na utworzenie tokenu\n                return true;\n            }\n        } catch (error) {\n            console.error(\"Wyjątek podczas sprawdzania limitu token\\xf3w:\", error);\n            // W przypadku wyjątku, pozwalamy na utworzenie tokenu\n            return true;\n        }\n    }\n    /**\r\n   * Hashuje token do przechowywania w bazie danych\r\n   * @param {string} token - Token do zahashowania\r\n   * @returns {string} - Hash tokenu\r\n   */ hashToken(token) {\n        return crypto__WEBPACK_IMPORTED_MODULE_0___default().createHash(\"sha256\").update(token + this.salt).digest(\"hex\");\n    }\n    /**\r\n   * Loguje zdarzenie związane z tokenem\r\n   * @param {string} actionType - Typ akcji\r\n   * @param {string} tokenId - ID tokenu (opcjonalne)\r\n   * @param {string} purchaseId - ID zakupu (opcjonalne)\r\n   * @param {string} userId - ID użytkownika (opcjonalne)\r\n   * @param {Object} details - Dodatkowe szczegóły\r\n   */ async logTokenEvent(actionType, tokenId = null, purchaseId = null, userId = null, details = {}) {\n        try {\n            await _database_supabase_admin_client__WEBPACK_IMPORTED_MODULE_1__[\"default\"].from(\"security_logs\").insert({\n                action_type: actionType,\n                resource_type: \"access_token\",\n                resource_id: tokenId || purchaseId,\n                user_id: userId,\n                ip_address: details.ip || null,\n                user_agent: details.userAgent || null,\n                status: actionType.includes(\"_failed\") ? \"failure\" : \"success\",\n                details: details,\n                created_at: new Date().toISOString()\n            });\n        } catch (error) {\n            console.error(\"Błąd logowania zdarzenia tokenu:\", error);\n        // Nie powodujemy błędu, tylko logujemy\n        }\n    }\n}\n// Eksport instancji domyślnej do użycia w aplikacji\nconst tokenService = new TokenService();\n// Eksport funkcji pomocniczych kompatybilnych wstecznie\nfunction generateToken() {\n    return crypto__WEBPACK_IMPORTED_MODULE_0___default().randomBytes(32).toString(\"hex\");\n}\nfunction hashToken(token) {\n    const salt = process.env.TOKEN_SALT || \"default-salt-for-tokens\";\n    return crypto__WEBPACK_IMPORTED_MODULE_0___default().createHash(\"sha256\").update(token + salt).digest(\"hex\");\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/security/token-service.js\n");

/***/ }),

/***/ "(rsc)/./src/services/offer/offer-service.js":
/*!*********************************************!*\
  !*** ./src/services/offer/offer-service.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   OfferService: () => (/* binding */ OfferService),\n/* harmony export */   offerService: () => (/* binding */ offerService)\n/* harmony export */ });\n/* harmony import */ var _lib_database_supabase_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/lib/database/supabase-client */ \"(rsc)/./src/lib/database/supabase-client.js\");\n/* harmony import */ var _lib_security_encryption_encryption_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/security/encryption/encryption-service */ \"(rsc)/./src/lib/security/encryption/encryption-service.js\");\n/* harmony import */ var _lib_database_supabase_admin_client__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/lib/database/supabase-admin-client */ \"(rsc)/./src/lib/database/supabase-admin-client.js\");\n// src/services/offer/offer-service.js\n\n\n\n/**\r\n * Serwis ofert - centralizuje logikę biznesową związaną z ofertami\r\n */ class OfferService {\n    /**\r\n   * Inicjalizuje serwis ofert\r\n   * @param {Object} deps - Zależności serwisu\r\n   */ constructor(deps = {}){\n        this.offersRepo = deps.offersRepo || _lib_database_supabase_client__WEBPACK_IMPORTED_MODULE_0__.offersRepository;\n        this.platformsRepo = deps.platformsRepo || _lib_database_supabase_client__WEBPACK_IMPORTED_MODULE_0__.platformsRepository;\n        this.encryptionService = deps.encryptionService || new _lib_security_encryption_encryption_service__WEBPACK_IMPORTED_MODULE_1__.EncryptionService(process.env.ENCRYPTION_MASTER_KEY || \"dfbe3aca7f8dad3d316426e6bf0cbb3f6c54d4a0328fccd0b48ca876eb22f668\");\n    }\n    /**\r\n   * Pobiera oferty z filtrowaniem\r\n   * @param {Object} filters - Filtry i opcje sortowania/paginacji\r\n   * @returns {Promise<Array>} - Lista ofert\r\n   */ async getOffers(filters = {}) {\n        return this.offersRepo.getAll(filters);\n    }\n    /**\r\n   * Pobiera szczegóły oferty\r\n   * @param {string} offerId - ID oferty\r\n   * @returns {Promise<Object>} - Szczegóły oferty\r\n   */ async getOfferDetails(offerId) {\n        return this.offersRepo.getById(offerId);\n    }\n    /**\r\n   * Tworzy nową ofertę\r\n   * @param {Object} offerData - Dane oferty\r\n   * @param {string} userId - ID użytkownika tworzącego ofertę\r\n   * @returns {Promise<Object>} - Utworzona oferta\r\n   */ async createOffer(offerData, userId) {\n        // 1. Sprawdź, czy użytkownik ma uprawnienia do grupy\n        const hasPermission = await this.checkGroupPermissions(offerData.groupId, userId);\n        if (!hasPermission) {\n            throw new Error(\"Brak uprawnień do tworzenia ofert dla tej grupy\");\n        }\n        // 2. Waliduj platformę\n        const platform = await this.platformsRepo.getById(offerData.platformId);\n        if (!platform) {\n            throw new Error(\"Wybrana platforma nie istnieje\");\n        }\n        // 3. Przygotuj dane oferty\n        const offerToCreate = {\n            group_id: offerData.groupId,\n            platform_id: offerData.platformId,\n            status: \"active\",\n            slots_total: offerData.slotsTotal,\n            slots_available: offerData.slotsTotal,\n            price_per_slot: offerData.pricePerSlot,\n            currency: offerData.currency || \"PLN\",\n            created_at: new Date().toISOString(),\n            updated_at: new Date().toISOString()\n        };\n        // 4. Utwórz ofertę\n        const createdOffer = await this.offersRepo.create(offerToCreate);\n        if (!createdOffer) {\n            throw new Error(\"Nie udało się utworzyć oferty\");\n        }\n        // 5. Zapisz instrukcje dostępu, jeśli zostały dostarczone\n        if (offerData.accessInstructions) {\n            await this.saveAccessInstructions(createdOffer.id, offerData.accessInstructions, userId);\n        }\n        // 6. Zaloguj operację\n        await this.logOfferActivity(\"create\", createdOffer.id, userId, {\n            group_id: offerData.groupId\n        });\n        return createdOffer;\n    }\n    /**\r\n   * Aktualizuje ofertę\r\n   * @param {string} offerId - ID oferty\r\n   * @param {Object} updates - Dane do aktualizacji\r\n   * @param {string} userId - ID użytkownika aktualizującego ofertę\r\n   * @returns {Promise<Object>} - Zaktualizowana oferta\r\n   */ async updateOffer(offerId, updates, userId) {\n        // 1. Pobierz aktualne dane oferty\n        const offer = await this.offersRepo.getById(offerId);\n        if (!offer) {\n            throw new Error(\"Oferta nie istnieje\");\n        }\n        // 2. Sprawdź uprawnienia\n        const hasPermission = await this.checkOfferPermissions(offer, userId);\n        if (!hasPermission) {\n            throw new Error(\"Brak uprawnień do aktualizacji tej oferty\");\n        }\n        // 3. Przygotuj dane do aktualizacji\n        const updateData = {\n            slots_total: updates.slotsTotal !== undefined ? updates.slotsTotal : offer.slots_total,\n            slots_available: updates.slotsAvailable !== undefined ? updates.slotsAvailable : offer.slots_available,\n            price_per_slot: updates.pricePerSlot !== undefined ? updates.pricePerSlot : offer.price_per_slot,\n            status: updates.status || offer.status,\n            currency: updates.currency || offer.currency,\n            updated_at: new Date().toISOString()\n        };\n        // 4. Aktualizuj ofertę\n        const updatedOffer = await this.offersRepo.update(offerId, updateData);\n        if (!updatedOffer) {\n            throw new Error(\"Nie udało się zaktualizować oferty\");\n        }\n        // 5. Zapisz instrukcje dostępu, jeśli zostały zaktualizowane\n        if (updates.accessInstructions) {\n            await this.saveAccessInstructions(offerId, updates.accessInstructions, userId);\n        }\n        // 6. Zaloguj operację\n        await this.logOfferActivity(\"update\", offerId, userId, {\n            updates: Object.keys(updates)\n        });\n        return updatedOffer;\n    }\n    /**\r\n   * Usuwa ofertę\r\n   * @param {string} offerId - ID oferty\r\n   * @param {string} userId - ID użytkownika usuwającego ofertę\r\n   * @returns {Promise<boolean>} - Czy operacja się powiodła\r\n   */ async deleteOffer(offerId, userId) {\n        // 1. Pobierz aktualne dane oferty\n        const offer = await this.offersRepo.getById(offerId);\n        if (!offer) {\n            throw new Error(\"Oferta nie istnieje\");\n        }\n        // 2. Sprawdź uprawnienia\n        const hasPermission = await this.checkOfferPermissions(offer, userId);\n        if (!hasPermission) {\n            throw new Error(\"Brak uprawnień do usunięcia tej oferty\");\n        }\n        // 3. Sprawdź, czy są aktywne zakupy dla tej oferty\n        const hasActivePurchases = await this.checkActivePurchases(offerId);\n        if (hasActivePurchases) {\n            throw new Error(\"Nie można usunąć oferty z aktywnymi zakupami\");\n        }\n        // 4. Usuń ofertę\n        const success = await this.offersRepo.delete(offerId);\n        if (!success) {\n            throw new Error(\"Nie udało się usunąć oferty\");\n        }\n        // 5. Zaloguj operację\n        await this.logOfferActivity(\"delete\", offerId, userId, {\n            group_id: offer.group_id\n        });\n        return true;\n    }\n    /**\r\n   * Zapisuje zaszyfrowane instrukcje dostępu dla oferty\r\n   * @param {string} offerId - ID oferty\r\n   * @param {string} instructions - Instrukcje dostępu\r\n   * @param {string} userId - ID użytkownika\r\n   * @returns {Promise<boolean>} - Czy operacja się powiodła\r\n   */ async saveAccessInstructions(offerId, instructions, userId) {\n        try {\n            // 1. Pobierz lub wygeneruj klucz szyfrowania\n            let encryptionKeyId;\n            const { data: existingKey } = await _lib_database_supabase_admin_client__WEBPACK_IMPORTED_MODULE_2__[\"default\"].from(\"encryption_keys\").select(\"id\").eq(\"key_type\", \"master\").eq(\"active\", true).single();\n            if (existingKey) {\n                encryptionKeyId = existingKey.id;\n            } else {\n                // Generuj nowy klucz\n                const newKey = {\n                    key_type: \"master\",\n                    public_key: \"dummy_public_key_\" + Math.random().toString(36).substring(2),\n                    private_key_enc: \"dummy_encrypted_private_key_\" + Math.random().toString(36).substring(2),\n                    active: true,\n                    created_at: new Date().toISOString()\n                };\n                const { data: createdKey } = await _lib_database_supabase_admin_client__WEBPACK_IMPORTED_MODULE_2__[\"default\"].from(\"encryption_keys\").insert([\n                    newKey\n                ]).select(\"id\").single();\n                encryptionKeyId = createdKey?.id;\n            }\n            if (!encryptionKeyId) {\n                throw new Error(\"Failed to get or create encryption key\");\n            }\n            // 2. Zaszyfruj instrukcje\n            // W rzeczywistej implementacji użylibyśmy EncryptionService\n            // ale dla kompatybilności wstecznej używamy prostszego podejścia\n            const encryptedPackage = this.encryptionService.encryptAccessInstructions(instructions, offerId);\n            // 3. Przygotuj dane do zapisania\n            const encryptedData = \"ENCRYPTED:\" + Buffer.from(instructions).toString(\"base64\");\n            const iv = encryptedPackage.iv;\n            const authTag = encryptedPackage.authTag;\n            const dataKeyEnc = \"dummy_key_enc_\" + Math.random().toString(36).substring(2);\n            // 4. Sprawdź, czy istnieją już instrukcje dla tej oferty\n            const { data: existingInstructions } = await _lib_database_supabase_admin_client__WEBPACK_IMPORTED_MODULE_2__[\"default\"].from(\"access_instructions\").select(\"id\").eq(\"group_sub_id\", offerId).maybeSingle();\n            if (existingInstructions) {\n                // Aktualizuj istniejące instrukcje\n                await _lib_database_supabase_admin_client__WEBPACK_IMPORTED_MODULE_2__[\"default\"].from(\"access_instructions\").update({\n                    encrypted_data: encryptedData,\n                    data_key_enc: dataKeyEnc,\n                    iv: iv,\n                    encryption_version: \"2.0\",\n                    updated_at: new Date().toISOString()\n                }).eq(\"id\", existingInstructions.id);\n            } else {\n                // Utwórz nowe instrukcje\n                await _lib_database_supabase_admin_client__WEBPACK_IMPORTED_MODULE_2__[\"default\"].from(\"access_instructions\").insert({\n                    group_sub_id: offerId,\n                    encrypted_data: encryptedData,\n                    data_key_enc: dataKeyEnc,\n                    encryption_key_id: encryptionKeyId,\n                    iv: iv,\n                    encryption_version: \"2.0\",\n                    created_at: new Date().toISOString(),\n                    updated_at: new Date().toISOString()\n                });\n            }\n            // 5. Zaloguj operację\n            await this.logOfferActivity(\"instruction_update\", offerId, userId);\n            return true;\n        } catch (error) {\n            console.error(\"Error saving access instructions:\", error);\n            throw new Error(\"Nie udało się zapisać instrukcji dostępu\");\n        }\n    }\n    /**\r\n   * Inicjuje proces zakupu oferty\r\n   * @param {string} offerId - ID oferty\r\n   * @param {string} userId - ID użytkownika\r\n   * @returns {Promise<Object>} - Dane zakupu\r\n   */ async initiatePurchase(offerId, userId) {\n        // 1. Pobierz ofertę\n        const offer = await this.offersRepo.getById(offerId);\n        if (!offer) {\n            throw new Error(\"Oferta nie istnieje\");\n        }\n        // 2. Sprawdź czy oferta jest aktywna i ma dostępne miejsca\n        if (offer.status !== \"active\") {\n            throw new Error(\"Oferta nie jest aktywna\");\n        }\n        if (offer.slots_available <= 0) {\n            throw new Error(\"Brak dostępnych miejsc w ofercie\");\n        }\n        // 3. Sprawdź, czy użytkownik nie kupuje własnej oferty\n        const isOwnerOrAdmin = await this.checkOfferPermissions(offer, userId);\n        if (isOwnerOrAdmin) {\n            throw new Error(\"Nie możesz kupić własnej oferty\");\n        }\n        // 4. Utwórz rekord zakupu\n        const purchaseRecord = {\n            user_id: userId,\n            group_sub_id: offerId,\n            status: \"pending_payment\",\n            created_at: new Date().toISOString(),\n            updated_at: new Date().toISOString()\n        };\n        const { data: purchase, error } = await _lib_database_supabase_admin_client__WEBPACK_IMPORTED_MODULE_2__[\"default\"].from(\"purchase_records\").insert([\n            purchaseRecord\n        ]).select().single();\n        if (error) {\n            throw new Error(\"Nie udało się utworzyć zakupu: \" + error.message);\n        }\n        // 5. Zaloguj operację\n        await this.logOfferActivity(\"purchase_initiated\", offerId, userId, {\n            purchase_id: purchase.id\n        });\n        return purchase;\n    }\n    // Metody pomocnicze\n    /**\r\n   * Sprawdza uprawnienia użytkownika do grupy\r\n   * @param {string} groupId - ID grupy\r\n   * @param {string} userId - ID użytkownika\r\n   * @returns {Promise<boolean>} - Czy użytkownik ma uprawnienia\r\n   */ async checkGroupPermissions(groupId, userId) {\n        try {\n            // Sprawdź, czy użytkownik jest właścicielem grupy\n            const { data: group } = await _lib_database_supabase_admin_client__WEBPACK_IMPORTED_MODULE_2__[\"default\"].from(\"groups\").select(\"owner_id\").eq(\"id\", groupId).single();\n            if (group && group.owner_id === userId) {\n                return true;\n            }\n            // Jeśli nie jest właścicielem, sprawdź czy jest adminem\n            const { data: membership } = await _lib_database_supabase_admin_client__WEBPACK_IMPORTED_MODULE_2__[\"default\"].from(\"group_members\").select(\"role\").eq(\"group_id\", groupId).eq(\"user_id\", userId).eq(\"status\", \"active\").single();\n            return membership && membership.role === \"admin\";\n        } catch (error) {\n            console.error(\"Error checking group permissions:\", error);\n            return false;\n        }\n    }\n    /**\r\n   * Sprawdza uprawnienia użytkownika do oferty\r\n   * @param {Object} offer - Oferta\r\n   * @param {string} userId - ID użytkownika\r\n   * @returns {Promise<boolean>} - Czy użytkownik ma uprawnienia\r\n   */ async checkOfferPermissions(offer, userId) {\n        return this.checkGroupPermissions(offer.group_id, userId);\n    }\n    /**\r\n   * Sprawdza, czy oferta ma aktywne zakupy\r\n   * @param {string} offerId - ID oferty\r\n   * @returns {Promise<boolean>} - Czy są aktywne zakupy\r\n   */ async checkActivePurchases(offerId) {\n        try {\n            const { count, error } = await _lib_database_supabase_admin_client__WEBPACK_IMPORTED_MODULE_2__[\"default\"].from(\"purchase_records\").select(\"id\", {\n                count: \"exact\",\n                head: true\n            }).eq(\"group_sub_id\", offerId).in(\"status\", [\n                \"completed\",\n                \"active\"\n            ]);\n            if (error) {\n                console.error(\"Error checking active purchases:\", error);\n                return true; // Zakładamy, że są aktywne zakupy w przypadku błędu\n            }\n            return count > 0;\n        } catch (error) {\n            console.error(\"Exception checking active purchases:\", error);\n            return true;\n        }\n    }\n    /**\r\n   * Loguje aktywność związaną z ofertą\r\n   * @param {string} action - Typ akcji\r\n   * @param {string} offerId - ID oferty\r\n   * @param {string} userId - ID użytkownika\r\n   * @param {Object} details - Dodatkowe szczegóły\r\n   */ async logOfferActivity(action, offerId, userId, details = {}) {\n        try {\n            await _lib_database_supabase_admin_client__WEBPACK_IMPORTED_MODULE_2__[\"default\"].from(\"security_logs\").insert({\n                user_id: userId,\n                action_type: action,\n                resource_type: \"group_sub\",\n                resource_id: String(offerId),\n                status: \"success\",\n                details: details,\n                created_at: new Date().toISOString()\n            });\n        } catch (error) {\n            console.error(\"Error logging offer activity:\", error);\n        // Nie rzucamy błędu, aby nie przerywać głównej operacji\n        }\n    }\n}\n// Eksport instancji domyślnej do użycia w aplikacji\nconst offerService = new OfferService();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/services/offer/offer-service.js\n");

/***/ }),

/***/ "(rsc)/./src/services/payment/payment-service.js":
/*!*************************************************!*\
  !*** ./src/services/payment/payment-service.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PaymentService: () => (/* binding */ PaymentService),\n/* harmony export */   paymentService: () => (/* binding */ paymentService)\n/* harmony export */ });\n/* harmony import */ var _lib_database_supabase_admin_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/lib/database/supabase-admin-client */ \"(rsc)/./src/lib/database/supabase-admin-client.js\");\n/* harmony import */ var _lib_security_token_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/security/token-service */ \"(rsc)/./src/lib/security/token-service.js\");\n/* harmony import */ var _offer_offer_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../offer/offer-service */ \"(rsc)/./src/services/offer/offer-service.js\");\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! crypto */ \"crypto\");\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(crypto__WEBPACK_IMPORTED_MODULE_3__);\n// src/services/payment/payment-service.js\n\n\n\n\n/**\r\n * Serwis płatności - zarządza procesem płatności i dostępu do subskrypcji\r\n */ class PaymentService {\n    /**\r\n   * Inicjalizuje serwis płatności\r\n   * @param {Object} deps - Zależności serwisu\r\n   */ constructor(deps = {}){\n        this.offerService = deps.offerService || _offer_offer_service__WEBPACK_IMPORTED_MODULE_2__.offerService;\n        this.tokenService = deps.tokenService || _lib_security_token_service__WEBPACK_IMPORTED_MODULE_1__.tokenService;\n        // Konfiguracja prowizji platformy\n        this.platformFeePercent = 0.05; // 5%\n    }\n    /**\r\n   * Bezpieczne zmniejszenie liczby dostępnych miejsc w ofercie\r\n   * Nie rzuca błędu, jeśli nie ma miejsc do zmniejszenia\r\n   * @param {string} offerId - ID oferty\r\n   * @returns {Promise<boolean>} - Czy operacja się powiodła\r\n   */ async safeDecrementAvailableSlots(offerId) {\n        try {\n            // Pobierz aktualną liczbę dostępnych miejsc\n            const { data: offer, error: fetchError } = await _lib_database_supabase_admin_client__WEBPACK_IMPORTED_MODULE_0__[\"default\"].from(\"group_subs\").select(\"slots_available, slots_total\").eq(\"id\", offerId).single();\n            // Sprawdź błędy pobierania\n            if (fetchError) {\n                console.error(`Error fetching offer ${offerId}:`, fetchError);\n                return false; // Nie rzucaj błędu, zwróć false\n            }\n            // Sprawdź czy dane oferty istnieją\n            if (!offer) {\n                console.error(`Offer ${offerId} not found`);\n                return false; // Nie rzucaj błędu, zwróć false\n            }\n            console.log(`Offer ${offerId} current slots: ${offer.slots_available}/${offer.slots_total}`);\n            // Tolerancja na niezgodność danych - jeśli slots_available jest null lub undefined, \n            // przyjmujemy że jest tyle samo co slots_total\n            if (offer.slots_available === null || offer.slots_available === undefined) {\n                console.warn(`Offer ${offerId} has null/undefined slots_available, using slots_total`);\n                offer.slots_available = offer.slots_total || 0;\n            }\n            // Konwersja na liczby dla bezpieczeństwa\n            const availableSlots = parseInt(offer.slots_available);\n            // Sprawdź, czy są dostępne miejsca - jeśli nie, zwróć false bez rzucania błędu\n            if (isNaN(availableSlots) || availableSlots <= 0) {\n                console.warn(`No available slots for offer ${offerId}: ${availableSlots}. Cannot decrement.`);\n                return false; // Nie rzucaj błędu, zwróć false\n            }\n            console.log(`Decrementing slots for offer ${offerId} from ${availableSlots} to ${availableSlots - 1}`);\n            // Zmniejsz liczbę dostępnych miejsc - używamy równania slots_available = slots_available - 1\n            // zamiast wpisywania konkretnej wartości, aby uniknąć race condition\n            const { data: updatedOffer, error: updateError } = await _lib_database_supabase_admin_client__WEBPACK_IMPORTED_MODULE_0__[\"default\"].from(\"group_subs\").update({\n                slots_available: availableSlots - 1,\n                updated_at: new Date().toISOString()\n            }).eq(\"id\", offerId).select(\"slots_available\").single();\n            if (updateError) {\n                console.error(`Error updating slots for offer ${offerId}:`, updateError);\n                return false; // Nie rzucaj błędu, zwróć false\n            }\n            console.log(`Successfully updated slots for offer ${offerId}, new value: ${updatedOffer.slots_available}`);\n            return true;\n        } catch (error) {\n            console.error(\"Error in safeDecrementAvailableSlots:\", error);\n            return false; // Nie rzucaj błędu, zwróć false\n        }\n    }\n    /**\r\n * Przetwarza płatność dla zakupu subskrypcji\r\n * @param {string} purchaseId - ID zakupu\r\n * @param {string} paymentMethod - Metoda płatności\r\n * @param {string} userId - ID użytkownika\r\n * @returns {Promise<Object>} - Dane dostępu\r\n */ async processPayment(purchaseId, paymentMethod, userId) {\n        // Flag dla ukończonych już etapów, żeby można było bezpiecznie zakończyć płatność \n        // nawet jeśli zmniejszenie liczby miejsc się nie powiedzie\n        const completedSteps = {\n            transactionCreated: false,\n            paymentProcessed: false,\n            purchaseUpdated: false,\n            slotsUpdated: false,\n            tokenGenerated: false,\n            groupMemberAdded: false\n        };\n        // Flag sprawdzający czy dekrementacja miejsc została już wykonana\n        let slotsAlreadyDecremented = false;\n        try {\n            console.log(`Processing payment for purchase ${purchaseId}, user ${userId}, method ${paymentMethod}`);\n            // 1. Pobierz dane zakupu\n            const purchase = await this.getPurchaseRecord(purchaseId);\n            console.log(`Found purchase record: ${purchaseId}, status: ${purchase.status}`);\n            // 1.1 Sprawdź, czy miejsca nie zostały już zdekrememtowane dla tego zakupu\n            if (purchase.slots_decremented) {\n                console.log(`Slots already decremented for purchase ${purchaseId}, will skip decrement`);\n                slotsAlreadyDecremented = true;\n            }\n            // 2. Sprawdź, czy zakup należy do użytkownika\n            if (purchase.user_id !== userId) {\n                console.warn(`User ${userId} attempted to process payment for purchase ${purchaseId} belonging to user ${purchase.user_id}`);\n                throw new Error(\"Brak uprawnień do przetworzenia tej płatności\");\n            }\n            // 3. Sprawdź, czy zakup jest w stanie oczekiwania na płatność\n            if (purchase.status !== \"pending_payment\") {\n                console.warn(`Invalid purchase status for ${purchaseId}: ${purchase.status}`);\n                throw new Error(\"Zakup nie jest w stanie oczekiwania na płatność\");\n            }\n            // 4. Sprawdź, czy oferta jest nadal aktywna i ma dostępne miejsca\n            const offer = purchase.group_sub;\n            if (!offer) {\n                console.error(`No group_sub found for purchase ${purchaseId}`);\n                throw new Error(\"Nie znaleziono szczeg\\xf3ł\\xf3w oferty dla tego zakupu\");\n            }\n            console.log(`Checking offer ${offer.id}: status=${offer.status}, slots=${offer.slots_available}/${offer.slots_total}`);\n            if (offer.status !== \"active\") {\n                console.warn(`Offer ${offer.id} is not active, status: ${offer.status}`);\n                throw new Error(\"Oferta nie jest już aktywna\");\n            }\n            // 5. Utwórz transakcję\n            console.log(`Creating transaction for purchase ${purchaseId}`);\n            const transactionId = await this.createTransaction(userId, offer.groups?.owner_id, offer.id, purchaseId, offer.price_per_slot, paymentMethod);\n            console.log(`Transaction created: ${transactionId}`);\n            completedSteps.transactionCreated = true;\n            // 6. Przetwórz płatność (symulacja)\n            await this.simulatePaymentProcessing(transactionId);\n            console.log(`Payment processed for transaction ${transactionId}`);\n            completedSteps.paymentProcessed = true;\n            // 7. Zaktualizuj status zakupu\n            await this.updatePurchaseStatus(purchaseId, \"completed\");\n            console.log(`Purchase status updated to completed: ${purchaseId}`);\n            completedSteps.purchaseUpdated = true;\n            // 8. Zmniejsz liczbę dostępnych miejsc w ofercie TYLKO jeśli nie zostało to wcześniej wykonane\n            if (!slotsAlreadyDecremented) {\n                try {\n                    const slotsUpdated = await this.safeDecrementAvailableSlots(offer.id);\n                    console.log(`Slots update result for offer ${offer.id}: ${slotsUpdated ? \"success\" : \"failed\"}`);\n                    completedSteps.slotsUpdated = slotsUpdated;\n                    // Oznacz w rekordzie zakupu, że dekrementacja została wykonana\n                    if (slotsUpdated) {\n                        await _lib_database_supabase_admin_client__WEBPACK_IMPORTED_MODULE_0__[\"default\"].from(\"purchase_records\").update({\n                            slots_decremented: true\n                        }).eq(\"id\", purchaseId);\n                        console.log(`Purchase ${purchaseId} marked as slots_decremented`);\n                    }\n                } catch (slotError) {\n                    // Logujemy błąd, ale kontynuujemy proces\n                    console.warn(`Failed to update available slots for offer ${offer.id}: ${slotError.message}`);\n                    console.warn(\"Continuing payment process regardless of slot update failure\");\n                }\n            } else {\n                console.log(`Skipping slot decrement for offer ${offer.id} as it was already decremented`);\n                completedSteps.slotsUpdated = true; // Oznaczamy jako wykonane, ponieważ nie musimy tego robić\n            }\n            // 9. Dodaj użytkownika do grupy (NOWY KROK)\n            try {\n                if (offer.groups && offer.groups.id) {\n                    const addedToGroup = await this.addUserToGroup(userId, offer.groups.id);\n                    console.log(`User ${userId} added to group ${offer.groups.id}: ${addedToGroup ? \"success\" : \"failed\"}`);\n                    completedSteps.groupMemberAdded = addedToGroup;\n                } else {\n                    console.warn(`No group ID found for offer ${offer.id}, cannot add user to group`);\n                }\n            } catch (groupError) {\n                console.warn(`Failed to add user ${userId} to group: ${groupError.message}`);\n                console.warn(\"Continuing payment process regardless of group membership failure\");\n            }\n            // 10. Wygeneruj token dostępu\n            const { token, tokenId, accessUrl } = await this.generateAccessToken(purchaseId, userId);\n            console.log(`Access token generated: ${tokenId}`);\n            completedSteps.tokenGenerated = true;\n            // 11. Zaloguj operację\n            await this.logPaymentActivity(\"payment_processed\", purchaseId, userId, {\n                transaction_id: transactionId,\n                payment_method: paymentMethod,\n                completed_steps: completedSteps\n            });\n            return {\n                success: true,\n                purchaseId,\n                transactionId,\n                accessUrl\n            };\n        } catch (error) {\n            console.error(\"Error processing payment:\", error);\n            // Jeśli wykonaliśmy już główne kroki płatności, ale wystąpił błąd przy zmniejszaniu miejsc\n            // lub generowaniu tokenu, możemy próbować zakończyć proces mimo to\n            if (completedSteps.transactionCreated && completedSteps.paymentProcessed && completedSteps.purchaseUpdated) {\n                console.warn(\"Error occurred but main payment steps completed. Attempting to recover...\");\n                try {\n                    // Jeśli token nie został wygenerowany, zróbmy to teraz\n                    if (!completedSteps.tokenGenerated) {\n                        console.log(\"Generating access token as part of recovery\");\n                        const { token, tokenId, accessUrl } = await this.generateAccessToken(purchaseId, userId);\n                        // Zaloguj częściowy sukces\n                        await this.logPaymentActivity(\"payment_recovered\", purchaseId, userId, {\n                            error: error.message,\n                            completed_steps: completedSteps,\n                            recovery: true\n                        });\n                        return {\n                            success: true,\n                            purchaseId,\n                            transactionId: null,\n                            accessUrl,\n                            recovered: true\n                        };\n                    }\n                } catch (recoveryError) {\n                    console.error(\"Recovery attempt failed:\", recoveryError);\n                // Kontynuuj do rzucenia głównego błędu\n                }\n            }\n            // Zaloguj błąd płatności\n            if (userId && purchaseId) {\n                await this.logPaymentActivity(\"payment_failed\", purchaseId, userId, {\n                    error: error.message,\n                    completed_steps: completedSteps\n                });\n            }\n            throw error;\n        }\n    }\n    /**\r\n * Dodaje użytkownika do grupy po zakończeniu płatności\r\n * @param {string} userId - ID użytkownika\r\n * @param {string} groupId - ID grupy\r\n * @returns {Promise<boolean>} - Czy operacja się powiodła\r\n */ async addUserToGroup(userId, groupId) {\n        if (!userId || !groupId) {\n            console.warn(\"Missing userId or groupId, cannot add user to group\");\n            return false;\n        }\n        try {\n            // Sprawdź, czy użytkownik już jest członkiem grupy\n            const { data: existingMember } = await _lib_database_supabase_admin_client__WEBPACK_IMPORTED_MODULE_0__[\"default\"].from(\"group_members\").select(\"id, status\").eq(\"user_id\", userId).eq(\"group_id\", groupId).maybeSingle();\n            if (existingMember) {\n                // Jeśli członek już istnieje, zaktualizuj status na aktywny\n                if (existingMember.status !== \"active\") {\n                    await _lib_database_supabase_admin_client__WEBPACK_IMPORTED_MODULE_0__[\"default\"].from(\"group_members\").update({\n                        status: \"active\",\n                        updated_at: new Date().toISOString()\n                    }).eq(\"id\", existingMember.id);\n                    console.log(`Updated existing member ${existingMember.id} status to active`);\n                } else {\n                    console.log(`User ${userId} is already an active member of group ${groupId}`);\n                }\n                return true;\n            }\n            // Dodaj nowy rekord członkostwa\n            const { error } = await _lib_database_supabase_admin_client__WEBPACK_IMPORTED_MODULE_0__[\"default\"].from(\"group_members\").insert({\n                group_id: groupId,\n                user_id: userId,\n                role: \"member\",\n                status: \"active\",\n                joined_at: new Date().toISOString(),\n                created_at: new Date().toISOString(),\n                updated_at: new Date().toISOString()\n            });\n            if (error) {\n                console.error(\"Error adding user to group:\", error);\n                return false;\n            }\n            console.log(`User ${userId} successfully added to group ${groupId}`);\n            return true;\n        } catch (error) {\n            console.error(\"Exception adding user to group:\", error);\n            return false;\n        }\n    }\n    /**\r\n   * Pobiera rekord zakupu ze szczegółami\r\n   * @param {string} purchaseId - ID zakupu\r\n   * @returns {Promise<Object>} - Dane zakupu\r\n   */ async getPurchaseRecord(purchaseId) {\n        const { data: purchase, error } = await _lib_database_supabase_admin_client__WEBPACK_IMPORTED_MODULE_0__[\"default\"].from(\"purchase_records\").select(`\r\n        *,\r\n        group_sub:group_subs(\r\n          *,\r\n          subscription_platforms(*),\r\n          groups(id, name, owner_id)\r\n        )\r\n      `).eq(\"id\", purchaseId).single();\n        if (error) {\n            throw new Error(\"Nie udało się pobrać danych zakupu: \" + error.message);\n        }\n        if (!purchase) {\n            throw new Error(\"Zakup nie istnieje\");\n        }\n        return purchase;\n    }\n    /**\r\n   * Tworzy rekord transakcji\r\n   * @param {string} buyerId - ID kupującego\r\n   * @param {string} sellerId - ID sprzedającego\r\n   * @param {string} groupSubId - ID oferty\r\n   * @param {string} purchaseRecordId - ID zakupu\r\n   * @param {number} amount - Kwota transakcji\r\n   * @param {string} paymentMethod - Metoda płatności\r\n   * @returns {Promise<string>} - ID transakcji\r\n   */ async createTransaction(buyerId, sellerId, groupSubId, purchaseRecordId, amount, paymentMethod) {\n        // Oblicz prowizję platformy\n        const platformFee = amount * this.platformFeePercent;\n        const sellerAmount = amount - platformFee;\n        // Generuj ID płatności (w rzeczywistości otrzymane od dostawcy płatności)\n        const paymentId = \"pmt_\" + Math.random().toString(36).substr(2, 9);\n        // Utwórz transakcję\n        const { data, error } = await _lib_database_supabase_admin_client__WEBPACK_IMPORTED_MODULE_0__[\"default\"].from(\"transactions\").insert({\n            buyer_id: buyerId,\n            seller_id: sellerId,\n            group_sub_id: groupSubId,\n            purchase_record_id: purchaseRecordId,\n            amount: amount,\n            platform_fee: platformFee,\n            seller_amount: sellerAmount,\n            currency: \"PLN\",\n            payment_method: paymentMethod,\n            payment_provider: \"stripe\",\n            payment_id: paymentId,\n            status: \"pending\",\n            created_at: new Date().toISOString(),\n            updated_at: new Date().toISOString()\n        }).select(\"id\").single();\n        if (error) {\n            throw new Error(\"Nie udało się utworzyć transakcji: \" + error.message);\n        }\n        return data.id;\n    }\n    /**\r\n   * Symuluje przetwarzanie płatności (w rzeczywistości integracja z dostawcą płatności)\r\n   * @param {string} transactionId - ID transakcji\r\n   * @returns {Promise<boolean>} - Czy płatność się powiodła\r\n   */ async simulatePaymentProcessing(transactionId) {\n        // W rzeczywistej implementacji: wywołanie dostawcy płatności\n        // Symulacja udanej płatności\n        // Aktualizuj status transakcji\n        const { error } = await _lib_database_supabase_admin_client__WEBPACK_IMPORTED_MODULE_0__[\"default\"].from(\"transactions\").update({\n            status: \"completed\",\n            completed_at: new Date().toISOString(),\n            updated_at: new Date().toISOString()\n        }).eq(\"id\", transactionId);\n        if (error) {\n            throw new Error(\"Nie udało się zaktualizować statusu transakcji: \" + error.message);\n        }\n        return true;\n    }\n    /**\r\n   * Aktualizuje status zakupu\r\n   * @param {string} purchaseId - ID zakupu\r\n   * @param {string} status - Nowy status\r\n   * @returns {Promise<Object>} - Zaktualizowany zakup\r\n   */ async updatePurchaseStatus(purchaseId, status) {\n        const updates = {\n            status,\n            updated_at: new Date().toISOString()\n        };\n        // Dodatkowe pola dla statusu \"completed\"\n        if (status === \"completed\") {\n            updates.access_provided = true;\n            updates.access_provided_at = new Date().toISOString();\n        }\n        const { data, error } = await _lib_database_supabase_admin_client__WEBPACK_IMPORTED_MODULE_0__[\"default\"].from(\"purchase_records\").update(updates).eq(\"id\", purchaseId).select().single();\n        if (error) {\n            throw new Error(\"Nie udało się zaktualizować statusu zakupu: \" + error.message);\n        }\n        return data;\n    }\n    /**\r\n   * Generuje token dostępu dla zakupu\r\n   * @param {string} purchaseId - ID zakupu\r\n   * @param {string} userId - ID użytkownika\r\n   * @returns {Promise<Object>} - Token i URL dostępu\r\n   */ async generateAccessToken(purchaseId, userId) {\n        try {\n            // Używamy ulepszonej wersji generateAccessToken, która jest odporna na brak kolumny created_by\n            const { token, tokenId, accessUrl } = await this.tokenService.generateAccessToken(purchaseId, userId, 30 // 30 minut ważności\n            );\n            return {\n                token,\n                tokenId,\n                accessUrl\n            };\n        } catch (error) {\n            console.error(\"Error generating access token:\", error);\n            // Fallback w przypadku błędu - generowanie tokenu bez tokenService\n            console.log(\"Using fallback token generation method\");\n            // Generuj token samodzielnie\n            const token = crypto__WEBPACK_IMPORTED_MODULE_3___default().randomBytes(32).toString(\"hex\");\n            // Oblicz hash tokenu\n            const tokenHash = crypto__WEBPACK_IMPORTED_MODULE_3___default().createHash(\"sha256\").update(token + (process.env.TOKEN_SALT || \"\")).digest(\"hex\");\n            // Zapisz token w bazie danych (uproszczona wersja)\n            const expiresAt = new Date();\n            expiresAt.setMinutes(expiresAt.getMinutes() + 30); // 30 minut\n            const { data, error: insertError } = await _lib_database_supabase_admin_client__WEBPACK_IMPORTED_MODULE_0__[\"default\"].from(\"access_tokens\").insert({\n                purchase_record_id: purchaseId,\n                token_hash: tokenHash,\n                expires_at: expiresAt.toISOString(),\n                used: false,\n                created_at: new Date().toISOString()\n            }).select(\"id\").single();\n            if (insertError) {\n                console.error(\"Error creating fallback token:\", insertError);\n                throw new Error(\"Failed to generate access token: \" + insertError.message);\n            }\n            // Generuj URL dostępu\n            const baseUrl = \"http://localhost:3000\" || 0;\n            const accessUrl = `${baseUrl}/access?id=${purchaseId}&token=${token}`;\n            // Loguj operację\n            await this.logPaymentActivity(\"token_generated_fallback\", purchaseId, userId);\n            return {\n                token,\n                tokenId: data.id,\n                accessUrl\n            };\n        }\n    }\n    /**\r\n   * Potwierdza poprawność dostępu do subskrypcji\r\n   * @param {string} purchaseId - ID zakupu\r\n   * @param {boolean} isWorking - Czy dostęp działa poprawnie\r\n   * @param {string} userId - ID użytkownika\r\n   * @returns {Promise<Object>} - Wynik potwierdzenia\r\n   */ async confirmAccess(purchaseId, isWorking, userId) {\n        try {\n            // 1. Pobierz dane zakupu\n            const purchase = await this.getPurchaseRecord(purchaseId);\n            // 2. Sprawdź, czy zakup należy do użytkownika\n            if (purchase.user_id !== userId) {\n                throw new Error(\"Brak uprawnień do potwierdzenia tego dostępu\");\n            }\n            // 3. Sprawdź, czy dostęp został udostępniony\n            if (!purchase.access_provided) {\n                throw new Error(\"Dostęp nie został jeszcze udostępniony\");\n            }\n            // 4. Zaktualizuj status potwierdzenia\n            await _lib_database_supabase_admin_client__WEBPACK_IMPORTED_MODULE_0__[\"default\"].from(\"purchase_records\").update({\n                access_confirmed: true,\n                access_confirmed_at: new Date().toISOString()\n            }).eq(\"id\", purchaseId);\n            // 5. Jeśli dostęp nie działa, utwórz spór\n            if (!isWorking) {\n                const disputeId = await this.createAccessDispute(purchaseId, userId);\n                return {\n                    confirmed: true,\n                    disputeCreated: true,\n                    disputeId\n                };\n            }\n            // 6. Zaloguj operację\n            await this.logPaymentActivity(\"access_confirmation\", purchaseId, userId, {\n                isWorking\n            });\n            return {\n                confirmed: true,\n                disputeCreated: false\n            };\n        } catch (error) {\n            console.error(\"Error confirming access:\", error);\n            throw error;\n        }\n    }\n    /**\r\n   * Tworzy spór dotyczący problemów z dostępem\r\n   * @param {string} purchaseId - ID zakupu\r\n   * @param {string} userId - ID użytkownika\r\n   * @returns {Promise<string>} - ID utworzonego sporu\r\n   */ async createAccessDispute(purchaseId, userId) {\n        // Znajdź transakcję powiązaną z zakupem\n        const { data: transaction } = await _lib_database_supabase_admin_client__WEBPACK_IMPORTED_MODULE_0__[\"default\"].from(\"transactions\").select(\"id, group_sub_id, seller_id\").eq(\"purchase_record_id\", purchaseId).single();\n        if (!transaction) {\n            throw new Error(\"Nie znaleziono transakcji dla tego zakupu\");\n        }\n        // Utwórz spór\n        const { data: dispute, error } = await _lib_database_supabase_admin_client__WEBPACK_IMPORTED_MODULE_0__[\"default\"].from(\"disputes\").insert({\n            reporter_id: userId,\n            reported_entity_type: \"subscription\",\n            reported_entity_id: transaction.group_sub_id,\n            transaction_id: transaction.id,\n            dispute_type: \"access\",\n            description: \"Automatyczne zgłoszenie: problem z dostępem do subskrypcji\",\n            status: \"open\",\n            evidence_required: true,\n            resolution_deadline: new Date(Date.now() + 3 * 24 * 60 * 60 * 1000).toISOString(),\n            created_at: new Date().toISOString(),\n            updated_at: new Date().toISOString()\n        }).select(\"id\").single();\n        if (error) {\n            throw new Error(\"Nie udało się utworzyć sporu: \" + error.message);\n        }\n        // Powiadomienia\n        await this.createNotifications(dispute.id, userId, transaction.seller_id);\n        return dispute.id;\n    }\n    /**\r\n   * Tworzy powiadomienia o sporze\r\n   * @param {string} disputeId - ID sporu\r\n   * @param {string} buyerId - ID kupującego\r\n   * @param {string} sellerId - ID sprzedającego\r\n   */ async createNotifications(disputeId, buyerId, sellerId) {\n        // Powiadomienie dla kupującego\n        await _lib_database_supabase_admin_client__WEBPACK_IMPORTED_MODULE_0__[\"default\"].from(\"notifications\").insert({\n            user_id: buyerId,\n            type: \"dispute_created\",\n            title: \"Zgłoszenie problemu z dostępem\",\n            content: \"Twoje zgłoszenie zostało zarejestrowane. Skontaktujemy się z Tobą wkr\\xf3tce.\",\n            related_entity_type: \"dispute\",\n            related_entity_id: disputeId,\n            created_at: new Date().toISOString(),\n            is_read: false\n        });\n        // Powiadomienie dla sprzedającego\n        await _lib_database_supabase_admin_client__WEBPACK_IMPORTED_MODULE_0__[\"default\"].from(\"notifications\").insert({\n            user_id: sellerId,\n            type: \"dispute_filed\",\n            title: \"Zgłoszono problem z dostępem\",\n            content: \"Kupujący zgłosił problem z dostępem do Twojej subskrypcji. Prosimy o pilną weryfikację.\",\n            related_entity_type: \"dispute\",\n            related_entity_id: disputeId,\n            created_at: new Date().toISOString(),\n            is_read: false\n        });\n    }\n    /**\r\n   * Loguje aktywność związaną z płatnością\r\n   * @param {string} action - Typ akcji\r\n   * @param {string} purchaseId - ID zakupu\r\n   * @param {string} userId - ID użytkownika\r\n   * @param {Object} details - Dodatkowe szczegóły\r\n   */ async logPaymentActivity(action, purchaseId, userId, details = {}) {\n        try {\n            await _lib_database_supabase_admin_client__WEBPACK_IMPORTED_MODULE_0__[\"default\"].from(\"security_logs\").insert({\n                user_id: userId,\n                action_type: action,\n                resource_type: \"purchase_record\",\n                resource_id: String(purchaseId),\n                status: action.includes(\"_failed\") ? \"failure\" : \"success\",\n                details: details,\n                created_at: new Date().toISOString()\n            });\n        } catch (error) {\n            console.error(\"Error logging payment activity:\", error);\n        // Nie rzucamy błędu, aby nie przerywać głównej operacji\n        }\n    }\n}\n// Eksport instancji domyślnej do użycia w aplikacji\nconst paymentService = new PaymentService();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/services/payment/payment-service.js\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/@clerk","vendor-chunks/next","vendor-chunks/tslib","vendor-chunks/cookie","vendor-chunks/map-obj","vendor-chunks/no-case","vendor-chunks/lower-case","vendor-chunks/snakecase-keys","vendor-chunks/snake-case","vendor-chunks/dot-case","vendor-chunks/@supabase","vendor-chunks/tr46","vendor-chunks/whatwg-url","vendor-chunks/webidl-conversions"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fpayments%2Froute&page=%2Fapi%2Fpayments%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fpayments%2Froute.js&appDir=C%3A%5CUsers%5Cbacze%5CProject%5CGroupShare%5Cgroupshare-project%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5Cbacze%5CProject%5CGroupShare%5Cgroupshare-project&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();